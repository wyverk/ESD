
nios_system.elf:     file format elf32-littlenios2
nios_system.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008230

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00003e14 memsz 0x00003e14 flags r-x
    LOAD off    0x00004e34 vaddr 0x0000be34 paddr 0x0000d4b8 align 2**12
         filesz 0x00001684 memsz 0x00001684 flags rw-
    LOAD off    0x00006b3c vaddr 0x0000eb3c paddr 0x0000eb3c align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003ac0  00008230  00008230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000144  0000bcf0  0000bcf0  00004cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001684  0000be34  0000d4b8  00004e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  0000eb3c  0000eb3c  00006b3c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000ec5c  0000ec5c  000064b8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000064b8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000690  00000000  00000000  000064e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000890e  00000000  00000000  00006b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000309e  00000000  00000000  0000f47e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003276  00000000  00000000  0001251c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000c88  00000000  00000000  00015794  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002052  00000000  00000000  0001641c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003750  00000000  00000000  0001846e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0001bbc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000650  00000000  00000000  0001bbd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001df66  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001df69  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001df75  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001df76  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001df77  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001df7b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001df7f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0001df83  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0001df8e  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0001df99  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0001dfa4  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000000b  00000000  00000000  0001dfaf  2**0
                  CONTENTS, READONLY
 29 .jdi          0000520d  00000000  00000000  0001dfba  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00068a05  00000000  00000000  000231c7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008230 l    d  .text	00000000 .text
0000bcf0 l    d  .rodata	00000000 .rodata
0000be34 l    d  .rwdata	00000000 .rwdata
0000eb3c l    d  .bss	00000000 .bss
0000ec5c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_system_bsp//obj/HAL/src/crt0.o
00008268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 servo_software.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00009d80 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00009ee8 l     F .text	00000034 alt_dev_reg
0000be4c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000a1c4 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000a3d0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0000ab34 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000ac68 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000ac94 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000aef0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000b050 l     F .text	0000003c alt_get_errno
0000b08c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0000d054 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000eb4c g     O .bss	00000004 alt_instruction_exception_handler
00009e6c g     F .text	0000007c alt_main
0000eb5c g     O .bss	00000100 alt_irq
0000d4b8 g       *ABS*	00000000 __flash_rwdata_start
0000d480 g     O .rwdata	00000004 KEYS_ptr
0000b4fc g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000eb58 g     O .bss	00000004 errno
0000eb44 g     O .bss	00000004 alt_argv
00015478 g       *ABS*	00000000 _gp
0000ced4 g     O .rwdata	00000180 alt_fd_list
0000b520 g     F .text	00000090 alt_find_dev
0000b844 g     F .text	00000148 memcpy
00009978 g     F .text	000000dc .hidden __floatsidf
0000afd4 g     F .text	0000007c alt_io_redirect
0000bcf0 g       *ABS*	00000000 __DTOR_END__
0000ae54 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000a5c8 g     F .text	0000021c altera_avalon_jtag_uart_read
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008724 g     F .text	00000064 .hidden __udivsi3
0000d4a0 g     O .rwdata	00000004 alt_max_fd
000087e0 g     F .text	000008ac .hidden __adddf3
0000d4b0 g     O .rwdata	00000004 _global_impure_ptr
0000ec5c g       *ABS*	00000000 __bss_end
00009c90 g     F .text	000000f0 alt_iic_isr_register
0000b3f4 g     F .text	00000108 alt_tick
00009c44 g     F .text	0000004c alt_ic_irq_enabled
0000b358 g     F .text	0000009c alt_alarm_stop
0000eb3c g     O .bss	00000004 alt_irq_active
000080fc g     F .exceptions	000000d4 alt_irq_handler
0000ceac g     O .rwdata	00000028 alt_dev_null
0000ac48 g     F .text	00000020 alt_dcache_flush_all
0000826c g     F .text	000000a8 convertAngle
000098f8 g     F .text	00000080 .hidden __fixdfsi
0000d4b8 g       *ABS*	00000000 __ram_rwdata_end
0000d498 g     O .rwdata	00000008 alt_dev_list
0000be34 g       *ABS*	00000000 __ram_rodata_end
0000bcf0 g     O .rodata	0000000a hex_const
00008788 g     F .text	00000058 .hidden __umodsi3
0000ec5c g       *ABS*	00000000 end
0000d488 g     O .rwdata	00000004 maxAngle
00008314 g     F .text	00000098 getDigits
0000a104 g     F .text	000000c0 altera_avalon_jtag_uart_init
000081d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0000bcf0 g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
00009a54 g     F .text	00000064 .hidden __clzsi2
0000a7e4 g     F .text	00000224 altera_avalon_jtag_uart_write
0000bb3c g     F .text	00000180 __call_exitprocs
00008230 g     F .text	0000003c _start
0000eb50 g     O .bss	00000004 _alt_tick_rate
0000eb54 g     O .bss	00000004 _alt_nticks
00009f54 g     F .text	0000004c alt_sys_init
0000ba24 g     F .text	00000118 __register_exitproc
0000a470 g     F .text	00000068 altera_avalon_jtag_uart_close
00009ab8 g     F .text	00000028 .hidden __mulsi3
0000be34 g       *ABS*	00000000 __ram_rwdata_start
0000bcf0 g       *ABS*	00000000 __ram_rodata_start
00009fa0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000b6b8 g     F .text	000000c4 alt_get_fd
0000b7c8 g     F .text	0000007c memcmp
0000a060 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0000ec5c g       *ABS*	00000000 __alt_stack_base
0000a0b0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000908c g     F .text	0000086c .hidden __muldf3
0000b5b0 g     F .text	00000108 alt_find_file
0000acd0 g     F .text	000000a4 alt_dev_llist_insert
0000d484 g     O .rwdata	00000004 minAngle
0000eb3c g       *ABS*	00000000 __bss_start
000084a0 g     F .text	0000018c main
0000eb48 g     O .bss	00000004 alt_envp
0000a000 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000d4a4 g     O .rwdata	00000004 alt_errno
0000862c g     F .text	00000084 .hidden __divsi3
0000bcf0 g       *ABS*	00000000 __CTOR_END__
0000bcf0 g       *ABS*	00000000 __flash_rodata_start
0000bcf0 g       *ABS*	00000000 __DTOR_LIST__
00009f1c g     F .text	00000038 alt_irq_init
0000b2d4 g     F .text	00000084 alt_release_fd
0000bcfa g     O .rodata	00000100 .hidden __clz_tab
0000be34 g     O .rwdata	00000018 HEX_ptr
0000b77c g     F .text	00000014 atexit
0000d4b4 g     O .rwdata	00000004 _impure_ptr
0000eb40 g     O .bss	00000004 alt_argc
0000add4 g     F .text	00000060 _do_dtors
00008020 g       .exceptions	00000000 alt_irq_entry
0000d490 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00009ae0 g     F .text	00000050 alt_ic_isr_register
0000d47c g     O .rwdata	00000004 SW_ptr
0000d4b8 g       *ABS*	00000000 _edata
0000ec5c g       *ABS*	00000000 _end
0000d478 g     O .rwdata	00000004 controller_ptr
00008230 g       *ABS*	00000000 __ram_exceptions_end
0000a4d8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00009bb8 g     F .text	0000008c alt_ic_irq_disable
0000b790 g     F .text	00000038 exit
000086b0 g     F .text	00000074 .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000bcbc g     F .text	00000034 _exit
0000aa08 g     F .text	0000012c alt_alarm_start
0000b98c g     F .text	00000098 strlen
0000b178 g     F .text	0000015c open
0000ae34 g     F .text	00000020 alt_icache_flush_all
0000d48c g     O .rwdata	00000004 alt_priority_mask
00009b30 g     F .text	00000088 alt_ic_irq_enable
0000d4a8 g     O .rwdata	00000008 alt_alarm_list
0000ad74 g     F .text	00000060 _do_ctors
0000ab70 g     F .text	000000d8 close
00009de8 g     F .text	00000084 alt_load
000083ac g     F .text	000000f4 keys_isr



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08608c14 	ori	at,at,33328
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080fc0 	call	80fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000706 	br	80a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    8094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    8098:	00081d00 	call	81d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    809c:	1000021e 	bne	r2,zero,80a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    80a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    80a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    80a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    80ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80f8:	ef80083a 	eret

000080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80fc:	defff904 	addi	sp,sp,-28
    8100:	dfc00615 	stw	ra,24(sp)
    8104:	df000515 	stw	fp,20(sp)
    8108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8110:	0005313a 	rdctl	r2,ipending
    8114:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    811c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8124:	00800044 	movi	r2,1
    8128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    812c:	e0fffb17 	ldw	r3,-20(fp)
    8130:	e0bffc17 	ldw	r2,-16(fp)
    8134:	1884703a 	and	r2,r3,r2
    8138:	10001426 	beq	r2,zero,818c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    813c:	00800074 	movhi	r2,1
    8140:	10bad704 	addi	r2,r2,-5284
    8144:	e0fffd17 	ldw	r3,-12(fp)
    8148:	180690fa 	slli	r3,r3,3
    814c:	10c5883a 	add	r2,r2,r3
    8150:	10c00017 	ldw	r3,0(r2)
    8154:	00800074 	movhi	r2,1
    8158:	10bad704 	addi	r2,r2,-5284
    815c:	e13ffd17 	ldw	r4,-12(fp)
    8160:	200890fa 	slli	r4,r4,3
    8164:	1105883a 	add	r2,r2,r4
    8168:	10800104 	addi	r2,r2,4
    816c:	10800017 	ldw	r2,0(r2)
    8170:	1009883a 	mov	r4,r2
    8174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    8178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    817c:	0005313a 	rdctl	r2,ipending
    8180:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8184:	e0bfff17 	ldw	r2,-4(fp)
    8188:	00000706 	br	81a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
    818c:	e0bffc17 	ldw	r2,-16(fp)
    8190:	1085883a 	add	r2,r2,r2
    8194:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8198:	e0bffd17 	ldw	r2,-12(fp)
    819c:	10800044 	addi	r2,r2,1
    81a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a4:	003fe106 	br	812c <_gp+0xffff2cb4>

    active = alt_irq_pending ();
    81a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    81ac:	e0bffb17 	ldw	r2,-20(fp)
    81b0:	103fdb1e 	bne	r2,zero,8120 <_gp+0xffff2ca8>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    81b4:	0001883a 	nop
}
    81b8:	0001883a 	nop
    81bc:	e037883a 	mov	sp,fp
    81c0:	dfc00117 	ldw	ra,4(sp)
    81c4:	df000017 	ldw	fp,0(sp)
    81c8:	dec00204 	addi	sp,sp,8
    81cc:	f800283a 	ret

000081d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    81d0:	defffb04 	addi	sp,sp,-20
    81d4:	dfc00415 	stw	ra,16(sp)
    81d8:	df000315 	stw	fp,12(sp)
    81dc:	df000304 	addi	fp,sp,12
    81e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
    81e4:	00bfffc4 	movi	r2,-1
    81e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
    81ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    81f0:	d0a5b517 	ldw	r2,-26924(gp)
    81f4:	10000726 	beq	r2,zero,8214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    81f8:	d0a5b517 	ldw	r2,-26924(gp)
    81fc:	e0fffd17 	ldw	r3,-12(fp)
    8200:	e1bffe17 	ldw	r6,-8(fp)
    8204:	e17fff17 	ldw	r5,-4(fp)
    8208:	1809883a 	mov	r4,r3
    820c:	103ee83a 	callr	r2
    8210:	00000206 	br	821c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    8214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    8218:	0005883a 	mov	r2,zero
}
    821c:	e037883a 	mov	sp,fp
    8220:	dfc00117 	ldw	ra,4(sp)
    8224:	df000017 	ldw	fp,0(sp)
    8228:	dec00204 	addi	sp,sp,8
    822c:	f800283a 	ret

Disassembly of section .text:

00008230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8230:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    823c:	d6951e14 	ori	gp,gp,21624
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8240:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8244:	10bacf14 	ori	r2,r2,60220

    movhi r3, %hi(__bss_end)
    8248:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    824c:	18fb1714 	ori	r3,r3,60508

    beq r2, r3, 1f
    8250:	10c00326 	beq	r2,r3,8260 <_start+0x30>

0:
    stw zero, (r2)
    8254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    825c:	10fffd36 	bltu	r2,r3,8254 <_gp+0xffff2ddc>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8260:	0009de80 	call	9de8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8264:	0009e6c0 	call	9e6c <alt_main>

00008268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8268:	003fff06 	br	8268 <_gp+0xffff2df0>

0000826c <convertAngle>:
	};

volatile int minAngle = 45;
volatile int maxAngle = 135;

int convertAngle(int angle){
    826c:	defffc04 	addi	sp,sp,-16
    8270:	dfc00315 	stw	ra,12(sp)
    8274:	df000215 	stw	fp,8(sp)
    8278:	df000204 	addi	fp,sp,8
    827c:	e13fff15 	stw	r4,-4(fp)
	int count = (angle -45)*(50000.0/90.0) + 49999;
    8280:	e0bfff17 	ldw	r2,-4(fp)
    8284:	10bff4c4 	addi	r2,r2,-45
    8288:	1009883a 	mov	r4,r2
    828c:	00099780 	call	9978 <__floatsidf>
    8290:	1011883a 	mov	r8,r2
    8294:	1813883a 	mov	r9,r3
    8298:	01b1c734 	movhi	r6,50972
    829c:	319c71c4 	addi	r6,r6,29127
    82a0:	01d02074 	movhi	r7,16513
    82a4:	39d71c44 	addi	r7,r7,23665
    82a8:	4009883a 	mov	r4,r8
    82ac:	480b883a 	mov	r5,r9
    82b0:	000908c0 	call	908c <__muldf3>
    82b4:	1009883a 	mov	r4,r2
    82b8:	180b883a 	mov	r5,r3
    82bc:	2005883a 	mov	r2,r4
    82c0:	2807883a 	mov	r3,r5
    82c4:	000d883a 	mov	r6,zero
    82c8:	01d03a34 	movhi	r7,16616
    82cc:	39da7804 	addi	r7,r7,27104
    82d0:	1009883a 	mov	r4,r2
    82d4:	180b883a 	mov	r5,r3
    82d8:	00087e00 	call	87e0 <__adddf3>
    82dc:	1009883a 	mov	r4,r2
    82e0:	180b883a 	mov	r5,r3
    82e4:	2005883a 	mov	r2,r4
    82e8:	2807883a 	mov	r3,r5
    82ec:	1009883a 	mov	r4,r2
    82f0:	180b883a 	mov	r5,r3
    82f4:	00098f80 	call	98f8 <__fixdfsi>
    82f8:	e0bffe15 	stw	r2,-8(fp)

	return count;
    82fc:	e0bffe17 	ldw	r2,-8(fp)
}
    8300:	e037883a 	mov	sp,fp
    8304:	dfc00117 	ldw	ra,4(sp)
    8308:	df000017 	ldw	fp,0(sp)
    830c:	dec00204 	addi	sp,sp,8
    8310:	f800283a 	ret

00008314 <getDigits>:

void getDigits(int number, int digits[3]){
    8314:	defffb04 	addi	sp,sp,-20
    8318:	dfc00415 	stw	ra,16(sp)
    831c:	df000315 	stw	fp,12(sp)
    8320:	dc000215 	stw	r16,8(sp)
    8324:	df000304 	addi	fp,sp,12
    8328:	e13ffd15 	stw	r4,-12(fp)
    832c:	e17ffe15 	stw	r5,-8(fp)
	digits[2] = number/100;
    8330:	e0bffe17 	ldw	r2,-8(fp)
    8334:	14000204 	addi	r16,r2,8
    8338:	e0bffd17 	ldw	r2,-12(fp)
    833c:	01401904 	movi	r5,100
    8340:	1009883a 	mov	r4,r2
    8344:	000862c0 	call	862c <__divsi3>
    8348:	80800015 	stw	r2,0(r16)
	digits[1] = (number%100)/10;
    834c:	e0bffe17 	ldw	r2,-8(fp)
    8350:	14000104 	addi	r16,r2,4
    8354:	e0bffd17 	ldw	r2,-12(fp)
    8358:	01401904 	movi	r5,100
    835c:	1009883a 	mov	r4,r2
    8360:	00086b00 	call	86b0 <__modsi3>
    8364:	01400284 	movi	r5,10
    8368:	1009883a 	mov	r4,r2
    836c:	000862c0 	call	862c <__divsi3>
    8370:	80800015 	stw	r2,0(r16)
	digits[0] = number%10;
    8374:	e0bffd17 	ldw	r2,-12(fp)
    8378:	01400284 	movi	r5,10
    837c:	1009883a 	mov	r4,r2
    8380:	00086b00 	call	86b0 <__modsi3>
    8384:	1007883a 	mov	r3,r2
    8388:	e0bffe17 	ldw	r2,-8(fp)
    838c:	10c00015 	stw	r3,0(r2)
}
    8390:	0001883a 	nop
    8394:	e6ffff04 	addi	sp,fp,-4
    8398:	dfc00217 	ldw	ra,8(sp)
    839c:	df000117 	ldw	fp,4(sp)
    83a0:	dc000017 	ldw	r16,0(sp)
    83a4:	dec00304 	addi	sp,sp,12
    83a8:	f800283a 	ret

000083ac <keys_isr>:
/* Interrupt Service Routine                                                 */
/*   Determines what caused the interrupt and calls the appropriate          */
/*  subroutine.                                                              */
/*                                                                           */
/*****************************************************************************/
{
    83ac:	defffa04 	addi	sp,sp,-24
    83b0:	dfc00515 	stw	ra,20(sp)
    83b4:	df000415 	stw	fp,16(sp)
    83b8:	dc000315 	stw	r16,12(sp)
    83bc:	df000404 	addi	fp,sp,16
    83c0:	e13ffe15 	stw	r4,-8(fp)
	int edge = *(KEYS_ptr + 3);
    83c4:	d0a00217 	ldw	r2,-32760(gp)
    83c8:	10800304 	addi	r2,r2,12
    83cc:	10800017 	ldw	r2,0(r2)
    83d0:	e0bffc15 	stw	r2,-16(fp)

	if(*SW_ptr >= 45 && *SW_ptr <= 135){
    83d4:	d0a00117 	ldw	r2,-32764(gp)
    83d8:	10800017 	ldw	r2,0(r2)
    83dc:	10800b70 	cmpltui	r2,r2,45
    83e0:	1000111e 	bne	r2,zero,8428 <keys_isr+0x7c>
    83e4:	d0a00117 	ldw	r2,-32764(gp)
    83e8:	10800017 	ldw	r2,0(r2)
    83ec:	10802228 	cmpgeui	r2,r2,136
    83f0:	10000d1e 	bne	r2,zero,8428 <keys_isr+0x7c>
		if(edge & 0x5){
    83f4:	e0bffc17 	ldw	r2,-16(fp)
    83f8:	1080014c 	andi	r2,r2,5
    83fc:	10000426 	beq	r2,zero,8410 <keys_isr+0x64>
			maxAngle = *(SW_ptr);
    8400:	d0a00117 	ldw	r2,-32764(gp)
    8404:	10800017 	ldw	r2,0(r2)
    8408:	d0a00415 	stw	r2,-32752(gp)
    840c:	00000606 	br	8428 <keys_isr+0x7c>
		}else if(edge & 0x8){
    8410:	e0bffc17 	ldw	r2,-16(fp)
    8414:	1080020c 	andi	r2,r2,8
    8418:	10000326 	beq	r2,zero,8428 <keys_isr+0x7c>
			minAngle = *(SW_ptr);
    841c:	d0a00117 	ldw	r2,-32764(gp)
    8420:	10800017 	ldw	r2,0(r2)
    8424:	d0a00315 	stw	r2,-32756(gp)
		}
	}

	if(minAngle > maxAngle){
    8428:	d0a00317 	ldw	r2,-32756(gp)
    842c:	d0e00417 	ldw	r3,-32752(gp)
    8430:	1880060e 	bge	r3,r2,844c <keys_isr+0xa0>
		int temp = minAngle;
    8434:	d0a00317 	ldw	r2,-32756(gp)
    8438:	e0bffd15 	stw	r2,-12(fp)
		minAngle = maxAngle;
    843c:	d0a00417 	ldw	r2,-32752(gp)
    8440:	d0a00315 	stw	r2,-32756(gp)
		maxAngle = temp;
    8444:	e0bffd17 	ldw	r2,-12(fp)
    8448:	d0a00415 	stw	r2,-32752(gp)
	}

	*(controller_ptr) = convertAngle(minAngle);
    844c:	d4200017 	ldw	r16,-32768(gp)
    8450:	d0a00317 	ldw	r2,-32756(gp)
    8454:	1009883a 	mov	r4,r2
    8458:	000826c0 	call	826c <convertAngle>
    845c:	80800015 	stw	r2,0(r16)
	*(controller_ptr + 1) = convertAngle(maxAngle);
    8460:	d0a00017 	ldw	r2,-32768(gp)
    8464:	14000104 	addi	r16,r2,4
    8468:	d0a00417 	ldw	r2,-32752(gp)
    846c:	1009883a 	mov	r4,r2
    8470:	000826c0 	call	826c <convertAngle>
    8474:	80800015 	stw	r2,0(r16)

	//clears the edge bits
	*(KEYS_ptr + 3) = 0;
    8478:	d0a00217 	ldw	r2,-32760(gp)
    847c:	10800304 	addi	r2,r2,12
    8480:	10000015 	stw	zero,0(r2)

    return;
    8484:	0001883a 	nop
}
    8488:	e6ffff04 	addi	sp,fp,-4
    848c:	dfc00217 	ldw	ra,8(sp)
    8490:	df000117 	ldw	fp,4(sp)
    8494:	dc000017 	ldw	r16,0(sp)
    8498:	dec00304 	addi	sp,sp,12
    849c:	f800283a 	ret

000084a0 <main>:
int main(void)
/*****************************************************************************/
/* Main Program                                                              */
/*   Enables interrupts then loops infinitely                                */
/*****************************************************************************/
{
    84a0:	defff404 	addi	sp,sp,-48
    84a4:	dfc00b15 	stw	ra,44(sp)
    84a8:	df000a15 	stw	fp,40(sp)
    84ac:	dc000915 	stw	r16,36(sp)
    84b0:	df000a04 	addi	fp,sp,40
	int minDigits[3];
	int maxDigits[3];

    //turns on interrupt mask bits for all 4 buttons
	*(KEYS_ptr + 2) = 0xF;
    84b4:	d0a00217 	ldw	r2,-32760(gp)
    84b8:	10800204 	addi	r2,r2,8
    84bc:	00c003c4 	movi	r3,15
    84c0:	10c00015 	stw	r3,0(r2)

	*(controller_ptr) = convertAngle(minAngle);
    84c4:	d4200017 	ldw	r16,-32768(gp)
    84c8:	d0a00317 	ldw	r2,-32756(gp)
    84cc:	1009883a 	mov	r4,r2
    84d0:	000826c0 	call	826c <convertAngle>
    84d4:	80800015 	stw	r2,0(r16)
	*(controller_ptr + 1) = convertAngle(maxAngle);
    84d8:	d0a00017 	ldw	r2,-32768(gp)
    84dc:	14000104 	addi	r16,r2,4
    84e0:	d0a00417 	ldw	r2,-32752(gp)
    84e4:	1009883a 	mov	r4,r2
    84e8:	000826c0 	call	826c <convertAngle>
    84ec:	80800015 	stw	r2,0(r16)

	//enable PIO interrupts in software
	alt_ic_isr_register(KEYS_IRQ_INTERRUPT_CONTROLLER_ID,KEYS_IRQ,keys_isr,0,0);
    84f0:	d8000015 	stw	zero,0(sp)
    84f4:	000f883a 	mov	r7,zero
    84f8:	01800074 	movhi	r6,1
    84fc:	31a0eb04 	addi	r6,r6,-31828
    8500:	01400044 	movi	r5,1
    8504:	0009883a 	mov	r4,zero
    8508:	0009ae00 	call	9ae0 <alt_ic_isr_register>

    while(1){
    	getDigits(minAngle, minDigits);
    850c:	d0a00317 	ldw	r2,-32756(gp)
    8510:	e0fff904 	addi	r3,fp,-28
    8514:	180b883a 	mov	r5,r3
    8518:	1009883a 	mov	r4,r2
    851c:	00083140 	call	8314 <getDigits>
    	getDigits(maxAngle, maxDigits);
    8520:	d0a00417 	ldw	r2,-32752(gp)
    8524:	e0fffc04 	addi	r3,fp,-16
    8528:	180b883a 	mov	r5,r3
    852c:	1009883a 	mov	r4,r2
    8530:	00083140 	call	8314 <getDigits>

    	for(int i = 0; i < 3; ++i){
    8534:	e03ff715 	stw	zero,-36(fp)
    8538:	00001a06 	br	85a4 <main+0x104>
    		*(HEX_ptr[i + 3]) = hex_const[minDigits[i]];
    853c:	e0bff717 	ldw	r2,-36(fp)
    8540:	10c000c4 	addi	r3,r2,3
    8544:	00800074 	movhi	r2,1
    8548:	10af8d04 	addi	r2,r2,-16844
    854c:	18c7883a 	add	r3,r3,r3
    8550:	18c7883a 	add	r3,r3,r3
    8554:	10c5883a 	add	r2,r2,r3
    8558:	10c00017 	ldw	r3,0(r2)
    855c:	e0bff717 	ldw	r2,-36(fp)
    8560:	1085883a 	add	r2,r2,r2
    8564:	1085883a 	add	r2,r2,r2
    8568:	e13ff704 	addi	r4,fp,-36
    856c:	2085883a 	add	r2,r4,r2
    8570:	10800204 	addi	r2,r2,8
    8574:	11000017 	ldw	r4,0(r2)
    8578:	00800074 	movhi	r2,1
    857c:	10af3c04 	addi	r2,r2,-17168
    8580:	1105883a 	add	r2,r2,r4
    8584:	10800003 	ldbu	r2,0(r2)
    8588:	10803fcc 	andi	r2,r2,255
    858c:	1080201c 	xori	r2,r2,128
    8590:	10bfe004 	addi	r2,r2,-128
    8594:	18800015 	stw	r2,0(r3)

    while(1){
    	getDigits(minAngle, minDigits);
    	getDigits(maxAngle, maxDigits);

    	for(int i = 0; i < 3; ++i){
    8598:	e0bff717 	ldw	r2,-36(fp)
    859c:	10800044 	addi	r2,r2,1
    85a0:	e0bff715 	stw	r2,-36(fp)
    85a4:	e0bff717 	ldw	r2,-36(fp)
    85a8:	108000d0 	cmplti	r2,r2,3
    85ac:	103fe31e 	bne	r2,zero,853c <_gp+0xffff30c4>
    		*(HEX_ptr[i + 3]) = hex_const[minDigits[i]];
    	}

    	for(int i = 0; i < 3; ++i){
    85b0:	e03ff815 	stw	zero,-32(fp)
    85b4:	00001906 	br	861c <main+0x17c>
    		*(HEX_ptr[i]) = hex_const[maxDigits[i]];
    85b8:	00800074 	movhi	r2,1
    85bc:	10af8d04 	addi	r2,r2,-16844
    85c0:	e0fff817 	ldw	r3,-32(fp)
    85c4:	18c7883a 	add	r3,r3,r3
    85c8:	18c7883a 	add	r3,r3,r3
    85cc:	10c5883a 	add	r2,r2,r3
    85d0:	10c00017 	ldw	r3,0(r2)
    85d4:	e0bff817 	ldw	r2,-32(fp)
    85d8:	1085883a 	add	r2,r2,r2
    85dc:	1085883a 	add	r2,r2,r2
    85e0:	e13ff704 	addi	r4,fp,-36
    85e4:	2085883a 	add	r2,r4,r2
    85e8:	10800504 	addi	r2,r2,20
    85ec:	11000017 	ldw	r4,0(r2)
    85f0:	00800074 	movhi	r2,1
    85f4:	10af3c04 	addi	r2,r2,-17168
    85f8:	1105883a 	add	r2,r2,r4
    85fc:	10800003 	ldbu	r2,0(r2)
    8600:	10803fcc 	andi	r2,r2,255
    8604:	1080201c 	xori	r2,r2,128
    8608:	10bfe004 	addi	r2,r2,-128
    860c:	18800015 	stw	r2,0(r3)

    	for(int i = 0; i < 3; ++i){
    		*(HEX_ptr[i + 3]) = hex_const[minDigits[i]];
    	}

    	for(int i = 0; i < 3; ++i){
    8610:	e0bff817 	ldw	r2,-32(fp)
    8614:	10800044 	addi	r2,r2,1
    8618:	e0bff815 	stw	r2,-32(fp)
    861c:	e0bff817 	ldw	r2,-32(fp)
    8620:	108000d0 	cmplti	r2,r2,3
    8624:	103fe41e 	bne	r2,zero,85b8 <_gp+0xffff3140>
    		*(HEX_ptr[i]) = hex_const[maxDigits[i]];
    	}
    }
    8628:	003fb806 	br	850c <_gp+0xffff3094>

0000862c <__divsi3>:
    862c:	20001b16 	blt	r4,zero,869c <__divsi3+0x70>
    8630:	000f883a 	mov	r7,zero
    8634:	28001616 	blt	r5,zero,8690 <__divsi3+0x64>
    8638:	200d883a 	mov	r6,r4
    863c:	29001a2e 	bgeu	r5,r4,86a8 <__divsi3+0x7c>
    8640:	00800804 	movi	r2,32
    8644:	00c00044 	movi	r3,1
    8648:	00000106 	br	8650 <__divsi3+0x24>
    864c:	10000d26 	beq	r2,zero,8684 <__divsi3+0x58>
    8650:	294b883a 	add	r5,r5,r5
    8654:	10bfffc4 	addi	r2,r2,-1
    8658:	18c7883a 	add	r3,r3,r3
    865c:	293ffb36 	bltu	r5,r4,864c <_gp+0xffff31d4>
    8660:	0005883a 	mov	r2,zero
    8664:	18000726 	beq	r3,zero,8684 <__divsi3+0x58>
    8668:	0005883a 	mov	r2,zero
    866c:	31400236 	bltu	r6,r5,8678 <__divsi3+0x4c>
    8670:	314dc83a 	sub	r6,r6,r5
    8674:	10c4b03a 	or	r2,r2,r3
    8678:	1806d07a 	srli	r3,r3,1
    867c:	280ad07a 	srli	r5,r5,1
    8680:	183ffa1e 	bne	r3,zero,866c <_gp+0xffff31f4>
    8684:	38000126 	beq	r7,zero,868c <__divsi3+0x60>
    8688:	0085c83a 	sub	r2,zero,r2
    868c:	f800283a 	ret
    8690:	014bc83a 	sub	r5,zero,r5
    8694:	39c0005c 	xori	r7,r7,1
    8698:	003fe706 	br	8638 <_gp+0xffff31c0>
    869c:	0109c83a 	sub	r4,zero,r4
    86a0:	01c00044 	movi	r7,1
    86a4:	003fe306 	br	8634 <_gp+0xffff31bc>
    86a8:	00c00044 	movi	r3,1
    86ac:	003fee06 	br	8668 <_gp+0xffff31f0>

000086b0 <__modsi3>:
    86b0:	20001716 	blt	r4,zero,8710 <__modsi3+0x60>
    86b4:	000f883a 	mov	r7,zero
    86b8:	2005883a 	mov	r2,r4
    86bc:	28001216 	blt	r5,zero,8708 <__modsi3+0x58>
    86c0:	2900162e 	bgeu	r5,r4,871c <__modsi3+0x6c>
    86c4:	01800804 	movi	r6,32
    86c8:	00c00044 	movi	r3,1
    86cc:	00000106 	br	86d4 <__modsi3+0x24>
    86d0:	30000a26 	beq	r6,zero,86fc <__modsi3+0x4c>
    86d4:	294b883a 	add	r5,r5,r5
    86d8:	31bfffc4 	addi	r6,r6,-1
    86dc:	18c7883a 	add	r3,r3,r3
    86e0:	293ffb36 	bltu	r5,r4,86d0 <_gp+0xffff3258>
    86e4:	18000526 	beq	r3,zero,86fc <__modsi3+0x4c>
    86e8:	1806d07a 	srli	r3,r3,1
    86ec:	11400136 	bltu	r2,r5,86f4 <__modsi3+0x44>
    86f0:	1145c83a 	sub	r2,r2,r5
    86f4:	280ad07a 	srli	r5,r5,1
    86f8:	183ffb1e 	bne	r3,zero,86e8 <_gp+0xffff3270>
    86fc:	38000126 	beq	r7,zero,8704 <__modsi3+0x54>
    8700:	0085c83a 	sub	r2,zero,r2
    8704:	f800283a 	ret
    8708:	014bc83a 	sub	r5,zero,r5
    870c:	003fec06 	br	86c0 <_gp+0xffff3248>
    8710:	0109c83a 	sub	r4,zero,r4
    8714:	01c00044 	movi	r7,1
    8718:	003fe706 	br	86b8 <_gp+0xffff3240>
    871c:	00c00044 	movi	r3,1
    8720:	003ff106 	br	86e8 <_gp+0xffff3270>

00008724 <__udivsi3>:
    8724:	200d883a 	mov	r6,r4
    8728:	2900152e 	bgeu	r5,r4,8780 <__udivsi3+0x5c>
    872c:	28001416 	blt	r5,zero,8780 <__udivsi3+0x5c>
    8730:	00800804 	movi	r2,32
    8734:	00c00044 	movi	r3,1
    8738:	00000206 	br	8744 <__udivsi3+0x20>
    873c:	10000e26 	beq	r2,zero,8778 <__udivsi3+0x54>
    8740:	28000516 	blt	r5,zero,8758 <__udivsi3+0x34>
    8744:	294b883a 	add	r5,r5,r5
    8748:	10bfffc4 	addi	r2,r2,-1
    874c:	18c7883a 	add	r3,r3,r3
    8750:	293ffa36 	bltu	r5,r4,873c <_gp+0xffff32c4>
    8754:	18000826 	beq	r3,zero,8778 <__udivsi3+0x54>
    8758:	0005883a 	mov	r2,zero
    875c:	31400236 	bltu	r6,r5,8768 <__udivsi3+0x44>
    8760:	314dc83a 	sub	r6,r6,r5
    8764:	10c4b03a 	or	r2,r2,r3
    8768:	1806d07a 	srli	r3,r3,1
    876c:	280ad07a 	srli	r5,r5,1
    8770:	183ffa1e 	bne	r3,zero,875c <_gp+0xffff32e4>
    8774:	f800283a 	ret
    8778:	0005883a 	mov	r2,zero
    877c:	f800283a 	ret
    8780:	00c00044 	movi	r3,1
    8784:	003ff406 	br	8758 <_gp+0xffff32e0>

00008788 <__umodsi3>:
    8788:	2005883a 	mov	r2,r4
    878c:	2900122e 	bgeu	r5,r4,87d8 <__umodsi3+0x50>
    8790:	28001116 	blt	r5,zero,87d8 <__umodsi3+0x50>
    8794:	01800804 	movi	r6,32
    8798:	00c00044 	movi	r3,1
    879c:	00000206 	br	87a8 <__umodsi3+0x20>
    87a0:	30000c26 	beq	r6,zero,87d4 <__umodsi3+0x4c>
    87a4:	28000516 	blt	r5,zero,87bc <__umodsi3+0x34>
    87a8:	294b883a 	add	r5,r5,r5
    87ac:	31bfffc4 	addi	r6,r6,-1
    87b0:	18c7883a 	add	r3,r3,r3
    87b4:	293ffa36 	bltu	r5,r4,87a0 <_gp+0xffff3328>
    87b8:	18000626 	beq	r3,zero,87d4 <__umodsi3+0x4c>
    87bc:	1806d07a 	srli	r3,r3,1
    87c0:	11400136 	bltu	r2,r5,87c8 <__umodsi3+0x40>
    87c4:	1145c83a 	sub	r2,r2,r5
    87c8:	280ad07a 	srli	r5,r5,1
    87cc:	183ffb1e 	bne	r3,zero,87bc <_gp+0xffff3344>
    87d0:	f800283a 	ret
    87d4:	f800283a 	ret
    87d8:	00c00044 	movi	r3,1
    87dc:	003ff706 	br	87bc <_gp+0xffff3344>

000087e0 <__adddf3>:
    87e0:	02c00434 	movhi	r11,16
    87e4:	5affffc4 	addi	r11,r11,-1
    87e8:	2806d7fa 	srli	r3,r5,31
    87ec:	2ad4703a 	and	r10,r5,r11
    87f0:	3ad2703a 	and	r9,r7,r11
    87f4:	3804d53a 	srli	r2,r7,20
    87f8:	3018d77a 	srli	r12,r6,29
    87fc:	280ad53a 	srli	r5,r5,20
    8800:	501490fa 	slli	r10,r10,3
    8804:	2010d77a 	srli	r8,r4,29
    8808:	481290fa 	slli	r9,r9,3
    880c:	380ed7fa 	srli	r7,r7,31
    8810:	defffb04 	addi	sp,sp,-20
    8814:	dc800215 	stw	r18,8(sp)
    8818:	dc400115 	stw	r17,4(sp)
    881c:	dc000015 	stw	r16,0(sp)
    8820:	dfc00415 	stw	ra,16(sp)
    8824:	dcc00315 	stw	r19,12(sp)
    8828:	1c803fcc 	andi	r18,r3,255
    882c:	2c01ffcc 	andi	r16,r5,2047
    8830:	5210b03a 	or	r8,r10,r8
    8834:	202290fa 	slli	r17,r4,3
    8838:	1081ffcc 	andi	r2,r2,2047
    883c:	4b12b03a 	or	r9,r9,r12
    8840:	300c90fa 	slli	r6,r6,3
    8844:	91c07526 	beq	r18,r7,8a1c <__adddf3+0x23c>
    8848:	8087c83a 	sub	r3,r16,r2
    884c:	00c0ab0e 	bge	zero,r3,8afc <__adddf3+0x31c>
    8850:	10002a1e 	bne	r2,zero,88fc <__adddf3+0x11c>
    8854:	4984b03a 	or	r2,r9,r6
    8858:	1000961e 	bne	r2,zero,8ab4 <__adddf3+0x2d4>
    885c:	888001cc 	andi	r2,r17,7
    8860:	10000726 	beq	r2,zero,8880 <__adddf3+0xa0>
    8864:	888003cc 	andi	r2,r17,15
    8868:	00c00104 	movi	r3,4
    886c:	10c00426 	beq	r2,r3,8880 <__adddf3+0xa0>
    8870:	88c7883a 	add	r3,r17,r3
    8874:	1c63803a 	cmpltu	r17,r3,r17
    8878:	4451883a 	add	r8,r8,r17
    887c:	1823883a 	mov	r17,r3
    8880:	4080202c 	andhi	r2,r8,128
    8884:	10005926 	beq	r2,zero,89ec <__adddf3+0x20c>
    8888:	84000044 	addi	r16,r16,1
    888c:	0081ffc4 	movi	r2,2047
    8890:	8080ba26 	beq	r16,r2,8b7c <__adddf3+0x39c>
    8894:	00bfe034 	movhi	r2,65408
    8898:	10bfffc4 	addi	r2,r2,-1
    889c:	4090703a 	and	r8,r8,r2
    88a0:	4004977a 	slli	r2,r8,29
    88a4:	4010927a 	slli	r8,r8,9
    88a8:	8822d0fa 	srli	r17,r17,3
    88ac:	8401ffcc 	andi	r16,r16,2047
    88b0:	4010d33a 	srli	r8,r8,12
    88b4:	9007883a 	mov	r3,r18
    88b8:	1444b03a 	or	r2,r2,r17
    88bc:	8401ffcc 	andi	r16,r16,2047
    88c0:	8020953a 	slli	r16,r16,20
    88c4:	18c03fcc 	andi	r3,r3,255
    88c8:	01000434 	movhi	r4,16
    88cc:	213fffc4 	addi	r4,r4,-1
    88d0:	180697fa 	slli	r3,r3,31
    88d4:	4110703a 	and	r8,r8,r4
    88d8:	4410b03a 	or	r8,r8,r16
    88dc:	40c6b03a 	or	r3,r8,r3
    88e0:	dfc00417 	ldw	ra,16(sp)
    88e4:	dcc00317 	ldw	r19,12(sp)
    88e8:	dc800217 	ldw	r18,8(sp)
    88ec:	dc400117 	ldw	r17,4(sp)
    88f0:	dc000017 	ldw	r16,0(sp)
    88f4:	dec00504 	addi	sp,sp,20
    88f8:	f800283a 	ret
    88fc:	0081ffc4 	movi	r2,2047
    8900:	80bfd626 	beq	r16,r2,885c <_gp+0xffff33e4>
    8904:	4a402034 	orhi	r9,r9,128
    8908:	00800e04 	movi	r2,56
    890c:	10c09f16 	blt	r2,r3,8b8c <__adddf3+0x3ac>
    8910:	008007c4 	movi	r2,31
    8914:	10c0c216 	blt	r2,r3,8c20 <__adddf3+0x440>
    8918:	00800804 	movi	r2,32
    891c:	10c5c83a 	sub	r2,r2,r3
    8920:	488a983a 	sll	r5,r9,r2
    8924:	30c8d83a 	srl	r4,r6,r3
    8928:	3084983a 	sll	r2,r6,r2
    892c:	48c6d83a 	srl	r3,r9,r3
    8930:	290cb03a 	or	r6,r5,r4
    8934:	1004c03a 	cmpne	r2,r2,zero
    8938:	308cb03a 	or	r6,r6,r2
    893c:	898dc83a 	sub	r6,r17,r6
    8940:	89a3803a 	cmpltu	r17,r17,r6
    8944:	40d1c83a 	sub	r8,r8,r3
    8948:	4451c83a 	sub	r8,r8,r17
    894c:	3023883a 	mov	r17,r6
    8950:	4080202c 	andhi	r2,r8,128
    8954:	10002326 	beq	r2,zero,89e4 <__adddf3+0x204>
    8958:	04c02034 	movhi	r19,128
    895c:	9cffffc4 	addi	r19,r19,-1
    8960:	44e6703a 	and	r19,r8,r19
    8964:	98007626 	beq	r19,zero,8b40 <__adddf3+0x360>
    8968:	9809883a 	mov	r4,r19
    896c:	0009a540 	call	9a54 <__clzsi2>
    8970:	10fffe04 	addi	r3,r2,-8
    8974:	010007c4 	movi	r4,31
    8978:	20c07716 	blt	r4,r3,8b58 <__adddf3+0x378>
    897c:	00800804 	movi	r2,32
    8980:	10c5c83a 	sub	r2,r2,r3
    8984:	8884d83a 	srl	r2,r17,r2
    8988:	98d0983a 	sll	r8,r19,r3
    898c:	88e2983a 	sll	r17,r17,r3
    8990:	1204b03a 	or	r2,r2,r8
    8994:	1c007416 	blt	r3,r16,8b68 <__adddf3+0x388>
    8998:	1c21c83a 	sub	r16,r3,r16
    899c:	82000044 	addi	r8,r16,1
    89a0:	00c007c4 	movi	r3,31
    89a4:	1a009116 	blt	r3,r8,8bec <__adddf3+0x40c>
    89a8:	00c00804 	movi	r3,32
    89ac:	1a07c83a 	sub	r3,r3,r8
    89b0:	8a08d83a 	srl	r4,r17,r8
    89b4:	88e2983a 	sll	r17,r17,r3
    89b8:	10c6983a 	sll	r3,r2,r3
    89bc:	1210d83a 	srl	r8,r2,r8
    89c0:	8804c03a 	cmpne	r2,r17,zero
    89c4:	1906b03a 	or	r3,r3,r4
    89c8:	18a2b03a 	or	r17,r3,r2
    89cc:	0021883a 	mov	r16,zero
    89d0:	003fa206 	br	885c <_gp+0xffff33e4>
    89d4:	1890b03a 	or	r8,r3,r2
    89d8:	40017d26 	beq	r8,zero,8fd0 <__adddf3+0x7f0>
    89dc:	1011883a 	mov	r8,r2
    89e0:	1823883a 	mov	r17,r3
    89e4:	888001cc 	andi	r2,r17,7
    89e8:	103f9e1e 	bne	r2,zero,8864 <_gp+0xffff33ec>
    89ec:	4004977a 	slli	r2,r8,29
    89f0:	8822d0fa 	srli	r17,r17,3
    89f4:	4010d0fa 	srli	r8,r8,3
    89f8:	9007883a 	mov	r3,r18
    89fc:	1444b03a 	or	r2,r2,r17
    8a00:	0101ffc4 	movi	r4,2047
    8a04:	81002426 	beq	r16,r4,8a98 <__adddf3+0x2b8>
    8a08:	8120703a 	and	r16,r16,r4
    8a0c:	01000434 	movhi	r4,16
    8a10:	213fffc4 	addi	r4,r4,-1
    8a14:	4110703a 	and	r8,r8,r4
    8a18:	003fa806 	br	88bc <_gp+0xffff3444>
    8a1c:	8089c83a 	sub	r4,r16,r2
    8a20:	01005e0e 	bge	zero,r4,8b9c <__adddf3+0x3bc>
    8a24:	10002b26 	beq	r2,zero,8ad4 <__adddf3+0x2f4>
    8a28:	0081ffc4 	movi	r2,2047
    8a2c:	80bf8b26 	beq	r16,r2,885c <_gp+0xffff33e4>
    8a30:	4a402034 	orhi	r9,r9,128
    8a34:	00800e04 	movi	r2,56
    8a38:	1100a40e 	bge	r2,r4,8ccc <__adddf3+0x4ec>
    8a3c:	498cb03a 	or	r6,r9,r6
    8a40:	300ac03a 	cmpne	r5,r6,zero
    8a44:	0013883a 	mov	r9,zero
    8a48:	2c4b883a 	add	r5,r5,r17
    8a4c:	2c63803a 	cmpltu	r17,r5,r17
    8a50:	4a11883a 	add	r8,r9,r8
    8a54:	8a11883a 	add	r8,r17,r8
    8a58:	2823883a 	mov	r17,r5
    8a5c:	4080202c 	andhi	r2,r8,128
    8a60:	103fe026 	beq	r2,zero,89e4 <_gp+0xffff356c>
    8a64:	84000044 	addi	r16,r16,1
    8a68:	0081ffc4 	movi	r2,2047
    8a6c:	8080d226 	beq	r16,r2,8db8 <__adddf3+0x5d8>
    8a70:	00bfe034 	movhi	r2,65408
    8a74:	10bfffc4 	addi	r2,r2,-1
    8a78:	4090703a 	and	r8,r8,r2
    8a7c:	880ad07a 	srli	r5,r17,1
    8a80:	400897fa 	slli	r4,r8,31
    8a84:	88c0004c 	andi	r3,r17,1
    8a88:	28e2b03a 	or	r17,r5,r3
    8a8c:	4010d07a 	srli	r8,r8,1
    8a90:	2462b03a 	or	r17,r4,r17
    8a94:	003f7106 	br	885c <_gp+0xffff33e4>
    8a98:	4088b03a 	or	r4,r8,r2
    8a9c:	20014526 	beq	r4,zero,8fb4 <__adddf3+0x7d4>
    8aa0:	01000434 	movhi	r4,16
    8aa4:	42000234 	orhi	r8,r8,8
    8aa8:	213fffc4 	addi	r4,r4,-1
    8aac:	4110703a 	and	r8,r8,r4
    8ab0:	003f8206 	br	88bc <_gp+0xffff3444>
    8ab4:	18ffffc4 	addi	r3,r3,-1
    8ab8:	1800491e 	bne	r3,zero,8be0 <__adddf3+0x400>
    8abc:	898bc83a 	sub	r5,r17,r6
    8ac0:	8963803a 	cmpltu	r17,r17,r5
    8ac4:	4251c83a 	sub	r8,r8,r9
    8ac8:	4451c83a 	sub	r8,r8,r17
    8acc:	2823883a 	mov	r17,r5
    8ad0:	003f9f06 	br	8950 <_gp+0xffff34d8>
    8ad4:	4984b03a 	or	r2,r9,r6
    8ad8:	103f6026 	beq	r2,zero,885c <_gp+0xffff33e4>
    8adc:	213fffc4 	addi	r4,r4,-1
    8ae0:	2000931e 	bne	r4,zero,8d30 <__adddf3+0x550>
    8ae4:	898d883a 	add	r6,r17,r6
    8ae8:	3463803a 	cmpltu	r17,r6,r17
    8aec:	4251883a 	add	r8,r8,r9
    8af0:	8a11883a 	add	r8,r17,r8
    8af4:	3023883a 	mov	r17,r6
    8af8:	003fd806 	br	8a5c <_gp+0xffff35e4>
    8afc:	1800541e 	bne	r3,zero,8c50 <__adddf3+0x470>
    8b00:	80800044 	addi	r2,r16,1
    8b04:	1081ffcc 	andi	r2,r2,2047
    8b08:	00c00044 	movi	r3,1
    8b0c:	1880a00e 	bge	r3,r2,8d90 <__adddf3+0x5b0>
    8b10:	8989c83a 	sub	r4,r17,r6
    8b14:	8905803a 	cmpltu	r2,r17,r4
    8b18:	4267c83a 	sub	r19,r8,r9
    8b1c:	98a7c83a 	sub	r19,r19,r2
    8b20:	9880202c 	andhi	r2,r19,128
    8b24:	10006326 	beq	r2,zero,8cb4 <__adddf3+0x4d4>
    8b28:	3463c83a 	sub	r17,r6,r17
    8b2c:	4a07c83a 	sub	r3,r9,r8
    8b30:	344d803a 	cmpltu	r6,r6,r17
    8b34:	19a7c83a 	sub	r19,r3,r6
    8b38:	3825883a 	mov	r18,r7
    8b3c:	983f8a1e 	bne	r19,zero,8968 <_gp+0xffff34f0>
    8b40:	8809883a 	mov	r4,r17
    8b44:	0009a540 	call	9a54 <__clzsi2>
    8b48:	10800804 	addi	r2,r2,32
    8b4c:	10fffe04 	addi	r3,r2,-8
    8b50:	010007c4 	movi	r4,31
    8b54:	20ff890e 	bge	r4,r3,897c <_gp+0xffff3504>
    8b58:	10bff604 	addi	r2,r2,-40
    8b5c:	8884983a 	sll	r2,r17,r2
    8b60:	0023883a 	mov	r17,zero
    8b64:	1c3f8c0e 	bge	r3,r16,8998 <_gp+0xffff3520>
    8b68:	023fe034 	movhi	r8,65408
    8b6c:	423fffc4 	addi	r8,r8,-1
    8b70:	80e1c83a 	sub	r16,r16,r3
    8b74:	1210703a 	and	r8,r2,r8
    8b78:	003f3806 	br	885c <_gp+0xffff33e4>
    8b7c:	9007883a 	mov	r3,r18
    8b80:	0011883a 	mov	r8,zero
    8b84:	0005883a 	mov	r2,zero
    8b88:	003f4c06 	br	88bc <_gp+0xffff3444>
    8b8c:	498cb03a 	or	r6,r9,r6
    8b90:	300cc03a 	cmpne	r6,r6,zero
    8b94:	0007883a 	mov	r3,zero
    8b98:	003f6806 	br	893c <_gp+0xffff34c4>
    8b9c:	20009c1e 	bne	r4,zero,8e10 <__adddf3+0x630>
    8ba0:	80800044 	addi	r2,r16,1
    8ba4:	1141ffcc 	andi	r5,r2,2047
    8ba8:	01000044 	movi	r4,1
    8bac:	2140670e 	bge	r4,r5,8d4c <__adddf3+0x56c>
    8bb0:	0101ffc4 	movi	r4,2047
    8bb4:	11007f26 	beq	r2,r4,8db4 <__adddf3+0x5d4>
    8bb8:	898d883a 	add	r6,r17,r6
    8bbc:	4247883a 	add	r3,r8,r9
    8bc0:	3451803a 	cmpltu	r8,r6,r17
    8bc4:	40d1883a 	add	r8,r8,r3
    8bc8:	402297fa 	slli	r17,r8,31
    8bcc:	300cd07a 	srli	r6,r6,1
    8bd0:	4010d07a 	srli	r8,r8,1
    8bd4:	1021883a 	mov	r16,r2
    8bd8:	89a2b03a 	or	r17,r17,r6
    8bdc:	003f1f06 	br	885c <_gp+0xffff33e4>
    8be0:	0081ffc4 	movi	r2,2047
    8be4:	80bf481e 	bne	r16,r2,8908 <_gp+0xffff3490>
    8be8:	003f1c06 	br	885c <_gp+0xffff33e4>
    8bec:	843ff844 	addi	r16,r16,-31
    8bf0:	01000804 	movi	r4,32
    8bf4:	1406d83a 	srl	r3,r2,r16
    8bf8:	41005026 	beq	r8,r4,8d3c <__adddf3+0x55c>
    8bfc:	01001004 	movi	r4,64
    8c00:	2211c83a 	sub	r8,r4,r8
    8c04:	1204983a 	sll	r2,r2,r8
    8c08:	88a2b03a 	or	r17,r17,r2
    8c0c:	8822c03a 	cmpne	r17,r17,zero
    8c10:	1c62b03a 	or	r17,r3,r17
    8c14:	0011883a 	mov	r8,zero
    8c18:	0021883a 	mov	r16,zero
    8c1c:	003f7106 	br	89e4 <_gp+0xffff356c>
    8c20:	193ff804 	addi	r4,r3,-32
    8c24:	00800804 	movi	r2,32
    8c28:	4908d83a 	srl	r4,r9,r4
    8c2c:	18804526 	beq	r3,r2,8d44 <__adddf3+0x564>
    8c30:	00801004 	movi	r2,64
    8c34:	10c5c83a 	sub	r2,r2,r3
    8c38:	4886983a 	sll	r3,r9,r2
    8c3c:	198cb03a 	or	r6,r3,r6
    8c40:	300cc03a 	cmpne	r6,r6,zero
    8c44:	218cb03a 	or	r6,r4,r6
    8c48:	0007883a 	mov	r3,zero
    8c4c:	003f3b06 	br	893c <_gp+0xffff34c4>
    8c50:	80002a26 	beq	r16,zero,8cfc <__adddf3+0x51c>
    8c54:	0101ffc4 	movi	r4,2047
    8c58:	11006826 	beq	r2,r4,8dfc <__adddf3+0x61c>
    8c5c:	00c7c83a 	sub	r3,zero,r3
    8c60:	42002034 	orhi	r8,r8,128
    8c64:	01000e04 	movi	r4,56
    8c68:	20c07c16 	blt	r4,r3,8e5c <__adddf3+0x67c>
    8c6c:	010007c4 	movi	r4,31
    8c70:	20c0da16 	blt	r4,r3,8fdc <__adddf3+0x7fc>
    8c74:	01000804 	movi	r4,32
    8c78:	20c9c83a 	sub	r4,r4,r3
    8c7c:	4114983a 	sll	r10,r8,r4
    8c80:	88cad83a 	srl	r5,r17,r3
    8c84:	8908983a 	sll	r4,r17,r4
    8c88:	40c6d83a 	srl	r3,r8,r3
    8c8c:	5162b03a 	or	r17,r10,r5
    8c90:	2008c03a 	cmpne	r4,r4,zero
    8c94:	8922b03a 	or	r17,r17,r4
    8c98:	3463c83a 	sub	r17,r6,r17
    8c9c:	48c7c83a 	sub	r3,r9,r3
    8ca0:	344d803a 	cmpltu	r6,r6,r17
    8ca4:	1991c83a 	sub	r8,r3,r6
    8ca8:	1021883a 	mov	r16,r2
    8cac:	3825883a 	mov	r18,r7
    8cb0:	003f2706 	br	8950 <_gp+0xffff34d8>
    8cb4:	24d0b03a 	or	r8,r4,r19
    8cb8:	40001b1e 	bne	r8,zero,8d28 <__adddf3+0x548>
    8cbc:	0005883a 	mov	r2,zero
    8cc0:	0007883a 	mov	r3,zero
    8cc4:	0021883a 	mov	r16,zero
    8cc8:	003f4d06 	br	8a00 <_gp+0xffff3588>
    8ccc:	008007c4 	movi	r2,31
    8cd0:	11003c16 	blt	r2,r4,8dc4 <__adddf3+0x5e4>
    8cd4:	00800804 	movi	r2,32
    8cd8:	1105c83a 	sub	r2,r2,r4
    8cdc:	488e983a 	sll	r7,r9,r2
    8ce0:	310ad83a 	srl	r5,r6,r4
    8ce4:	3084983a 	sll	r2,r6,r2
    8ce8:	4912d83a 	srl	r9,r9,r4
    8cec:	394ab03a 	or	r5,r7,r5
    8cf0:	1004c03a 	cmpne	r2,r2,zero
    8cf4:	288ab03a 	or	r5,r5,r2
    8cf8:	003f5306 	br	8a48 <_gp+0xffff35d0>
    8cfc:	4448b03a 	or	r4,r8,r17
    8d00:	20003e26 	beq	r4,zero,8dfc <__adddf3+0x61c>
    8d04:	00c6303a 	nor	r3,zero,r3
    8d08:	18003a1e 	bne	r3,zero,8df4 <__adddf3+0x614>
    8d0c:	3463c83a 	sub	r17,r6,r17
    8d10:	4a07c83a 	sub	r3,r9,r8
    8d14:	344d803a 	cmpltu	r6,r6,r17
    8d18:	1991c83a 	sub	r8,r3,r6
    8d1c:	1021883a 	mov	r16,r2
    8d20:	3825883a 	mov	r18,r7
    8d24:	003f0a06 	br	8950 <_gp+0xffff34d8>
    8d28:	2023883a 	mov	r17,r4
    8d2c:	003f0d06 	br	8964 <_gp+0xffff34ec>
    8d30:	0081ffc4 	movi	r2,2047
    8d34:	80bf3f1e 	bne	r16,r2,8a34 <_gp+0xffff35bc>
    8d38:	003ec806 	br	885c <_gp+0xffff33e4>
    8d3c:	0005883a 	mov	r2,zero
    8d40:	003fb106 	br	8c08 <_gp+0xffff3790>
    8d44:	0007883a 	mov	r3,zero
    8d48:	003fbc06 	br	8c3c <_gp+0xffff37c4>
    8d4c:	4444b03a 	or	r2,r8,r17
    8d50:	8000871e 	bne	r16,zero,8f70 <__adddf3+0x790>
    8d54:	1000ba26 	beq	r2,zero,9040 <__adddf3+0x860>
    8d58:	4984b03a 	or	r2,r9,r6
    8d5c:	103ebf26 	beq	r2,zero,885c <_gp+0xffff33e4>
    8d60:	8985883a 	add	r2,r17,r6
    8d64:	4247883a 	add	r3,r8,r9
    8d68:	1451803a 	cmpltu	r8,r2,r17
    8d6c:	40d1883a 	add	r8,r8,r3
    8d70:	40c0202c 	andhi	r3,r8,128
    8d74:	1023883a 	mov	r17,r2
    8d78:	183f1a26 	beq	r3,zero,89e4 <_gp+0xffff356c>
    8d7c:	00bfe034 	movhi	r2,65408
    8d80:	10bfffc4 	addi	r2,r2,-1
    8d84:	2021883a 	mov	r16,r4
    8d88:	4090703a 	and	r8,r8,r2
    8d8c:	003eb306 	br	885c <_gp+0xffff33e4>
    8d90:	4444b03a 	or	r2,r8,r17
    8d94:	8000291e 	bne	r16,zero,8e3c <__adddf3+0x65c>
    8d98:	10004b1e 	bne	r2,zero,8ec8 <__adddf3+0x6e8>
    8d9c:	4990b03a 	or	r8,r9,r6
    8da0:	40008b26 	beq	r8,zero,8fd0 <__adddf3+0x7f0>
    8da4:	4811883a 	mov	r8,r9
    8da8:	3023883a 	mov	r17,r6
    8dac:	3825883a 	mov	r18,r7
    8db0:	003eaa06 	br	885c <_gp+0xffff33e4>
    8db4:	1021883a 	mov	r16,r2
    8db8:	0011883a 	mov	r8,zero
    8dbc:	0005883a 	mov	r2,zero
    8dc0:	003f0f06 	br	8a00 <_gp+0xffff3588>
    8dc4:	217ff804 	addi	r5,r4,-32
    8dc8:	00800804 	movi	r2,32
    8dcc:	494ad83a 	srl	r5,r9,r5
    8dd0:	20807d26 	beq	r4,r2,8fc8 <__adddf3+0x7e8>
    8dd4:	00801004 	movi	r2,64
    8dd8:	1109c83a 	sub	r4,r2,r4
    8ddc:	4912983a 	sll	r9,r9,r4
    8de0:	498cb03a 	or	r6,r9,r6
    8de4:	300cc03a 	cmpne	r6,r6,zero
    8de8:	298ab03a 	or	r5,r5,r6
    8dec:	0013883a 	mov	r9,zero
    8df0:	003f1506 	br	8a48 <_gp+0xffff35d0>
    8df4:	0101ffc4 	movi	r4,2047
    8df8:	113f9a1e 	bne	r2,r4,8c64 <_gp+0xffff37ec>
    8dfc:	4811883a 	mov	r8,r9
    8e00:	3023883a 	mov	r17,r6
    8e04:	1021883a 	mov	r16,r2
    8e08:	3825883a 	mov	r18,r7
    8e0c:	003e9306 	br	885c <_gp+0xffff33e4>
    8e10:	8000161e 	bne	r16,zero,8e6c <__adddf3+0x68c>
    8e14:	444ab03a 	or	r5,r8,r17
    8e18:	28005126 	beq	r5,zero,8f60 <__adddf3+0x780>
    8e1c:	0108303a 	nor	r4,zero,r4
    8e20:	20004d1e 	bne	r4,zero,8f58 <__adddf3+0x778>
    8e24:	89a3883a 	add	r17,r17,r6
    8e28:	4253883a 	add	r9,r8,r9
    8e2c:	898d803a 	cmpltu	r6,r17,r6
    8e30:	3251883a 	add	r8,r6,r9
    8e34:	1021883a 	mov	r16,r2
    8e38:	003f0806 	br	8a5c <_gp+0xffff35e4>
    8e3c:	1000301e 	bne	r2,zero,8f00 <__adddf3+0x720>
    8e40:	4984b03a 	or	r2,r9,r6
    8e44:	10007126 	beq	r2,zero,900c <__adddf3+0x82c>
    8e48:	4811883a 	mov	r8,r9
    8e4c:	3023883a 	mov	r17,r6
    8e50:	3825883a 	mov	r18,r7
    8e54:	0401ffc4 	movi	r16,2047
    8e58:	003e8006 	br	885c <_gp+0xffff33e4>
    8e5c:	4462b03a 	or	r17,r8,r17
    8e60:	8822c03a 	cmpne	r17,r17,zero
    8e64:	0007883a 	mov	r3,zero
    8e68:	003f8b06 	br	8c98 <_gp+0xffff3820>
    8e6c:	0141ffc4 	movi	r5,2047
    8e70:	11403b26 	beq	r2,r5,8f60 <__adddf3+0x780>
    8e74:	0109c83a 	sub	r4,zero,r4
    8e78:	42002034 	orhi	r8,r8,128
    8e7c:	01400e04 	movi	r5,56
    8e80:	29006716 	blt	r5,r4,9020 <__adddf3+0x840>
    8e84:	014007c4 	movi	r5,31
    8e88:	29007016 	blt	r5,r4,904c <__adddf3+0x86c>
    8e8c:	01400804 	movi	r5,32
    8e90:	290bc83a 	sub	r5,r5,r4
    8e94:	4154983a 	sll	r10,r8,r5
    8e98:	890ed83a 	srl	r7,r17,r4
    8e9c:	894a983a 	sll	r5,r17,r5
    8ea0:	4108d83a 	srl	r4,r8,r4
    8ea4:	51e2b03a 	or	r17,r10,r7
    8ea8:	280ac03a 	cmpne	r5,r5,zero
    8eac:	8962b03a 	or	r17,r17,r5
    8eb0:	89a3883a 	add	r17,r17,r6
    8eb4:	2253883a 	add	r9,r4,r9
    8eb8:	898d803a 	cmpltu	r6,r17,r6
    8ebc:	3251883a 	add	r8,r6,r9
    8ec0:	1021883a 	mov	r16,r2
    8ec4:	003ee506 	br	8a5c <_gp+0xffff35e4>
    8ec8:	4984b03a 	or	r2,r9,r6
    8ecc:	103e6326 	beq	r2,zero,885c <_gp+0xffff33e4>
    8ed0:	8987c83a 	sub	r3,r17,r6
    8ed4:	88c9803a 	cmpltu	r4,r17,r3
    8ed8:	4245c83a 	sub	r2,r8,r9
    8edc:	1105c83a 	sub	r2,r2,r4
    8ee0:	1100202c 	andhi	r4,r2,128
    8ee4:	203ebb26 	beq	r4,zero,89d4 <_gp+0xffff355c>
    8ee8:	3463c83a 	sub	r17,r6,r17
    8eec:	4a07c83a 	sub	r3,r9,r8
    8ef0:	344d803a 	cmpltu	r6,r6,r17
    8ef4:	1991c83a 	sub	r8,r3,r6
    8ef8:	3825883a 	mov	r18,r7
    8efc:	003e5706 	br	885c <_gp+0xffff33e4>
    8f00:	4984b03a 	or	r2,r9,r6
    8f04:	10002e26 	beq	r2,zero,8fc0 <__adddf3+0x7e0>
    8f08:	4004d0fa 	srli	r2,r8,3
    8f0c:	8822d0fa 	srli	r17,r17,3
    8f10:	4010977a 	slli	r8,r8,29
    8f14:	10c0022c 	andhi	r3,r2,8
    8f18:	4462b03a 	or	r17,r8,r17
    8f1c:	18000826 	beq	r3,zero,8f40 <__adddf3+0x760>
    8f20:	4808d0fa 	srli	r4,r9,3
    8f24:	20c0022c 	andhi	r3,r4,8
    8f28:	1800051e 	bne	r3,zero,8f40 <__adddf3+0x760>
    8f2c:	300cd0fa 	srli	r6,r6,3
    8f30:	4806977a 	slli	r3,r9,29
    8f34:	2005883a 	mov	r2,r4
    8f38:	3825883a 	mov	r18,r7
    8f3c:	19a2b03a 	or	r17,r3,r6
    8f40:	8810d77a 	srli	r8,r17,29
    8f44:	100490fa 	slli	r2,r2,3
    8f48:	882290fa 	slli	r17,r17,3
    8f4c:	0401ffc4 	movi	r16,2047
    8f50:	4090b03a 	or	r8,r8,r2
    8f54:	003e4106 	br	885c <_gp+0xffff33e4>
    8f58:	0141ffc4 	movi	r5,2047
    8f5c:	117fc71e 	bne	r2,r5,8e7c <_gp+0xffff3a04>
    8f60:	4811883a 	mov	r8,r9
    8f64:	3023883a 	mov	r17,r6
    8f68:	1021883a 	mov	r16,r2
    8f6c:	003e3b06 	br	885c <_gp+0xffff33e4>
    8f70:	10002f26 	beq	r2,zero,9030 <__adddf3+0x850>
    8f74:	4984b03a 	or	r2,r9,r6
    8f78:	10001126 	beq	r2,zero,8fc0 <__adddf3+0x7e0>
    8f7c:	4004d0fa 	srli	r2,r8,3
    8f80:	8822d0fa 	srli	r17,r17,3
    8f84:	4010977a 	slli	r8,r8,29
    8f88:	10c0022c 	andhi	r3,r2,8
    8f8c:	4462b03a 	or	r17,r8,r17
    8f90:	183feb26 	beq	r3,zero,8f40 <_gp+0xffff3ac8>
    8f94:	4808d0fa 	srli	r4,r9,3
    8f98:	20c0022c 	andhi	r3,r4,8
    8f9c:	183fe81e 	bne	r3,zero,8f40 <_gp+0xffff3ac8>
    8fa0:	300cd0fa 	srli	r6,r6,3
    8fa4:	4806977a 	slli	r3,r9,29
    8fa8:	2005883a 	mov	r2,r4
    8fac:	19a2b03a 	or	r17,r3,r6
    8fb0:	003fe306 	br	8f40 <_gp+0xffff3ac8>
    8fb4:	0011883a 	mov	r8,zero
    8fb8:	0005883a 	mov	r2,zero
    8fbc:	003e3f06 	br	88bc <_gp+0xffff3444>
    8fc0:	0401ffc4 	movi	r16,2047
    8fc4:	003e2506 	br	885c <_gp+0xffff33e4>
    8fc8:	0013883a 	mov	r9,zero
    8fcc:	003f8406 	br	8de0 <_gp+0xffff3968>
    8fd0:	0005883a 	mov	r2,zero
    8fd4:	0007883a 	mov	r3,zero
    8fd8:	003e8906 	br	8a00 <_gp+0xffff3588>
    8fdc:	197ff804 	addi	r5,r3,-32
    8fe0:	01000804 	movi	r4,32
    8fe4:	414ad83a 	srl	r5,r8,r5
    8fe8:	19002426 	beq	r3,r4,907c <__adddf3+0x89c>
    8fec:	01001004 	movi	r4,64
    8ff0:	20c7c83a 	sub	r3,r4,r3
    8ff4:	40c6983a 	sll	r3,r8,r3
    8ff8:	1c46b03a 	or	r3,r3,r17
    8ffc:	1806c03a 	cmpne	r3,r3,zero
    9000:	28e2b03a 	or	r17,r5,r3
    9004:	0007883a 	mov	r3,zero
    9008:	003f2306 	br	8c98 <_gp+0xffff3820>
    900c:	0007883a 	mov	r3,zero
    9010:	5811883a 	mov	r8,r11
    9014:	00bfffc4 	movi	r2,-1
    9018:	0401ffc4 	movi	r16,2047
    901c:	003e7806 	br	8a00 <_gp+0xffff3588>
    9020:	4462b03a 	or	r17,r8,r17
    9024:	8822c03a 	cmpne	r17,r17,zero
    9028:	0009883a 	mov	r4,zero
    902c:	003fa006 	br	8eb0 <_gp+0xffff3a38>
    9030:	4811883a 	mov	r8,r9
    9034:	3023883a 	mov	r17,r6
    9038:	0401ffc4 	movi	r16,2047
    903c:	003e0706 	br	885c <_gp+0xffff33e4>
    9040:	4811883a 	mov	r8,r9
    9044:	3023883a 	mov	r17,r6
    9048:	003e0406 	br	885c <_gp+0xffff33e4>
    904c:	21fff804 	addi	r7,r4,-32
    9050:	01400804 	movi	r5,32
    9054:	41ced83a 	srl	r7,r8,r7
    9058:	21400a26 	beq	r4,r5,9084 <__adddf3+0x8a4>
    905c:	01401004 	movi	r5,64
    9060:	2909c83a 	sub	r4,r5,r4
    9064:	4108983a 	sll	r4,r8,r4
    9068:	2448b03a 	or	r4,r4,r17
    906c:	2008c03a 	cmpne	r4,r4,zero
    9070:	3922b03a 	or	r17,r7,r4
    9074:	0009883a 	mov	r4,zero
    9078:	003f8d06 	br	8eb0 <_gp+0xffff3a38>
    907c:	0007883a 	mov	r3,zero
    9080:	003fdd06 	br	8ff8 <_gp+0xffff3b80>
    9084:	0009883a 	mov	r4,zero
    9088:	003ff706 	br	9068 <_gp+0xffff3bf0>

0000908c <__muldf3>:
    908c:	deffee04 	addi	sp,sp,-72
    9090:	dd000c15 	stw	r20,48(sp)
    9094:	2828d53a 	srli	r20,r5,20
    9098:	ddc00f15 	stw	r23,60(sp)
    909c:	282ed7fa 	srli	r23,r5,31
    90a0:	dc000815 	stw	r16,32(sp)
    90a4:	04000434 	movhi	r16,16
    90a8:	dcc00b15 	stw	r19,44(sp)
    90ac:	843fffc4 	addi	r16,r16,-1
    90b0:	dfc01115 	stw	ra,68(sp)
    90b4:	df001015 	stw	fp,64(sp)
    90b8:	dd800e15 	stw	r22,56(sp)
    90bc:	dd400d15 	stw	r21,52(sp)
    90c0:	dc800a15 	stw	r18,40(sp)
    90c4:	dc400915 	stw	r17,36(sp)
    90c8:	a501ffcc 	andi	r20,r20,2047
    90cc:	2c20703a 	and	r16,r5,r16
    90d0:	b827883a 	mov	r19,r23
    90d4:	ba403fcc 	andi	r9,r23,255
    90d8:	a0006026 	beq	r20,zero,925c <__muldf3+0x1d0>
    90dc:	0081ffc4 	movi	r2,2047
    90e0:	202d883a 	mov	r22,r4
    90e4:	a0803626 	beq	r20,r2,91c0 <__muldf3+0x134>
    90e8:	84000434 	orhi	r16,r16,16
    90ec:	200ad77a 	srli	r5,r4,29
    90f0:	800490fa 	slli	r2,r16,3
    90f4:	202c90fa 	slli	r22,r4,3
    90f8:	a53f0044 	addi	r20,r20,-1023
    90fc:	28a0b03a 	or	r16,r5,r2
    9100:	002b883a 	mov	r21,zero
    9104:	000b883a 	mov	r5,zero
    9108:	3804d53a 	srli	r2,r7,20
    910c:	3838d7fa 	srli	fp,r7,31
    9110:	04400434 	movhi	r17,16
    9114:	8c7fffc4 	addi	r17,r17,-1
    9118:	1081ffcc 	andi	r2,r2,2047
    911c:	3025883a 	mov	r18,r6
    9120:	3c62703a 	and	r17,r7,r17
    9124:	e2803fcc 	andi	r10,fp,255
    9128:	10006d26 	beq	r2,zero,92e0 <__muldf3+0x254>
    912c:	00c1ffc4 	movi	r3,2047
    9130:	10c06526 	beq	r2,r3,92c8 <__muldf3+0x23c>
    9134:	8c400434 	orhi	r17,r17,16
    9138:	300ed77a 	srli	r7,r6,29
    913c:	880690fa 	slli	r3,r17,3
    9140:	302490fa 	slli	r18,r6,3
    9144:	10bf0044 	addi	r2,r2,-1023
    9148:	38e2b03a 	or	r17,r7,r3
    914c:	000f883a 	mov	r7,zero
    9150:	a087883a 	add	r3,r20,r2
    9154:	010003c4 	movi	r4,15
    9158:	3d44b03a 	or	r2,r7,r21
    915c:	e5ccf03a 	xor	r6,fp,r23
    9160:	1a000044 	addi	r8,r3,1
    9164:	20809b36 	bltu	r4,r2,93d4 <__muldf3+0x348>
    9168:	100490ba 	slli	r2,r2,2
    916c:	01000074 	movhi	r4,1
    9170:	21246004 	addi	r4,r4,-28288
    9174:	1105883a 	add	r2,r2,r4
    9178:	10800017 	ldw	r2,0(r2)
    917c:	1000683a 	jmp	r2
    9180:	000093d4 	movui	zero,591
    9184:	000091e0 	cmpeqi	zero,zero,583
    9188:	000091e0 	cmpeqi	zero,zero,583
    918c:	000091dc 	xori	zero,zero,583
    9190:	000093b0 	cmpltui	zero,zero,590
    9194:	000093b0 	cmpltui	zero,zero,590
    9198:	00009398 	cmpnei	zero,zero,590
    919c:	000091dc 	xori	zero,zero,583
    91a0:	000093b0 	cmpltui	zero,zero,590
    91a4:	00009398 	cmpnei	zero,zero,590
    91a8:	000093b0 	cmpltui	zero,zero,590
    91ac:	000091dc 	xori	zero,zero,583
    91b0:	000093c0 	call	93c <__alt_mem_onchip_memory2_0-0x76c4>
    91b4:	000093c0 	call	93c <__alt_mem_onchip_memory2_0-0x76c4>
    91b8:	000093c0 	call	93c <__alt_mem_onchip_memory2_0-0x76c4>
    91bc:	00009720 	cmpeqi	zero,zero,604
    91c0:	2404b03a 	or	r2,r4,r16
    91c4:	1000711e 	bne	r2,zero,938c <__muldf3+0x300>
    91c8:	05400204 	movi	r21,8
    91cc:	0021883a 	mov	r16,zero
    91d0:	002d883a 	mov	r22,zero
    91d4:	01400084 	movi	r5,2
    91d8:	003fcb06 	br	9108 <_gp+0xffff3c90>
    91dc:	500d883a 	mov	r6,r10
    91e0:	00800084 	movi	r2,2
    91e4:	38805926 	beq	r7,r2,934c <__muldf3+0x2c0>
    91e8:	008000c4 	movi	r2,3
    91ec:	3881bb26 	beq	r7,r2,98dc <__muldf3+0x850>
    91f0:	00800044 	movi	r2,1
    91f4:	3881961e 	bne	r7,r2,9850 <__muldf3+0x7c4>
    91f8:	3027883a 	mov	r19,r6
    91fc:	0005883a 	mov	r2,zero
    9200:	0021883a 	mov	r16,zero
    9204:	002d883a 	mov	r22,zero
    9208:	1004953a 	slli	r2,r2,20
    920c:	98c03fcc 	andi	r3,r19,255
    9210:	04400434 	movhi	r17,16
    9214:	8c7fffc4 	addi	r17,r17,-1
    9218:	180697fa 	slli	r3,r3,31
    921c:	8460703a 	and	r16,r16,r17
    9220:	80a0b03a 	or	r16,r16,r2
    9224:	80c6b03a 	or	r3,r16,r3
    9228:	b005883a 	mov	r2,r22
    922c:	dfc01117 	ldw	ra,68(sp)
    9230:	df001017 	ldw	fp,64(sp)
    9234:	ddc00f17 	ldw	r23,60(sp)
    9238:	dd800e17 	ldw	r22,56(sp)
    923c:	dd400d17 	ldw	r21,52(sp)
    9240:	dd000c17 	ldw	r20,48(sp)
    9244:	dcc00b17 	ldw	r19,44(sp)
    9248:	dc800a17 	ldw	r18,40(sp)
    924c:	dc400917 	ldw	r17,36(sp)
    9250:	dc000817 	ldw	r16,32(sp)
    9254:	dec01204 	addi	sp,sp,72
    9258:	f800283a 	ret
    925c:	2404b03a 	or	r2,r4,r16
    9260:	202b883a 	mov	r21,r4
    9264:	10004426 	beq	r2,zero,9378 <__muldf3+0x2ec>
    9268:	80015126 	beq	r16,zero,97b0 <__muldf3+0x724>
    926c:	8009883a 	mov	r4,r16
    9270:	d9800715 	stw	r6,28(sp)
    9274:	d9c00215 	stw	r7,8(sp)
    9278:	da400415 	stw	r9,16(sp)
    927c:	0009a540 	call	9a54 <__clzsi2>
    9280:	d9800717 	ldw	r6,28(sp)
    9284:	d9c00217 	ldw	r7,8(sp)
    9288:	da400417 	ldw	r9,16(sp)
    928c:	113ffd44 	addi	r4,r2,-11
    9290:	00c00704 	movi	r3,28
    9294:	19014216 	blt	r3,r4,97a0 <__muldf3+0x714>
    9298:	00c00744 	movi	r3,29
    929c:	15bffe04 	addi	r22,r2,-8
    92a0:	1907c83a 	sub	r3,r3,r4
    92a4:	85a0983a 	sll	r16,r16,r22
    92a8:	a8c6d83a 	srl	r3,r21,r3
    92ac:	adac983a 	sll	r22,r21,r22
    92b0:	1c20b03a 	or	r16,r3,r16
    92b4:	1080fcc4 	addi	r2,r2,1011
    92b8:	00a9c83a 	sub	r20,zero,r2
    92bc:	002b883a 	mov	r21,zero
    92c0:	000b883a 	mov	r5,zero
    92c4:	003f9006 	br	9108 <_gp+0xffff3c90>
    92c8:	3446b03a 	or	r3,r6,r17
    92cc:	1800281e 	bne	r3,zero,9370 <__muldf3+0x2e4>
    92d0:	0023883a 	mov	r17,zero
    92d4:	0025883a 	mov	r18,zero
    92d8:	01c00084 	movi	r7,2
    92dc:	003f9c06 	br	9150 <_gp+0xffff3cd8>
    92e0:	3446b03a 	or	r3,r6,r17
    92e4:	18001e26 	beq	r3,zero,9360 <__muldf3+0x2d4>
    92e8:	88012126 	beq	r17,zero,9770 <__muldf3+0x6e4>
    92ec:	8809883a 	mov	r4,r17
    92f0:	d9400215 	stw	r5,8(sp)
    92f4:	d9800715 	stw	r6,28(sp)
    92f8:	da400415 	stw	r9,16(sp)
    92fc:	da800315 	stw	r10,12(sp)
    9300:	0009a540 	call	9a54 <__clzsi2>
    9304:	d9400217 	ldw	r5,8(sp)
    9308:	d9800717 	ldw	r6,28(sp)
    930c:	da400417 	ldw	r9,16(sp)
    9310:	da800317 	ldw	r10,12(sp)
    9314:	113ffd44 	addi	r4,r2,-11
    9318:	00c00704 	movi	r3,28
    931c:	19011016 	blt	r3,r4,9760 <__muldf3+0x6d4>
    9320:	00c00744 	movi	r3,29
    9324:	14bffe04 	addi	r18,r2,-8
    9328:	1907c83a 	sub	r3,r3,r4
    932c:	8ca2983a 	sll	r17,r17,r18
    9330:	30c6d83a 	srl	r3,r6,r3
    9334:	34a4983a 	sll	r18,r6,r18
    9338:	1c62b03a 	or	r17,r3,r17
    933c:	1080fcc4 	addi	r2,r2,1011
    9340:	0085c83a 	sub	r2,zero,r2
    9344:	000f883a 	mov	r7,zero
    9348:	003f8106 	br	9150 <_gp+0xffff3cd8>
    934c:	3027883a 	mov	r19,r6
    9350:	0081ffc4 	movi	r2,2047
    9354:	0021883a 	mov	r16,zero
    9358:	002d883a 	mov	r22,zero
    935c:	003faa06 	br	9208 <_gp+0xffff3d90>
    9360:	0023883a 	mov	r17,zero
    9364:	0025883a 	mov	r18,zero
    9368:	01c00044 	movi	r7,1
    936c:	003f7806 	br	9150 <_gp+0xffff3cd8>
    9370:	01c000c4 	movi	r7,3
    9374:	003f7606 	br	9150 <_gp+0xffff3cd8>
    9378:	05400104 	movi	r21,4
    937c:	0021883a 	mov	r16,zero
    9380:	002d883a 	mov	r22,zero
    9384:	01400044 	movi	r5,1
    9388:	003f5f06 	br	9108 <_gp+0xffff3c90>
    938c:	05400304 	movi	r21,12
    9390:	014000c4 	movi	r5,3
    9394:	003f5c06 	br	9108 <_gp+0xffff3c90>
    9398:	04000434 	movhi	r16,16
    939c:	0027883a 	mov	r19,zero
    93a0:	843fffc4 	addi	r16,r16,-1
    93a4:	05bfffc4 	movi	r22,-1
    93a8:	0081ffc4 	movi	r2,2047
    93ac:	003f9606 	br	9208 <_gp+0xffff3d90>
    93b0:	8023883a 	mov	r17,r16
    93b4:	b025883a 	mov	r18,r22
    93b8:	280f883a 	mov	r7,r5
    93bc:	003f8806 	br	91e0 <_gp+0xffff3d68>
    93c0:	8023883a 	mov	r17,r16
    93c4:	b025883a 	mov	r18,r22
    93c8:	480d883a 	mov	r6,r9
    93cc:	280f883a 	mov	r7,r5
    93d0:	003f8306 	br	91e0 <_gp+0xffff3d68>
    93d4:	b026d43a 	srli	r19,r22,16
    93d8:	902ed43a 	srli	r23,r18,16
    93dc:	b5bfffcc 	andi	r22,r22,65535
    93e0:	94bfffcc 	andi	r18,r18,65535
    93e4:	b00b883a 	mov	r5,r22
    93e8:	9009883a 	mov	r4,r18
    93ec:	d8c00515 	stw	r3,20(sp)
    93f0:	d9800715 	stw	r6,28(sp)
    93f4:	da000615 	stw	r8,24(sp)
    93f8:	0009ab80 	call	9ab8 <__mulsi3>
    93fc:	980b883a 	mov	r5,r19
    9400:	9009883a 	mov	r4,r18
    9404:	1029883a 	mov	r20,r2
    9408:	0009ab80 	call	9ab8 <__mulsi3>
    940c:	b80b883a 	mov	r5,r23
    9410:	9809883a 	mov	r4,r19
    9414:	102b883a 	mov	r21,r2
    9418:	0009ab80 	call	9ab8 <__mulsi3>
    941c:	b809883a 	mov	r4,r23
    9420:	b00b883a 	mov	r5,r22
    9424:	1039883a 	mov	fp,r2
    9428:	0009ab80 	call	9ab8 <__mulsi3>
    942c:	a008d43a 	srli	r4,r20,16
    9430:	1545883a 	add	r2,r2,r21
    9434:	d8c00517 	ldw	r3,20(sp)
    9438:	2085883a 	add	r2,r4,r2
    943c:	d9800717 	ldw	r6,28(sp)
    9440:	da000617 	ldw	r8,24(sp)
    9444:	1540022e 	bgeu	r2,r21,9450 <__muldf3+0x3c4>
    9448:	01000074 	movhi	r4,1
    944c:	e139883a 	add	fp,fp,r4
    9450:	100e943a 	slli	r7,r2,16
    9454:	1004d43a 	srli	r2,r2,16
    9458:	882ad43a 	srli	r21,r17,16
    945c:	a53fffcc 	andi	r20,r20,65535
    9460:	8c7fffcc 	andi	r17,r17,65535
    9464:	3d29883a 	add	r20,r7,r20
    9468:	b00b883a 	mov	r5,r22
    946c:	8809883a 	mov	r4,r17
    9470:	d8c00515 	stw	r3,20(sp)
    9474:	d9800715 	stw	r6,28(sp)
    9478:	da000615 	stw	r8,24(sp)
    947c:	dd000115 	stw	r20,4(sp)
    9480:	d8800015 	stw	r2,0(sp)
    9484:	0009ab80 	call	9ab8 <__mulsi3>
    9488:	980b883a 	mov	r5,r19
    948c:	8809883a 	mov	r4,r17
    9490:	d8800215 	stw	r2,8(sp)
    9494:	0009ab80 	call	9ab8 <__mulsi3>
    9498:	9809883a 	mov	r4,r19
    949c:	a80b883a 	mov	r5,r21
    94a0:	1029883a 	mov	r20,r2
    94a4:	0009ab80 	call	9ab8 <__mulsi3>
    94a8:	b00b883a 	mov	r5,r22
    94ac:	a809883a 	mov	r4,r21
    94b0:	d8800415 	stw	r2,16(sp)
    94b4:	0009ab80 	call	9ab8 <__mulsi3>
    94b8:	d9c00217 	ldw	r7,8(sp)
    94bc:	1505883a 	add	r2,r2,r20
    94c0:	d8c00517 	ldw	r3,20(sp)
    94c4:	3826d43a 	srli	r19,r7,16
    94c8:	d9800717 	ldw	r6,28(sp)
    94cc:	da000617 	ldw	r8,24(sp)
    94d0:	9885883a 	add	r2,r19,r2
    94d4:	da400417 	ldw	r9,16(sp)
    94d8:	1500022e 	bgeu	r2,r20,94e4 <__muldf3+0x458>
    94dc:	01000074 	movhi	r4,1
    94e0:	4913883a 	add	r9,r9,r4
    94e4:	1028d43a 	srli	r20,r2,16
    94e8:	1004943a 	slli	r2,r2,16
    94ec:	802cd43a 	srli	r22,r16,16
    94f0:	843fffcc 	andi	r16,r16,65535
    94f4:	3cffffcc 	andi	r19,r7,65535
    94f8:	9009883a 	mov	r4,r18
    94fc:	800b883a 	mov	r5,r16
    9500:	a269883a 	add	r20,r20,r9
    9504:	d8c00515 	stw	r3,20(sp)
    9508:	d9800715 	stw	r6,28(sp)
    950c:	da000615 	stw	r8,24(sp)
    9510:	14e7883a 	add	r19,r2,r19
    9514:	0009ab80 	call	9ab8 <__mulsi3>
    9518:	9009883a 	mov	r4,r18
    951c:	b00b883a 	mov	r5,r22
    9520:	d8800315 	stw	r2,12(sp)
    9524:	0009ab80 	call	9ab8 <__mulsi3>
    9528:	b809883a 	mov	r4,r23
    952c:	b00b883a 	mov	r5,r22
    9530:	d8800215 	stw	r2,8(sp)
    9534:	0009ab80 	call	9ab8 <__mulsi3>
    9538:	b80b883a 	mov	r5,r23
    953c:	8009883a 	mov	r4,r16
    9540:	d8800415 	stw	r2,16(sp)
    9544:	0009ab80 	call	9ab8 <__mulsi3>
    9548:	da800317 	ldw	r10,12(sp)
    954c:	d9c00217 	ldw	r7,8(sp)
    9550:	d9000017 	ldw	r4,0(sp)
    9554:	502ed43a 	srli	r23,r10,16
    9558:	11c5883a 	add	r2,r2,r7
    955c:	24e5883a 	add	r18,r4,r19
    9560:	b885883a 	add	r2,r23,r2
    9564:	d8c00517 	ldw	r3,20(sp)
    9568:	d9800717 	ldw	r6,28(sp)
    956c:	da000617 	ldw	r8,24(sp)
    9570:	da400417 	ldw	r9,16(sp)
    9574:	11c0022e 	bgeu	r2,r7,9580 <__muldf3+0x4f4>
    9578:	01000074 	movhi	r4,1
    957c:	4913883a 	add	r9,r9,r4
    9580:	100ed43a 	srli	r7,r2,16
    9584:	1004943a 	slli	r2,r2,16
    9588:	55ffffcc 	andi	r23,r10,65535
    958c:	3a53883a 	add	r9,r7,r9
    9590:	8809883a 	mov	r4,r17
    9594:	800b883a 	mov	r5,r16
    9598:	d8c00515 	stw	r3,20(sp)
    959c:	d9800715 	stw	r6,28(sp)
    95a0:	da000615 	stw	r8,24(sp)
    95a4:	da400415 	stw	r9,16(sp)
    95a8:	15ef883a 	add	r23,r2,r23
    95ac:	0009ab80 	call	9ab8 <__mulsi3>
    95b0:	8809883a 	mov	r4,r17
    95b4:	b00b883a 	mov	r5,r22
    95b8:	d8800215 	stw	r2,8(sp)
    95bc:	0009ab80 	call	9ab8 <__mulsi3>
    95c0:	b00b883a 	mov	r5,r22
    95c4:	a809883a 	mov	r4,r21
    95c8:	d8800315 	stw	r2,12(sp)
    95cc:	0009ab80 	call	9ab8 <__mulsi3>
    95d0:	8009883a 	mov	r4,r16
    95d4:	a80b883a 	mov	r5,r21
    95d8:	1023883a 	mov	r17,r2
    95dc:	0009ab80 	call	9ab8 <__mulsi3>
    95e0:	d9c00217 	ldw	r7,8(sp)
    95e4:	da800317 	ldw	r10,12(sp)
    95e8:	d8c00517 	ldw	r3,20(sp)
    95ec:	3808d43a 	srli	r4,r7,16
    95f0:	1285883a 	add	r2,r2,r10
    95f4:	d9800717 	ldw	r6,28(sp)
    95f8:	2085883a 	add	r2,r4,r2
    95fc:	da000617 	ldw	r8,24(sp)
    9600:	da400417 	ldw	r9,16(sp)
    9604:	1280022e 	bgeu	r2,r10,9610 <__muldf3+0x584>
    9608:	01000074 	movhi	r4,1
    960c:	8923883a 	add	r17,r17,r4
    9610:	1008943a 	slli	r4,r2,16
    9614:	39ffffcc 	andi	r7,r7,65535
    9618:	e4b9883a 	add	fp,fp,r18
    961c:	21cf883a 	add	r7,r4,r7
    9620:	e4e7803a 	cmpltu	r19,fp,r19
    9624:	3d0f883a 	add	r7,r7,r20
    9628:	bf39883a 	add	fp,r23,fp
    962c:	99c9883a 	add	r4,r19,r7
    9630:	e5ef803a 	cmpltu	r23,fp,r23
    9634:	490b883a 	add	r5,r9,r4
    9638:	1004d43a 	srli	r2,r2,16
    963c:	b965883a 	add	r18,r23,r5
    9640:	24c9803a 	cmpltu	r4,r4,r19
    9644:	3d29803a 	cmpltu	r20,r7,r20
    9648:	a128b03a 	or	r20,r20,r4
    964c:	95ef803a 	cmpltu	r23,r18,r23
    9650:	2a53803a 	cmpltu	r9,r5,r9
    9654:	a0a9883a 	add	r20,r20,r2
    9658:	4deeb03a 	or	r23,r9,r23
    965c:	a5ef883a 	add	r23,r20,r23
    9660:	bc63883a 	add	r17,r23,r17
    9664:	e004927a 	slli	r2,fp,9
    9668:	d9000117 	ldw	r4,4(sp)
    966c:	882e927a 	slli	r23,r17,9
    9670:	9022d5fa 	srli	r17,r18,23
    9674:	e038d5fa 	srli	fp,fp,23
    9678:	1104b03a 	or	r2,r2,r4
    967c:	9024927a 	slli	r18,r18,9
    9680:	1004c03a 	cmpne	r2,r2,zero
    9684:	bc62b03a 	or	r17,r23,r17
    9688:	1738b03a 	or	fp,r2,fp
    968c:	8880402c 	andhi	r2,r17,256
    9690:	e4a4b03a 	or	r18,fp,r18
    9694:	10000726 	beq	r2,zero,96b4 <__muldf3+0x628>
    9698:	9006d07a 	srli	r3,r18,1
    969c:	880497fa 	slli	r2,r17,31
    96a0:	9480004c 	andi	r18,r18,1
    96a4:	8822d07a 	srli	r17,r17,1
    96a8:	1ca4b03a 	or	r18,r3,r18
    96ac:	14a4b03a 	or	r18,r2,r18
    96b0:	4007883a 	mov	r3,r8
    96b4:	1880ffc4 	addi	r2,r3,1023
    96b8:	0080460e 	bge	zero,r2,97d4 <__muldf3+0x748>
    96bc:	910001cc 	andi	r4,r18,7
    96c0:	20000726 	beq	r4,zero,96e0 <__muldf3+0x654>
    96c4:	910003cc 	andi	r4,r18,15
    96c8:	01400104 	movi	r5,4
    96cc:	21400426 	beq	r4,r5,96e0 <__muldf3+0x654>
    96d0:	9149883a 	add	r4,r18,r5
    96d4:	24a5803a 	cmpltu	r18,r4,r18
    96d8:	8ca3883a 	add	r17,r17,r18
    96dc:	2025883a 	mov	r18,r4
    96e0:	8900402c 	andhi	r4,r17,256
    96e4:	20000426 	beq	r4,zero,96f8 <__muldf3+0x66c>
    96e8:	18810004 	addi	r2,r3,1024
    96ec:	00ffc034 	movhi	r3,65280
    96f0:	18ffffc4 	addi	r3,r3,-1
    96f4:	88e2703a 	and	r17,r17,r3
    96f8:	00c1ff84 	movi	r3,2046
    96fc:	18bf1316 	blt	r3,r2,934c <_gp+0xffff3ed4>
    9700:	882c977a 	slli	r22,r17,29
    9704:	9024d0fa 	srli	r18,r18,3
    9708:	8822927a 	slli	r17,r17,9
    970c:	1081ffcc 	andi	r2,r2,2047
    9710:	b4acb03a 	or	r22,r22,r18
    9714:	8820d33a 	srli	r16,r17,12
    9718:	3027883a 	mov	r19,r6
    971c:	003eba06 	br	9208 <_gp+0xffff3d90>
    9720:	8080022c 	andhi	r2,r16,8
    9724:	10000926 	beq	r2,zero,974c <__muldf3+0x6c0>
    9728:	8880022c 	andhi	r2,r17,8
    972c:	1000071e 	bne	r2,zero,974c <__muldf3+0x6c0>
    9730:	00800434 	movhi	r2,16
    9734:	8c000234 	orhi	r16,r17,8
    9738:	10bfffc4 	addi	r2,r2,-1
    973c:	e027883a 	mov	r19,fp
    9740:	80a0703a 	and	r16,r16,r2
    9744:	902d883a 	mov	r22,r18
    9748:	003f1706 	br	93a8 <_gp+0xffff3f30>
    974c:	00800434 	movhi	r2,16
    9750:	84000234 	orhi	r16,r16,8
    9754:	10bfffc4 	addi	r2,r2,-1
    9758:	80a0703a 	and	r16,r16,r2
    975c:	003f1206 	br	93a8 <_gp+0xffff3f30>
    9760:	147ff604 	addi	r17,r2,-40
    9764:	3462983a 	sll	r17,r6,r17
    9768:	0025883a 	mov	r18,zero
    976c:	003ef306 	br	933c <_gp+0xffff3ec4>
    9770:	3009883a 	mov	r4,r6
    9774:	d9400215 	stw	r5,8(sp)
    9778:	d9800715 	stw	r6,28(sp)
    977c:	da400415 	stw	r9,16(sp)
    9780:	da800315 	stw	r10,12(sp)
    9784:	0009a540 	call	9a54 <__clzsi2>
    9788:	10800804 	addi	r2,r2,32
    978c:	da800317 	ldw	r10,12(sp)
    9790:	da400417 	ldw	r9,16(sp)
    9794:	d9800717 	ldw	r6,28(sp)
    9798:	d9400217 	ldw	r5,8(sp)
    979c:	003edd06 	br	9314 <_gp+0xffff3e9c>
    97a0:	143ff604 	addi	r16,r2,-40
    97a4:	ac20983a 	sll	r16,r21,r16
    97a8:	002d883a 	mov	r22,zero
    97ac:	003ec106 	br	92b4 <_gp+0xffff3e3c>
    97b0:	d9800715 	stw	r6,28(sp)
    97b4:	d9c00215 	stw	r7,8(sp)
    97b8:	da400415 	stw	r9,16(sp)
    97bc:	0009a540 	call	9a54 <__clzsi2>
    97c0:	10800804 	addi	r2,r2,32
    97c4:	da400417 	ldw	r9,16(sp)
    97c8:	d9c00217 	ldw	r7,8(sp)
    97cc:	d9800717 	ldw	r6,28(sp)
    97d0:	003eae06 	br	928c <_gp+0xffff3e14>
    97d4:	00c00044 	movi	r3,1
    97d8:	1887c83a 	sub	r3,r3,r2
    97dc:	01000e04 	movi	r4,56
    97e0:	20fe8516 	blt	r4,r3,91f8 <_gp+0xffff3d80>
    97e4:	010007c4 	movi	r4,31
    97e8:	20c01b16 	blt	r4,r3,9858 <__muldf3+0x7cc>
    97ec:	00800804 	movi	r2,32
    97f0:	10c5c83a 	sub	r2,r2,r3
    97f4:	888a983a 	sll	r5,r17,r2
    97f8:	90c8d83a 	srl	r4,r18,r3
    97fc:	9084983a 	sll	r2,r18,r2
    9800:	88e2d83a 	srl	r17,r17,r3
    9804:	2906b03a 	or	r3,r5,r4
    9808:	1004c03a 	cmpne	r2,r2,zero
    980c:	1886b03a 	or	r3,r3,r2
    9810:	188001cc 	andi	r2,r3,7
    9814:	10000726 	beq	r2,zero,9834 <__muldf3+0x7a8>
    9818:	188003cc 	andi	r2,r3,15
    981c:	01000104 	movi	r4,4
    9820:	11000426 	beq	r2,r4,9834 <__muldf3+0x7a8>
    9824:	1805883a 	mov	r2,r3
    9828:	10c00104 	addi	r3,r2,4
    982c:	1885803a 	cmpltu	r2,r3,r2
    9830:	88a3883a 	add	r17,r17,r2
    9834:	8880202c 	andhi	r2,r17,128
    9838:	10001c26 	beq	r2,zero,98ac <__muldf3+0x820>
    983c:	3027883a 	mov	r19,r6
    9840:	00800044 	movi	r2,1
    9844:	0021883a 	mov	r16,zero
    9848:	002d883a 	mov	r22,zero
    984c:	003e6e06 	br	9208 <_gp+0xffff3d90>
    9850:	4007883a 	mov	r3,r8
    9854:	003f9706 	br	96b4 <_gp+0xffff423c>
    9858:	017ff844 	movi	r5,-31
    985c:	2885c83a 	sub	r2,r5,r2
    9860:	888ad83a 	srl	r5,r17,r2
    9864:	00800804 	movi	r2,32
    9868:	18801a26 	beq	r3,r2,98d4 <__muldf3+0x848>
    986c:	01001004 	movi	r4,64
    9870:	20c7c83a 	sub	r3,r4,r3
    9874:	88e2983a 	sll	r17,r17,r3
    9878:	8ca4b03a 	or	r18,r17,r18
    987c:	9004c03a 	cmpne	r2,r18,zero
    9880:	2884b03a 	or	r2,r5,r2
    9884:	144001cc 	andi	r17,r2,7
    9888:	88000d1e 	bne	r17,zero,98c0 <__muldf3+0x834>
    988c:	0021883a 	mov	r16,zero
    9890:	102cd0fa 	srli	r22,r2,3
    9894:	3027883a 	mov	r19,r6
    9898:	0005883a 	mov	r2,zero
    989c:	b46cb03a 	or	r22,r22,r17
    98a0:	003e5906 	br	9208 <_gp+0xffff3d90>
    98a4:	1007883a 	mov	r3,r2
    98a8:	0023883a 	mov	r17,zero
    98ac:	8820927a 	slli	r16,r17,9
    98b0:	1805883a 	mov	r2,r3
    98b4:	8822977a 	slli	r17,r17,29
    98b8:	8020d33a 	srli	r16,r16,12
    98bc:	003ff406 	br	9890 <_gp+0xffff4418>
    98c0:	10c003cc 	andi	r3,r2,15
    98c4:	01000104 	movi	r4,4
    98c8:	193ff626 	beq	r3,r4,98a4 <_gp+0xffff442c>
    98cc:	0023883a 	mov	r17,zero
    98d0:	003fd506 	br	9828 <_gp+0xffff43b0>
    98d4:	0023883a 	mov	r17,zero
    98d8:	003fe706 	br	9878 <_gp+0xffff4400>
    98dc:	00800434 	movhi	r2,16
    98e0:	8c000234 	orhi	r16,r17,8
    98e4:	10bfffc4 	addi	r2,r2,-1
    98e8:	3027883a 	mov	r19,r6
    98ec:	80a0703a 	and	r16,r16,r2
    98f0:	902d883a 	mov	r22,r18
    98f4:	003eac06 	br	93a8 <_gp+0xffff3f30>

000098f8 <__fixdfsi>:
    98f8:	280cd53a 	srli	r6,r5,20
    98fc:	00c00434 	movhi	r3,16
    9900:	18ffffc4 	addi	r3,r3,-1
    9904:	3181ffcc 	andi	r6,r6,2047
    9908:	01c0ff84 	movi	r7,1022
    990c:	28c6703a 	and	r3,r5,r3
    9910:	280ad7fa 	srli	r5,r5,31
    9914:	3980120e 	bge	r7,r6,9960 <__fixdfsi+0x68>
    9918:	00810744 	movi	r2,1053
    991c:	11800c16 	blt	r2,r6,9950 <__fixdfsi+0x58>
    9920:	00810cc4 	movi	r2,1075
    9924:	1185c83a 	sub	r2,r2,r6
    9928:	01c007c4 	movi	r7,31
    992c:	18c00434 	orhi	r3,r3,16
    9930:	38800d16 	blt	r7,r2,9968 <__fixdfsi+0x70>
    9934:	31befb44 	addi	r6,r6,-1043
    9938:	2084d83a 	srl	r2,r4,r2
    993c:	1986983a 	sll	r3,r3,r6
    9940:	1884b03a 	or	r2,r3,r2
    9944:	28000726 	beq	r5,zero,9964 <__fixdfsi+0x6c>
    9948:	0085c83a 	sub	r2,zero,r2
    994c:	f800283a 	ret
    9950:	00a00034 	movhi	r2,32768
    9954:	10bfffc4 	addi	r2,r2,-1
    9958:	2885883a 	add	r2,r5,r2
    995c:	f800283a 	ret
    9960:	0005883a 	mov	r2,zero
    9964:	f800283a 	ret
    9968:	008104c4 	movi	r2,1043
    996c:	1185c83a 	sub	r2,r2,r6
    9970:	1884d83a 	srl	r2,r3,r2
    9974:	003ff306 	br	9944 <_gp+0xffff44cc>

00009978 <__floatsidf>:
    9978:	defffd04 	addi	sp,sp,-12
    997c:	dfc00215 	stw	ra,8(sp)
    9980:	dc400115 	stw	r17,4(sp)
    9984:	dc000015 	stw	r16,0(sp)
    9988:	20002b26 	beq	r4,zero,9a38 <__floatsidf+0xc0>
    998c:	2023883a 	mov	r17,r4
    9990:	2020d7fa 	srli	r16,r4,31
    9994:	20002d16 	blt	r4,zero,9a4c <__floatsidf+0xd4>
    9998:	8809883a 	mov	r4,r17
    999c:	0009a540 	call	9a54 <__clzsi2>
    99a0:	01410784 	movi	r5,1054
    99a4:	288bc83a 	sub	r5,r5,r2
    99a8:	01010cc4 	movi	r4,1075
    99ac:	2149c83a 	sub	r4,r4,r5
    99b0:	00c007c4 	movi	r3,31
    99b4:	1900160e 	bge	r3,r4,9a10 <__floatsidf+0x98>
    99b8:	00c104c4 	movi	r3,1043
    99bc:	1947c83a 	sub	r3,r3,r5
    99c0:	88c6983a 	sll	r3,r17,r3
    99c4:	00800434 	movhi	r2,16
    99c8:	10bfffc4 	addi	r2,r2,-1
    99cc:	1886703a 	and	r3,r3,r2
    99d0:	2941ffcc 	andi	r5,r5,2047
    99d4:	800d883a 	mov	r6,r16
    99d8:	0005883a 	mov	r2,zero
    99dc:	280a953a 	slli	r5,r5,20
    99e0:	31803fcc 	andi	r6,r6,255
    99e4:	01000434 	movhi	r4,16
    99e8:	300c97fa 	slli	r6,r6,31
    99ec:	213fffc4 	addi	r4,r4,-1
    99f0:	1906703a 	and	r3,r3,r4
    99f4:	1946b03a 	or	r3,r3,r5
    99f8:	1986b03a 	or	r3,r3,r6
    99fc:	dfc00217 	ldw	ra,8(sp)
    9a00:	dc400117 	ldw	r17,4(sp)
    9a04:	dc000017 	ldw	r16,0(sp)
    9a08:	dec00304 	addi	sp,sp,12
    9a0c:	f800283a 	ret
    9a10:	00c002c4 	movi	r3,11
    9a14:	1887c83a 	sub	r3,r3,r2
    9a18:	88c6d83a 	srl	r3,r17,r3
    9a1c:	8904983a 	sll	r2,r17,r4
    9a20:	01000434 	movhi	r4,16
    9a24:	213fffc4 	addi	r4,r4,-1
    9a28:	2941ffcc 	andi	r5,r5,2047
    9a2c:	1906703a 	and	r3,r3,r4
    9a30:	800d883a 	mov	r6,r16
    9a34:	003fe906 	br	99dc <_gp+0xffff4564>
    9a38:	000d883a 	mov	r6,zero
    9a3c:	000b883a 	mov	r5,zero
    9a40:	0007883a 	mov	r3,zero
    9a44:	0005883a 	mov	r2,zero
    9a48:	003fe406 	br	99dc <_gp+0xffff4564>
    9a4c:	0123c83a 	sub	r17,zero,r4
    9a50:	003fd106 	br	9998 <_gp+0xffff4520>

00009a54 <__clzsi2>:
    9a54:	00bfffd4 	movui	r2,65535
    9a58:	11000536 	bltu	r2,r4,9a70 <__clzsi2+0x1c>
    9a5c:	00803fc4 	movi	r2,255
    9a60:	11000f36 	bltu	r2,r4,9aa0 <__clzsi2+0x4c>
    9a64:	00800804 	movi	r2,32
    9a68:	0007883a 	mov	r3,zero
    9a6c:	00000506 	br	9a84 <__clzsi2+0x30>
    9a70:	00804034 	movhi	r2,256
    9a74:	10bfffc4 	addi	r2,r2,-1
    9a78:	11000c2e 	bgeu	r2,r4,9aac <__clzsi2+0x58>
    9a7c:	00800204 	movi	r2,8
    9a80:	00c00604 	movi	r3,24
    9a84:	20c8d83a 	srl	r4,r4,r3
    9a88:	00c00074 	movhi	r3,1
    9a8c:	18ef3e84 	addi	r3,r3,-17158
    9a90:	1909883a 	add	r4,r3,r4
    9a94:	20c00003 	ldbu	r3,0(r4)
    9a98:	10c5c83a 	sub	r2,r2,r3
    9a9c:	f800283a 	ret
    9aa0:	00800604 	movi	r2,24
    9aa4:	00c00204 	movi	r3,8
    9aa8:	003ff606 	br	9a84 <_gp+0xffff460c>
    9aac:	00800404 	movi	r2,16
    9ab0:	1007883a 	mov	r3,r2
    9ab4:	003ff306 	br	9a84 <_gp+0xffff460c>

00009ab8 <__mulsi3>:
    9ab8:	0005883a 	mov	r2,zero
    9abc:	20000726 	beq	r4,zero,9adc <__mulsi3+0x24>
    9ac0:	20c0004c 	andi	r3,r4,1
    9ac4:	2008d07a 	srli	r4,r4,1
    9ac8:	18000126 	beq	r3,zero,9ad0 <__mulsi3+0x18>
    9acc:	1145883a 	add	r2,r2,r5
    9ad0:	294b883a 	add	r5,r5,r5
    9ad4:	203ffa1e 	bne	r4,zero,9ac0 <_gp+0xffff4648>
    9ad8:	f800283a 	ret
    9adc:	f800283a 	ret

00009ae0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9ae0:	defff904 	addi	sp,sp,-28
    9ae4:	dfc00615 	stw	ra,24(sp)
    9ae8:	df000515 	stw	fp,20(sp)
    9aec:	df000504 	addi	fp,sp,20
    9af0:	e13ffc15 	stw	r4,-16(fp)
    9af4:	e17ffd15 	stw	r5,-12(fp)
    9af8:	e1bffe15 	stw	r6,-8(fp)
    9afc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    9b00:	e0800217 	ldw	r2,8(fp)
    9b04:	d8800015 	stw	r2,0(sp)
    9b08:	e1ffff17 	ldw	r7,-4(fp)
    9b0c:	e1bffe17 	ldw	r6,-8(fp)
    9b10:	e17ffd17 	ldw	r5,-12(fp)
    9b14:	e13ffc17 	ldw	r4,-16(fp)
    9b18:	0009c900 	call	9c90 <alt_iic_isr_register>
}  
    9b1c:	e037883a 	mov	sp,fp
    9b20:	dfc00117 	ldw	ra,4(sp)
    9b24:	df000017 	ldw	fp,0(sp)
    9b28:	dec00204 	addi	sp,sp,8
    9b2c:	f800283a 	ret

00009b30 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    9b30:	defff904 	addi	sp,sp,-28
    9b34:	df000615 	stw	fp,24(sp)
    9b38:	df000604 	addi	fp,sp,24
    9b3c:	e13ffe15 	stw	r4,-8(fp)
    9b40:	e17fff15 	stw	r5,-4(fp)
    9b44:	e0bfff17 	ldw	r2,-4(fp)
    9b48:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9b4c:	0005303a 	rdctl	r2,status
    9b50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9b54:	e0fffb17 	ldw	r3,-20(fp)
    9b58:	00bfff84 	movi	r2,-2
    9b5c:	1884703a 	and	r2,r3,r2
    9b60:	1001703a 	wrctl	status,r2
  
  return context;
    9b64:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    9b68:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    9b6c:	00c00044 	movi	r3,1
    9b70:	e0bffa17 	ldw	r2,-24(fp)
    9b74:	1884983a 	sll	r2,r3,r2
    9b78:	1007883a 	mov	r3,r2
    9b7c:	d0a5b117 	ldw	r2,-26940(gp)
    9b80:	1884b03a 	or	r2,r3,r2
    9b84:	d0a5b115 	stw	r2,-26940(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9b88:	d0a5b117 	ldw	r2,-26940(gp)
    9b8c:	100170fa 	wrctl	ienable,r2
    9b90:	e0bffc17 	ldw	r2,-16(fp)
    9b94:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9b98:	e0bffd17 	ldw	r2,-12(fp)
    9b9c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    9ba0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    9ba4:	0001883a 	nop
}
    9ba8:	e037883a 	mov	sp,fp
    9bac:	df000017 	ldw	fp,0(sp)
    9bb0:	dec00104 	addi	sp,sp,4
    9bb4:	f800283a 	ret

00009bb8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    9bb8:	defff904 	addi	sp,sp,-28
    9bbc:	df000615 	stw	fp,24(sp)
    9bc0:	df000604 	addi	fp,sp,24
    9bc4:	e13ffe15 	stw	r4,-8(fp)
    9bc8:	e17fff15 	stw	r5,-4(fp)
    9bcc:	e0bfff17 	ldw	r2,-4(fp)
    9bd0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9bd4:	0005303a 	rdctl	r2,status
    9bd8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9bdc:	e0fffb17 	ldw	r3,-20(fp)
    9be0:	00bfff84 	movi	r2,-2
    9be4:	1884703a 	and	r2,r3,r2
    9be8:	1001703a 	wrctl	status,r2
  
  return context;
    9bec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    9bf0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    9bf4:	00c00044 	movi	r3,1
    9bf8:	e0bffa17 	ldw	r2,-24(fp)
    9bfc:	1884983a 	sll	r2,r3,r2
    9c00:	0084303a 	nor	r2,zero,r2
    9c04:	1007883a 	mov	r3,r2
    9c08:	d0a5b117 	ldw	r2,-26940(gp)
    9c0c:	1884703a 	and	r2,r3,r2
    9c10:	d0a5b115 	stw	r2,-26940(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9c14:	d0a5b117 	ldw	r2,-26940(gp)
    9c18:	100170fa 	wrctl	ienable,r2
    9c1c:	e0bffc17 	ldw	r2,-16(fp)
    9c20:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9c24:	e0bffd17 	ldw	r2,-12(fp)
    9c28:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    9c2c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    9c30:	0001883a 	nop
}
    9c34:	e037883a 	mov	sp,fp
    9c38:	df000017 	ldw	fp,0(sp)
    9c3c:	dec00104 	addi	sp,sp,4
    9c40:	f800283a 	ret

00009c44 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    9c44:	defffc04 	addi	sp,sp,-16
    9c48:	df000315 	stw	fp,12(sp)
    9c4c:	df000304 	addi	fp,sp,12
    9c50:	e13ffe15 	stw	r4,-8(fp)
    9c54:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    9c58:	000530fa 	rdctl	r2,ienable
    9c5c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    9c60:	00c00044 	movi	r3,1
    9c64:	e0bfff17 	ldw	r2,-4(fp)
    9c68:	1884983a 	sll	r2,r3,r2
    9c6c:	1007883a 	mov	r3,r2
    9c70:	e0bffd17 	ldw	r2,-12(fp)
    9c74:	1884703a 	and	r2,r3,r2
    9c78:	1004c03a 	cmpne	r2,r2,zero
    9c7c:	10803fcc 	andi	r2,r2,255
}
    9c80:	e037883a 	mov	sp,fp
    9c84:	df000017 	ldw	fp,0(sp)
    9c88:	dec00104 	addi	sp,sp,4
    9c8c:	f800283a 	ret

00009c90 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9c90:	defff504 	addi	sp,sp,-44
    9c94:	dfc00a15 	stw	ra,40(sp)
    9c98:	df000915 	stw	fp,36(sp)
    9c9c:	df000904 	addi	fp,sp,36
    9ca0:	e13ffc15 	stw	r4,-16(fp)
    9ca4:	e17ffd15 	stw	r5,-12(fp)
    9ca8:	e1bffe15 	stw	r6,-8(fp)
    9cac:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    9cb0:	00bffa84 	movi	r2,-22
    9cb4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    9cb8:	e0bffd17 	ldw	r2,-12(fp)
    9cbc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    9cc0:	e0bff817 	ldw	r2,-32(fp)
    9cc4:	10800808 	cmpgei	r2,r2,32
    9cc8:	1000271e 	bne	r2,zero,9d68 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9ccc:	0005303a 	rdctl	r2,status
    9cd0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9cd4:	e0fffb17 	ldw	r3,-20(fp)
    9cd8:	00bfff84 	movi	r2,-2
    9cdc:	1884703a 	and	r2,r3,r2
    9ce0:	1001703a 	wrctl	status,r2
  
  return context;
    9ce4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    9ce8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    9cec:	00800074 	movhi	r2,1
    9cf0:	10bad704 	addi	r2,r2,-5284
    9cf4:	e0fff817 	ldw	r3,-32(fp)
    9cf8:	180690fa 	slli	r3,r3,3
    9cfc:	10c5883a 	add	r2,r2,r3
    9d00:	e0fffe17 	ldw	r3,-8(fp)
    9d04:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    9d08:	00800074 	movhi	r2,1
    9d0c:	10bad704 	addi	r2,r2,-5284
    9d10:	e0fff817 	ldw	r3,-32(fp)
    9d14:	180690fa 	slli	r3,r3,3
    9d18:	10c5883a 	add	r2,r2,r3
    9d1c:	10800104 	addi	r2,r2,4
    9d20:	e0ffff17 	ldw	r3,-4(fp)
    9d24:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    9d28:	e0bffe17 	ldw	r2,-8(fp)
    9d2c:	10000526 	beq	r2,zero,9d44 <alt_iic_isr_register+0xb4>
    9d30:	e0bff817 	ldw	r2,-32(fp)
    9d34:	100b883a 	mov	r5,r2
    9d38:	e13ffc17 	ldw	r4,-16(fp)
    9d3c:	0009b300 	call	9b30 <alt_ic_irq_enable>
    9d40:	00000406 	br	9d54 <alt_iic_isr_register+0xc4>
    9d44:	e0bff817 	ldw	r2,-32(fp)
    9d48:	100b883a 	mov	r5,r2
    9d4c:	e13ffc17 	ldw	r4,-16(fp)
    9d50:	0009bb80 	call	9bb8 <alt_ic_irq_disable>
    9d54:	e0bff715 	stw	r2,-36(fp)
    9d58:	e0bffa17 	ldw	r2,-24(fp)
    9d5c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9d60:	e0bff917 	ldw	r2,-28(fp)
    9d64:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    9d68:	e0bff717 	ldw	r2,-36(fp)
}
    9d6c:	e037883a 	mov	sp,fp
    9d70:	dfc00117 	ldw	ra,4(sp)
    9d74:	df000017 	ldw	fp,0(sp)
    9d78:	dec00204 	addi	sp,sp,8
    9d7c:	f800283a 	ret

00009d80 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    9d80:	defffc04 	addi	sp,sp,-16
    9d84:	df000315 	stw	fp,12(sp)
    9d88:	df000304 	addi	fp,sp,12
    9d8c:	e13ffd15 	stw	r4,-12(fp)
    9d90:	e17ffe15 	stw	r5,-8(fp)
    9d94:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    9d98:	e0fffe17 	ldw	r3,-8(fp)
    9d9c:	e0bffd17 	ldw	r2,-12(fp)
    9da0:	18800c26 	beq	r3,r2,9dd4 <alt_load_section+0x54>
  {
    while( to != end )
    9da4:	00000806 	br	9dc8 <alt_load_section+0x48>
    {
      *to++ = *from++;
    9da8:	e0bffe17 	ldw	r2,-8(fp)
    9dac:	10c00104 	addi	r3,r2,4
    9db0:	e0fffe15 	stw	r3,-8(fp)
    9db4:	e0fffd17 	ldw	r3,-12(fp)
    9db8:	19000104 	addi	r4,r3,4
    9dbc:	e13ffd15 	stw	r4,-12(fp)
    9dc0:	18c00017 	ldw	r3,0(r3)
    9dc4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    9dc8:	e0fffe17 	ldw	r3,-8(fp)
    9dcc:	e0bfff17 	ldw	r2,-4(fp)
    9dd0:	18bff51e 	bne	r3,r2,9da8 <_gp+0xffff4930>
    {
      *to++ = *from++;
    }
  }
}
    9dd4:	0001883a 	nop
    9dd8:	e037883a 	mov	sp,fp
    9ddc:	df000017 	ldw	fp,0(sp)
    9de0:	dec00104 	addi	sp,sp,4
    9de4:	f800283a 	ret

00009de8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    9de8:	defffe04 	addi	sp,sp,-8
    9dec:	dfc00115 	stw	ra,4(sp)
    9df0:	df000015 	stw	fp,0(sp)
    9df4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    9df8:	01800074 	movhi	r6,1
    9dfc:	31b52e04 	addi	r6,r6,-11080
    9e00:	01400074 	movhi	r5,1
    9e04:	296f8d04 	addi	r5,r5,-16844
    9e08:	01000074 	movhi	r4,1
    9e0c:	21352e04 	addi	r4,r4,-11080
    9e10:	0009d800 	call	9d80 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    9e14:	01800074 	movhi	r6,1
    9e18:	31a08c04 	addi	r6,r6,-32208
    9e1c:	01400074 	movhi	r5,1
    9e20:	29600804 	addi	r5,r5,-32736
    9e24:	01000074 	movhi	r4,1
    9e28:	21200804 	addi	r4,r4,-32736
    9e2c:	0009d800 	call	9d80 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    9e30:	01800074 	movhi	r6,1
    9e34:	31af8d04 	addi	r6,r6,-16844
    9e38:	01400074 	movhi	r5,1
    9e3c:	296f3c04 	addi	r5,r5,-17168
    9e40:	01000074 	movhi	r4,1
    9e44:	212f3c04 	addi	r4,r4,-17168
    9e48:	0009d800 	call	9d80 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    9e4c:	000ac480 	call	ac48 <alt_dcache_flush_all>
  alt_icache_flush_all();
    9e50:	000ae340 	call	ae34 <alt_icache_flush_all>
}
    9e54:	0001883a 	nop
    9e58:	e037883a 	mov	sp,fp
    9e5c:	dfc00117 	ldw	ra,4(sp)
    9e60:	df000017 	ldw	fp,0(sp)
    9e64:	dec00204 	addi	sp,sp,8
    9e68:	f800283a 	ret

00009e6c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    9e6c:	defffd04 	addi	sp,sp,-12
    9e70:	dfc00215 	stw	ra,8(sp)
    9e74:	df000115 	stw	fp,4(sp)
    9e78:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    9e7c:	0009883a 	mov	r4,zero
    9e80:	0009f1c0 	call	9f1c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    9e84:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    9e88:	0009f540 	call	9f54 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    9e8c:	01800074 	movhi	r6,1
    9e90:	31af7f04 	addi	r6,r6,-16900
    9e94:	01400074 	movhi	r5,1
    9e98:	296f7f04 	addi	r5,r5,-16900
    9e9c:	01000074 	movhi	r4,1
    9ea0:	212f7f04 	addi	r4,r4,-16900
    9ea4:	000afd40 	call	afd4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    9ea8:	000ad740 	call	ad74 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    9eac:	01000074 	movhi	r4,1
    9eb0:	212b7504 	addi	r4,r4,-21036
    9eb4:	000b77c0 	call	b77c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    9eb8:	d0a5b217 	ldw	r2,-26936(gp)
    9ebc:	d0e5b317 	ldw	r3,-26932(gp)
    9ec0:	d125b417 	ldw	r4,-26928(gp)
    9ec4:	200d883a 	mov	r6,r4
    9ec8:	180b883a 	mov	r5,r3
    9ecc:	1009883a 	mov	r4,r2
    9ed0:	00084a00 	call	84a0 <main>
    9ed4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    9ed8:	01000044 	movi	r4,1
    9edc:	000ab700 	call	ab70 <close>
  exit (result);
    9ee0:	e13fff17 	ldw	r4,-4(fp)
    9ee4:	000b7900 	call	b790 <exit>

00009ee8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    9ee8:	defffd04 	addi	sp,sp,-12
    9eec:	dfc00215 	stw	ra,8(sp)
    9ef0:	df000115 	stw	fp,4(sp)
    9ef4:	df000104 	addi	fp,sp,4
    9ef8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    9efc:	d1600804 	addi	r5,gp,-32736
    9f00:	e13fff17 	ldw	r4,-4(fp)
    9f04:	000acd00 	call	acd0 <alt_dev_llist_insert>
}
    9f08:	e037883a 	mov	sp,fp
    9f0c:	dfc00117 	ldw	ra,4(sp)
    9f10:	df000017 	ldw	fp,0(sp)
    9f14:	dec00204 	addi	sp,sp,8
    9f18:	f800283a 	ret

00009f1c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    9f1c:	defffd04 	addi	sp,sp,-12
    9f20:	dfc00215 	stw	ra,8(sp)
    9f24:	df000115 	stw	fp,4(sp)
    9f28:	df000104 	addi	fp,sp,4
    9f2c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    9f30:	000b4fc0 	call	b4fc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    9f34:	00800044 	movi	r2,1
    9f38:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    9f3c:	0001883a 	nop
    9f40:	e037883a 	mov	sp,fp
    9f44:	dfc00117 	ldw	ra,4(sp)
    9f48:	df000017 	ldw	fp,0(sp)
    9f4c:	dec00204 	addi	sp,sp,8
    9f50:	f800283a 	ret

00009f54 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    9f54:	defffe04 	addi	sp,sp,-8
    9f58:	dfc00115 	stw	ra,4(sp)
    9f5c:	df000015 	stw	fp,0(sp)
    9f60:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    9f64:	01800084 	movi	r6,2
    9f68:	000b883a 	mov	r5,zero
    9f6c:	01000074 	movhi	r4,1
    9f70:	212f9d04 	addi	r4,r4,-16780
    9f74:	000a1040 	call	a104 <altera_avalon_jtag_uart_init>
    9f78:	01000074 	movhi	r4,1
    9f7c:	212f9304 	addi	r4,r4,-16820
    9f80:	0009ee80 	call	9ee8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    9f84:	0001883a 	nop
}
    9f88:	0001883a 	nop
    9f8c:	e037883a 	mov	sp,fp
    9f90:	dfc00117 	ldw	ra,4(sp)
    9f94:	df000017 	ldw	fp,0(sp)
    9f98:	dec00204 	addi	sp,sp,8
    9f9c:	f800283a 	ret

00009fa0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    9fa0:	defffa04 	addi	sp,sp,-24
    9fa4:	dfc00515 	stw	ra,20(sp)
    9fa8:	df000415 	stw	fp,16(sp)
    9fac:	df000404 	addi	fp,sp,16
    9fb0:	e13ffd15 	stw	r4,-12(fp)
    9fb4:	e17ffe15 	stw	r5,-8(fp)
    9fb8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9fbc:	e0bffd17 	ldw	r2,-12(fp)
    9fc0:	10800017 	ldw	r2,0(r2)
    9fc4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    9fc8:	e0bffc17 	ldw	r2,-16(fp)
    9fcc:	10c00a04 	addi	r3,r2,40
    9fd0:	e0bffd17 	ldw	r2,-12(fp)
    9fd4:	10800217 	ldw	r2,8(r2)
    9fd8:	100f883a 	mov	r7,r2
    9fdc:	e1bfff17 	ldw	r6,-4(fp)
    9fe0:	e17ffe17 	ldw	r5,-8(fp)
    9fe4:	1809883a 	mov	r4,r3
    9fe8:	000a5c80 	call	a5c8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    9fec:	e037883a 	mov	sp,fp
    9ff0:	dfc00117 	ldw	ra,4(sp)
    9ff4:	df000017 	ldw	fp,0(sp)
    9ff8:	dec00204 	addi	sp,sp,8
    9ffc:	f800283a 	ret

0000a000 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    a000:	defffa04 	addi	sp,sp,-24
    a004:	dfc00515 	stw	ra,20(sp)
    a008:	df000415 	stw	fp,16(sp)
    a00c:	df000404 	addi	fp,sp,16
    a010:	e13ffd15 	stw	r4,-12(fp)
    a014:	e17ffe15 	stw	r5,-8(fp)
    a018:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a01c:	e0bffd17 	ldw	r2,-12(fp)
    a020:	10800017 	ldw	r2,0(r2)
    a024:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    a028:	e0bffc17 	ldw	r2,-16(fp)
    a02c:	10c00a04 	addi	r3,r2,40
    a030:	e0bffd17 	ldw	r2,-12(fp)
    a034:	10800217 	ldw	r2,8(r2)
    a038:	100f883a 	mov	r7,r2
    a03c:	e1bfff17 	ldw	r6,-4(fp)
    a040:	e17ffe17 	ldw	r5,-8(fp)
    a044:	1809883a 	mov	r4,r3
    a048:	000a7e40 	call	a7e4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    a04c:	e037883a 	mov	sp,fp
    a050:	dfc00117 	ldw	ra,4(sp)
    a054:	df000017 	ldw	fp,0(sp)
    a058:	dec00204 	addi	sp,sp,8
    a05c:	f800283a 	ret

0000a060 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    a060:	defffc04 	addi	sp,sp,-16
    a064:	dfc00315 	stw	ra,12(sp)
    a068:	df000215 	stw	fp,8(sp)
    a06c:	df000204 	addi	fp,sp,8
    a070:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a074:	e0bfff17 	ldw	r2,-4(fp)
    a078:	10800017 	ldw	r2,0(r2)
    a07c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    a080:	e0bffe17 	ldw	r2,-8(fp)
    a084:	10c00a04 	addi	r3,r2,40
    a088:	e0bfff17 	ldw	r2,-4(fp)
    a08c:	10800217 	ldw	r2,8(r2)
    a090:	100b883a 	mov	r5,r2
    a094:	1809883a 	mov	r4,r3
    a098:	000a4700 	call	a470 <altera_avalon_jtag_uart_close>
}
    a09c:	e037883a 	mov	sp,fp
    a0a0:	dfc00117 	ldw	ra,4(sp)
    a0a4:	df000017 	ldw	fp,0(sp)
    a0a8:	dec00204 	addi	sp,sp,8
    a0ac:	f800283a 	ret

0000a0b0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    a0b0:	defffa04 	addi	sp,sp,-24
    a0b4:	dfc00515 	stw	ra,20(sp)
    a0b8:	df000415 	stw	fp,16(sp)
    a0bc:	df000404 	addi	fp,sp,16
    a0c0:	e13ffd15 	stw	r4,-12(fp)
    a0c4:	e17ffe15 	stw	r5,-8(fp)
    a0c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    a0cc:	e0bffd17 	ldw	r2,-12(fp)
    a0d0:	10800017 	ldw	r2,0(r2)
    a0d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    a0d8:	e0bffc17 	ldw	r2,-16(fp)
    a0dc:	10800a04 	addi	r2,r2,40
    a0e0:	e1bfff17 	ldw	r6,-4(fp)
    a0e4:	e17ffe17 	ldw	r5,-8(fp)
    a0e8:	1009883a 	mov	r4,r2
    a0ec:	000a4d80 	call	a4d8 <altera_avalon_jtag_uart_ioctl>
}
    a0f0:	e037883a 	mov	sp,fp
    a0f4:	dfc00117 	ldw	ra,4(sp)
    a0f8:	df000017 	ldw	fp,0(sp)
    a0fc:	dec00204 	addi	sp,sp,8
    a100:	f800283a 	ret

0000a104 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    a104:	defffa04 	addi	sp,sp,-24
    a108:	dfc00515 	stw	ra,20(sp)
    a10c:	df000415 	stw	fp,16(sp)
    a110:	df000404 	addi	fp,sp,16
    a114:	e13ffd15 	stw	r4,-12(fp)
    a118:	e17ffe15 	stw	r5,-8(fp)
    a11c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    a120:	e0bffd17 	ldw	r2,-12(fp)
    a124:	00c00044 	movi	r3,1
    a128:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    a12c:	e0bffd17 	ldw	r2,-12(fp)
    a130:	10800017 	ldw	r2,0(r2)
    a134:	10800104 	addi	r2,r2,4
    a138:	1007883a 	mov	r3,r2
    a13c:	e0bffd17 	ldw	r2,-12(fp)
    a140:	10800817 	ldw	r2,32(r2)
    a144:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    a148:	e0bffe17 	ldw	r2,-8(fp)
    a14c:	e0ffff17 	ldw	r3,-4(fp)
    a150:	d8000015 	stw	zero,0(sp)
    a154:	e1fffd17 	ldw	r7,-12(fp)
    a158:	01800074 	movhi	r6,1
    a15c:	31a87104 	addi	r6,r6,-24124
    a160:	180b883a 	mov	r5,r3
    a164:	1009883a 	mov	r4,r2
    a168:	0009ae00 	call	9ae0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    a16c:	e0bffd17 	ldw	r2,-12(fp)
    a170:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    a174:	e0bffd17 	ldw	r2,-12(fp)
    a178:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    a17c:	d0e5b617 	ldw	r3,-26920(gp)
    a180:	e1fffd17 	ldw	r7,-12(fp)
    a184:	01800074 	movhi	r6,1
    a188:	31a8f404 	addi	r6,r6,-23600
    a18c:	180b883a 	mov	r5,r3
    a190:	1009883a 	mov	r4,r2
    a194:	000aa080 	call	aa08 <alt_alarm_start>
    a198:	1000040e 	bge	r2,zero,a1ac <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    a19c:	e0fffd17 	ldw	r3,-12(fp)
    a1a0:	00a00034 	movhi	r2,32768
    a1a4:	10bfffc4 	addi	r2,r2,-1
    a1a8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    a1ac:	0001883a 	nop
    a1b0:	e037883a 	mov	sp,fp
    a1b4:	dfc00117 	ldw	ra,4(sp)
    a1b8:	df000017 	ldw	fp,0(sp)
    a1bc:	dec00204 	addi	sp,sp,8
    a1c0:	f800283a 	ret

0000a1c4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    a1c4:	defff804 	addi	sp,sp,-32
    a1c8:	df000715 	stw	fp,28(sp)
    a1cc:	df000704 	addi	fp,sp,28
    a1d0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    a1d4:	e0bfff17 	ldw	r2,-4(fp)
    a1d8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    a1dc:	e0bffb17 	ldw	r2,-20(fp)
    a1e0:	10800017 	ldw	r2,0(r2)
    a1e4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    a1e8:	e0bffc17 	ldw	r2,-16(fp)
    a1ec:	10800104 	addi	r2,r2,4
    a1f0:	10800037 	ldwio	r2,0(r2)
    a1f4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    a1f8:	e0bffd17 	ldw	r2,-12(fp)
    a1fc:	1080c00c 	andi	r2,r2,768
    a200:	10006d26 	beq	r2,zero,a3b8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    a204:	e0bffd17 	ldw	r2,-12(fp)
    a208:	1080400c 	andi	r2,r2,256
    a20c:	10003526 	beq	r2,zero,a2e4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    a210:	00800074 	movhi	r2,1
    a214:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    a218:	e0bffb17 	ldw	r2,-20(fp)
    a21c:	10800a17 	ldw	r2,40(r2)
    a220:	10800044 	addi	r2,r2,1
    a224:	1081ffcc 	andi	r2,r2,2047
    a228:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    a22c:	e0bffb17 	ldw	r2,-20(fp)
    a230:	10c00b17 	ldw	r3,44(r2)
    a234:	e0bffe17 	ldw	r2,-8(fp)
    a238:	18801526 	beq	r3,r2,a290 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    a23c:	e0bffc17 	ldw	r2,-16(fp)
    a240:	10800037 	ldwio	r2,0(r2)
    a244:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    a248:	e0bff917 	ldw	r2,-28(fp)
    a24c:	10a0000c 	andi	r2,r2,32768
    a250:	10001126 	beq	r2,zero,a298 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    a254:	e0bffb17 	ldw	r2,-20(fp)
    a258:	10800a17 	ldw	r2,40(r2)
    a25c:	e0fff917 	ldw	r3,-28(fp)
    a260:	1809883a 	mov	r4,r3
    a264:	e0fffb17 	ldw	r3,-20(fp)
    a268:	1885883a 	add	r2,r3,r2
    a26c:	10800e04 	addi	r2,r2,56
    a270:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    a274:	e0bffb17 	ldw	r2,-20(fp)
    a278:	10800a17 	ldw	r2,40(r2)
    a27c:	10800044 	addi	r2,r2,1
    a280:	10c1ffcc 	andi	r3,r2,2047
    a284:	e0bffb17 	ldw	r2,-20(fp)
    a288:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    a28c:	003fe206 	br	a218 <_gp+0xffff4da0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    a290:	0001883a 	nop
    a294:	00000106 	br	a29c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    a298:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    a29c:	e0bff917 	ldw	r2,-28(fp)
    a2a0:	10bfffec 	andhi	r2,r2,65535
    a2a4:	10000f26 	beq	r2,zero,a2e4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    a2a8:	e0bffb17 	ldw	r2,-20(fp)
    a2ac:	10c00817 	ldw	r3,32(r2)
    a2b0:	00bfff84 	movi	r2,-2
    a2b4:	1886703a 	and	r3,r3,r2
    a2b8:	e0bffb17 	ldw	r2,-20(fp)
    a2bc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    a2c0:	e0bffc17 	ldw	r2,-16(fp)
    a2c4:	10800104 	addi	r2,r2,4
    a2c8:	1007883a 	mov	r3,r2
    a2cc:	e0bffb17 	ldw	r2,-20(fp)
    a2d0:	10800817 	ldw	r2,32(r2)
    a2d4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    a2d8:	e0bffc17 	ldw	r2,-16(fp)
    a2dc:	10800104 	addi	r2,r2,4
    a2e0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    a2e4:	e0bffd17 	ldw	r2,-12(fp)
    a2e8:	1080800c 	andi	r2,r2,512
    a2ec:	103fbe26 	beq	r2,zero,a1e8 <_gp+0xffff4d70>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    a2f0:	e0bffd17 	ldw	r2,-12(fp)
    a2f4:	1004d43a 	srli	r2,r2,16
    a2f8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    a2fc:	00001406 	br	a350 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    a300:	e0bffc17 	ldw	r2,-16(fp)
    a304:	e0fffb17 	ldw	r3,-20(fp)
    a308:	18c00d17 	ldw	r3,52(r3)
    a30c:	e13ffb17 	ldw	r4,-20(fp)
    a310:	20c7883a 	add	r3,r4,r3
    a314:	18c20e04 	addi	r3,r3,2104
    a318:	18c00003 	ldbu	r3,0(r3)
    a31c:	18c03fcc 	andi	r3,r3,255
    a320:	18c0201c 	xori	r3,r3,128
    a324:	18ffe004 	addi	r3,r3,-128
    a328:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    a32c:	e0bffb17 	ldw	r2,-20(fp)
    a330:	10800d17 	ldw	r2,52(r2)
    a334:	10800044 	addi	r2,r2,1
    a338:	10c1ffcc 	andi	r3,r2,2047
    a33c:	e0bffb17 	ldw	r2,-20(fp)
    a340:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    a344:	e0bffa17 	ldw	r2,-24(fp)
    a348:	10bfffc4 	addi	r2,r2,-1
    a34c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    a350:	e0bffa17 	ldw	r2,-24(fp)
    a354:	10000526 	beq	r2,zero,a36c <altera_avalon_jtag_uart_irq+0x1a8>
    a358:	e0bffb17 	ldw	r2,-20(fp)
    a35c:	10c00d17 	ldw	r3,52(r2)
    a360:	e0bffb17 	ldw	r2,-20(fp)
    a364:	10800c17 	ldw	r2,48(r2)
    a368:	18bfe51e 	bne	r3,r2,a300 <_gp+0xffff4e88>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    a36c:	e0bffa17 	ldw	r2,-24(fp)
    a370:	103f9d26 	beq	r2,zero,a1e8 <_gp+0xffff4d70>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    a374:	e0bffb17 	ldw	r2,-20(fp)
    a378:	10c00817 	ldw	r3,32(r2)
    a37c:	00bfff44 	movi	r2,-3
    a380:	1886703a 	and	r3,r3,r2
    a384:	e0bffb17 	ldw	r2,-20(fp)
    a388:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    a38c:	e0bffb17 	ldw	r2,-20(fp)
    a390:	10800017 	ldw	r2,0(r2)
    a394:	10800104 	addi	r2,r2,4
    a398:	1007883a 	mov	r3,r2
    a39c:	e0bffb17 	ldw	r2,-20(fp)
    a3a0:	10800817 	ldw	r2,32(r2)
    a3a4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    a3a8:	e0bffc17 	ldw	r2,-16(fp)
    a3ac:	10800104 	addi	r2,r2,4
    a3b0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    a3b4:	003f8c06 	br	a1e8 <_gp+0xffff4d70>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    a3b8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    a3bc:	0001883a 	nop
    a3c0:	e037883a 	mov	sp,fp
    a3c4:	df000017 	ldw	fp,0(sp)
    a3c8:	dec00104 	addi	sp,sp,4
    a3cc:	f800283a 	ret

0000a3d0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    a3d0:	defff804 	addi	sp,sp,-32
    a3d4:	df000715 	stw	fp,28(sp)
    a3d8:	df000704 	addi	fp,sp,28
    a3dc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    a3e0:	e0bffb17 	ldw	r2,-20(fp)
    a3e4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    a3e8:	e0bff917 	ldw	r2,-28(fp)
    a3ec:	10800017 	ldw	r2,0(r2)
    a3f0:	10800104 	addi	r2,r2,4
    a3f4:	10800037 	ldwio	r2,0(r2)
    a3f8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    a3fc:	e0bffa17 	ldw	r2,-24(fp)
    a400:	1081000c 	andi	r2,r2,1024
    a404:	10000b26 	beq	r2,zero,a434 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    a408:	e0bff917 	ldw	r2,-28(fp)
    a40c:	10800017 	ldw	r2,0(r2)
    a410:	10800104 	addi	r2,r2,4
    a414:	1007883a 	mov	r3,r2
    a418:	e0bff917 	ldw	r2,-28(fp)
    a41c:	10800817 	ldw	r2,32(r2)
    a420:	10810014 	ori	r2,r2,1024
    a424:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    a428:	e0bff917 	ldw	r2,-28(fp)
    a42c:	10000915 	stw	zero,36(r2)
    a430:	00000a06 	br	a45c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    a434:	e0bff917 	ldw	r2,-28(fp)
    a438:	10c00917 	ldw	r3,36(r2)
    a43c:	00a00034 	movhi	r2,32768
    a440:	10bfff04 	addi	r2,r2,-4
    a444:	10c00536 	bltu	r2,r3,a45c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    a448:	e0bff917 	ldw	r2,-28(fp)
    a44c:	10800917 	ldw	r2,36(r2)
    a450:	10c00044 	addi	r3,r2,1
    a454:	e0bff917 	ldw	r2,-28(fp)
    a458:	10c00915 	stw	r3,36(r2)
    a45c:	d0a5b617 	ldw	r2,-26920(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    a460:	e037883a 	mov	sp,fp
    a464:	df000017 	ldw	fp,0(sp)
    a468:	dec00104 	addi	sp,sp,4
    a46c:	f800283a 	ret

0000a470 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    a470:	defffd04 	addi	sp,sp,-12
    a474:	df000215 	stw	fp,8(sp)
    a478:	df000204 	addi	fp,sp,8
    a47c:	e13ffe15 	stw	r4,-8(fp)
    a480:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    a484:	00000506 	br	a49c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    a488:	e0bfff17 	ldw	r2,-4(fp)
    a48c:	1090000c 	andi	r2,r2,16384
    a490:	10000226 	beq	r2,zero,a49c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    a494:	00bffd44 	movi	r2,-11
    a498:	00000b06 	br	a4c8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    a49c:	e0bffe17 	ldw	r2,-8(fp)
    a4a0:	10c00d17 	ldw	r3,52(r2)
    a4a4:	e0bffe17 	ldw	r2,-8(fp)
    a4a8:	10800c17 	ldw	r2,48(r2)
    a4ac:	18800526 	beq	r3,r2,a4c4 <altera_avalon_jtag_uart_close+0x54>
    a4b0:	e0bffe17 	ldw	r2,-8(fp)
    a4b4:	10c00917 	ldw	r3,36(r2)
    a4b8:	e0bffe17 	ldw	r2,-8(fp)
    a4bc:	10800117 	ldw	r2,4(r2)
    a4c0:	18bff136 	bltu	r3,r2,a488 <_gp+0xffff5010>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    a4c4:	0005883a 	mov	r2,zero
}
    a4c8:	e037883a 	mov	sp,fp
    a4cc:	df000017 	ldw	fp,0(sp)
    a4d0:	dec00104 	addi	sp,sp,4
    a4d4:	f800283a 	ret

0000a4d8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    a4d8:	defffa04 	addi	sp,sp,-24
    a4dc:	df000515 	stw	fp,20(sp)
    a4e0:	df000504 	addi	fp,sp,20
    a4e4:	e13ffd15 	stw	r4,-12(fp)
    a4e8:	e17ffe15 	stw	r5,-8(fp)
    a4ec:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    a4f0:	00bff9c4 	movi	r2,-25
    a4f4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    a4f8:	e0bffe17 	ldw	r2,-8(fp)
    a4fc:	10da8060 	cmpeqi	r3,r2,27137
    a500:	1800031e 	bne	r3,zero,a510 <altera_avalon_jtag_uart_ioctl+0x38>
    a504:	109a80a0 	cmpeqi	r2,r2,27138
    a508:	1000181e 	bne	r2,zero,a56c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    a50c:	00002906 	br	a5b4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    a510:	e0bffd17 	ldw	r2,-12(fp)
    a514:	10c00117 	ldw	r3,4(r2)
    a518:	00a00034 	movhi	r2,32768
    a51c:	10bfffc4 	addi	r2,r2,-1
    a520:	18802126 	beq	r3,r2,a5a8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    a524:	e0bfff17 	ldw	r2,-4(fp)
    a528:	10800017 	ldw	r2,0(r2)
    a52c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    a530:	e0bffc17 	ldw	r2,-16(fp)
    a534:	10800090 	cmplti	r2,r2,2
    a538:	1000061e 	bne	r2,zero,a554 <altera_avalon_jtag_uart_ioctl+0x7c>
    a53c:	e0fffc17 	ldw	r3,-16(fp)
    a540:	00a00034 	movhi	r2,32768
    a544:	10bfffc4 	addi	r2,r2,-1
    a548:	18800226 	beq	r3,r2,a554 <altera_avalon_jtag_uart_ioctl+0x7c>
    a54c:	e0bffc17 	ldw	r2,-16(fp)
    a550:	00000206 	br	a55c <altera_avalon_jtag_uart_ioctl+0x84>
    a554:	00a00034 	movhi	r2,32768
    a558:	10bfff84 	addi	r2,r2,-2
    a55c:	e0fffd17 	ldw	r3,-12(fp)
    a560:	18800115 	stw	r2,4(r3)
      rc = 0;
    a564:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    a568:	00000f06 	br	a5a8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    a56c:	e0bffd17 	ldw	r2,-12(fp)
    a570:	10c00117 	ldw	r3,4(r2)
    a574:	00a00034 	movhi	r2,32768
    a578:	10bfffc4 	addi	r2,r2,-1
    a57c:	18800c26 	beq	r3,r2,a5b0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    a580:	e0bffd17 	ldw	r2,-12(fp)
    a584:	10c00917 	ldw	r3,36(r2)
    a588:	e0bffd17 	ldw	r2,-12(fp)
    a58c:	10800117 	ldw	r2,4(r2)
    a590:	1885803a 	cmpltu	r2,r3,r2
    a594:	10c03fcc 	andi	r3,r2,255
    a598:	e0bfff17 	ldw	r2,-4(fp)
    a59c:	10c00015 	stw	r3,0(r2)
      rc = 0;
    a5a0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    a5a4:	00000206 	br	a5b0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    a5a8:	0001883a 	nop
    a5ac:	00000106 	br	a5b4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    a5b0:	0001883a 	nop

  default:
    break;
  }

  return rc;
    a5b4:	e0bffb17 	ldw	r2,-20(fp)
}
    a5b8:	e037883a 	mov	sp,fp
    a5bc:	df000017 	ldw	fp,0(sp)
    a5c0:	dec00104 	addi	sp,sp,4
    a5c4:	f800283a 	ret

0000a5c8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    a5c8:	defff304 	addi	sp,sp,-52
    a5cc:	dfc00c15 	stw	ra,48(sp)
    a5d0:	df000b15 	stw	fp,44(sp)
    a5d4:	df000b04 	addi	fp,sp,44
    a5d8:	e13ffc15 	stw	r4,-16(fp)
    a5dc:	e17ffd15 	stw	r5,-12(fp)
    a5e0:	e1bffe15 	stw	r6,-8(fp)
    a5e4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    a5e8:	e0bffd17 	ldw	r2,-12(fp)
    a5ec:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    a5f0:	00004706 	br	a710 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    a5f4:	e0bffc17 	ldw	r2,-16(fp)
    a5f8:	10800a17 	ldw	r2,40(r2)
    a5fc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    a600:	e0bffc17 	ldw	r2,-16(fp)
    a604:	10800b17 	ldw	r2,44(r2)
    a608:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    a60c:	e0fff717 	ldw	r3,-36(fp)
    a610:	e0bff817 	ldw	r2,-32(fp)
    a614:	18800536 	bltu	r3,r2,a62c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    a618:	e0fff717 	ldw	r3,-36(fp)
    a61c:	e0bff817 	ldw	r2,-32(fp)
    a620:	1885c83a 	sub	r2,r3,r2
    a624:	e0bff615 	stw	r2,-40(fp)
    a628:	00000406 	br	a63c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    a62c:	00c20004 	movi	r3,2048
    a630:	e0bff817 	ldw	r2,-32(fp)
    a634:	1885c83a 	sub	r2,r3,r2
    a638:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    a63c:	e0bff617 	ldw	r2,-40(fp)
    a640:	10001e26 	beq	r2,zero,a6bc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    a644:	e0fffe17 	ldw	r3,-8(fp)
    a648:	e0bff617 	ldw	r2,-40(fp)
    a64c:	1880022e 	bgeu	r3,r2,a658 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    a650:	e0bffe17 	ldw	r2,-8(fp)
    a654:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    a658:	e0bffc17 	ldw	r2,-16(fp)
    a65c:	10c00e04 	addi	r3,r2,56
    a660:	e0bff817 	ldw	r2,-32(fp)
    a664:	1885883a 	add	r2,r3,r2
    a668:	e1bff617 	ldw	r6,-40(fp)
    a66c:	100b883a 	mov	r5,r2
    a670:	e13ff517 	ldw	r4,-44(fp)
    a674:	000b8440 	call	b844 <memcpy>
      ptr   += n;
    a678:	e0fff517 	ldw	r3,-44(fp)
    a67c:	e0bff617 	ldw	r2,-40(fp)
    a680:	1885883a 	add	r2,r3,r2
    a684:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    a688:	e0fffe17 	ldw	r3,-8(fp)
    a68c:	e0bff617 	ldw	r2,-40(fp)
    a690:	1885c83a 	sub	r2,r3,r2
    a694:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    a698:	e0fff817 	ldw	r3,-32(fp)
    a69c:	e0bff617 	ldw	r2,-40(fp)
    a6a0:	1885883a 	add	r2,r3,r2
    a6a4:	10c1ffcc 	andi	r3,r2,2047
    a6a8:	e0bffc17 	ldw	r2,-16(fp)
    a6ac:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    a6b0:	e0bffe17 	ldw	r2,-8(fp)
    a6b4:	00bfcf16 	blt	zero,r2,a5f4 <_gp+0xffff517c>
    a6b8:	00000106 	br	a6c0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    a6bc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    a6c0:	e0fff517 	ldw	r3,-44(fp)
    a6c4:	e0bffd17 	ldw	r2,-12(fp)
    a6c8:	1880141e 	bne	r3,r2,a71c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    a6cc:	e0bfff17 	ldw	r2,-4(fp)
    a6d0:	1090000c 	andi	r2,r2,16384
    a6d4:	1000131e 	bne	r2,zero,a724 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    a6d8:	0001883a 	nop
    a6dc:	e0bffc17 	ldw	r2,-16(fp)
    a6e0:	10c00a17 	ldw	r3,40(r2)
    a6e4:	e0bff717 	ldw	r2,-36(fp)
    a6e8:	1880051e 	bne	r3,r2,a700 <altera_avalon_jtag_uart_read+0x138>
    a6ec:	e0bffc17 	ldw	r2,-16(fp)
    a6f0:	10c00917 	ldw	r3,36(r2)
    a6f4:	e0bffc17 	ldw	r2,-16(fp)
    a6f8:	10800117 	ldw	r2,4(r2)
    a6fc:	18bff736 	bltu	r3,r2,a6dc <_gp+0xffff5264>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    a700:	e0bffc17 	ldw	r2,-16(fp)
    a704:	10c00a17 	ldw	r3,40(r2)
    a708:	e0bff717 	ldw	r2,-36(fp)
    a70c:	18800726 	beq	r3,r2,a72c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    a710:	e0bffe17 	ldw	r2,-8(fp)
    a714:	00bfb716 	blt	zero,r2,a5f4 <_gp+0xffff517c>
    a718:	00000506 	br	a730 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    a71c:	0001883a 	nop
    a720:	00000306 	br	a730 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    a724:	0001883a 	nop
    a728:	00000106 	br	a730 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    a72c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    a730:	e0fff517 	ldw	r3,-44(fp)
    a734:	e0bffd17 	ldw	r2,-12(fp)
    a738:	18801826 	beq	r3,r2,a79c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a73c:	0005303a 	rdctl	r2,status
    a740:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a744:	e0fffb17 	ldw	r3,-20(fp)
    a748:	00bfff84 	movi	r2,-2
    a74c:	1884703a 	and	r2,r3,r2
    a750:	1001703a 	wrctl	status,r2
  
  return context;
    a754:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    a758:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    a75c:	e0bffc17 	ldw	r2,-16(fp)
    a760:	10800817 	ldw	r2,32(r2)
    a764:	10c00054 	ori	r3,r2,1
    a768:	e0bffc17 	ldw	r2,-16(fp)
    a76c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    a770:	e0bffc17 	ldw	r2,-16(fp)
    a774:	10800017 	ldw	r2,0(r2)
    a778:	10800104 	addi	r2,r2,4
    a77c:	1007883a 	mov	r3,r2
    a780:	e0bffc17 	ldw	r2,-16(fp)
    a784:	10800817 	ldw	r2,32(r2)
    a788:	18800035 	stwio	r2,0(r3)
    a78c:	e0bffa17 	ldw	r2,-24(fp)
    a790:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a794:	e0bff917 	ldw	r2,-28(fp)
    a798:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    a79c:	e0fff517 	ldw	r3,-44(fp)
    a7a0:	e0bffd17 	ldw	r2,-12(fp)
    a7a4:	18800426 	beq	r3,r2,a7b8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    a7a8:	e0fff517 	ldw	r3,-44(fp)
    a7ac:	e0bffd17 	ldw	r2,-12(fp)
    a7b0:	1885c83a 	sub	r2,r3,r2
    a7b4:	00000606 	br	a7d0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    a7b8:	e0bfff17 	ldw	r2,-4(fp)
    a7bc:	1090000c 	andi	r2,r2,16384
    a7c0:	10000226 	beq	r2,zero,a7cc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    a7c4:	00bffd44 	movi	r2,-11
    a7c8:	00000106 	br	a7d0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    a7cc:	00bffec4 	movi	r2,-5
}
    a7d0:	e037883a 	mov	sp,fp
    a7d4:	dfc00117 	ldw	ra,4(sp)
    a7d8:	df000017 	ldw	fp,0(sp)
    a7dc:	dec00204 	addi	sp,sp,8
    a7e0:	f800283a 	ret

0000a7e4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    a7e4:	defff304 	addi	sp,sp,-52
    a7e8:	dfc00c15 	stw	ra,48(sp)
    a7ec:	df000b15 	stw	fp,44(sp)
    a7f0:	df000b04 	addi	fp,sp,44
    a7f4:	e13ffc15 	stw	r4,-16(fp)
    a7f8:	e17ffd15 	stw	r5,-12(fp)
    a7fc:	e1bffe15 	stw	r6,-8(fp)
    a800:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    a804:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    a808:	e0bffd17 	ldw	r2,-12(fp)
    a80c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    a810:	00003706 	br	a8f0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    a814:	e0bffc17 	ldw	r2,-16(fp)
    a818:	10800c17 	ldw	r2,48(r2)
    a81c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    a820:	e0bffc17 	ldw	r2,-16(fp)
    a824:	10800d17 	ldw	r2,52(r2)
    a828:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    a82c:	e0fff917 	ldw	r3,-28(fp)
    a830:	e0bff517 	ldw	r2,-44(fp)
    a834:	1880062e 	bgeu	r3,r2,a850 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    a838:	e0fff517 	ldw	r3,-44(fp)
    a83c:	e0bff917 	ldw	r2,-28(fp)
    a840:	1885c83a 	sub	r2,r3,r2
    a844:	10bfffc4 	addi	r2,r2,-1
    a848:	e0bff615 	stw	r2,-40(fp)
    a84c:	00000b06 	br	a87c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    a850:	e0bff517 	ldw	r2,-44(fp)
    a854:	10000526 	beq	r2,zero,a86c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    a858:	00c20004 	movi	r3,2048
    a85c:	e0bff917 	ldw	r2,-28(fp)
    a860:	1885c83a 	sub	r2,r3,r2
    a864:	e0bff615 	stw	r2,-40(fp)
    a868:	00000406 	br	a87c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    a86c:	00c1ffc4 	movi	r3,2047
    a870:	e0bff917 	ldw	r2,-28(fp)
    a874:	1885c83a 	sub	r2,r3,r2
    a878:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    a87c:	e0bff617 	ldw	r2,-40(fp)
    a880:	10001e26 	beq	r2,zero,a8fc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    a884:	e0fffe17 	ldw	r3,-8(fp)
    a888:	e0bff617 	ldw	r2,-40(fp)
    a88c:	1880022e 	bgeu	r3,r2,a898 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    a890:	e0bffe17 	ldw	r2,-8(fp)
    a894:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    a898:	e0bffc17 	ldw	r2,-16(fp)
    a89c:	10c20e04 	addi	r3,r2,2104
    a8a0:	e0bff917 	ldw	r2,-28(fp)
    a8a4:	1885883a 	add	r2,r3,r2
    a8a8:	e1bff617 	ldw	r6,-40(fp)
    a8ac:	e17ffd17 	ldw	r5,-12(fp)
    a8b0:	1009883a 	mov	r4,r2
    a8b4:	000b8440 	call	b844 <memcpy>
      ptr   += n;
    a8b8:	e0fffd17 	ldw	r3,-12(fp)
    a8bc:	e0bff617 	ldw	r2,-40(fp)
    a8c0:	1885883a 	add	r2,r3,r2
    a8c4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    a8c8:	e0fffe17 	ldw	r3,-8(fp)
    a8cc:	e0bff617 	ldw	r2,-40(fp)
    a8d0:	1885c83a 	sub	r2,r3,r2
    a8d4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    a8d8:	e0fff917 	ldw	r3,-28(fp)
    a8dc:	e0bff617 	ldw	r2,-40(fp)
    a8e0:	1885883a 	add	r2,r3,r2
    a8e4:	10c1ffcc 	andi	r3,r2,2047
    a8e8:	e0bffc17 	ldw	r2,-16(fp)
    a8ec:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    a8f0:	e0bffe17 	ldw	r2,-8(fp)
    a8f4:	00bfc716 	blt	zero,r2,a814 <_gp+0xffff539c>
    a8f8:	00000106 	br	a900 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    a8fc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a900:	0005303a 	rdctl	r2,status
    a904:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a908:	e0fffb17 	ldw	r3,-20(fp)
    a90c:	00bfff84 	movi	r2,-2
    a910:	1884703a 	and	r2,r3,r2
    a914:	1001703a 	wrctl	status,r2
  
  return context;
    a918:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    a91c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    a920:	e0bffc17 	ldw	r2,-16(fp)
    a924:	10800817 	ldw	r2,32(r2)
    a928:	10c00094 	ori	r3,r2,2
    a92c:	e0bffc17 	ldw	r2,-16(fp)
    a930:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    a934:	e0bffc17 	ldw	r2,-16(fp)
    a938:	10800017 	ldw	r2,0(r2)
    a93c:	10800104 	addi	r2,r2,4
    a940:	1007883a 	mov	r3,r2
    a944:	e0bffc17 	ldw	r2,-16(fp)
    a948:	10800817 	ldw	r2,32(r2)
    a94c:	18800035 	stwio	r2,0(r3)
    a950:	e0bffa17 	ldw	r2,-24(fp)
    a954:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a958:	e0bff817 	ldw	r2,-32(fp)
    a95c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    a960:	e0bffe17 	ldw	r2,-8(fp)
    a964:	0080100e 	bge	zero,r2,a9a8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    a968:	e0bfff17 	ldw	r2,-4(fp)
    a96c:	1090000c 	andi	r2,r2,16384
    a970:	1000101e 	bne	r2,zero,a9b4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    a974:	0001883a 	nop
    a978:	e0bffc17 	ldw	r2,-16(fp)
    a97c:	10c00d17 	ldw	r3,52(r2)
    a980:	e0bff517 	ldw	r2,-44(fp)
    a984:	1880051e 	bne	r3,r2,a99c <altera_avalon_jtag_uart_write+0x1b8>
    a988:	e0bffc17 	ldw	r2,-16(fp)
    a98c:	10c00917 	ldw	r3,36(r2)
    a990:	e0bffc17 	ldw	r2,-16(fp)
    a994:	10800117 	ldw	r2,4(r2)
    a998:	18bff736 	bltu	r3,r2,a978 <_gp+0xffff5500>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    a99c:	e0bffc17 	ldw	r2,-16(fp)
    a9a0:	10800917 	ldw	r2,36(r2)
    a9a4:	1000051e 	bne	r2,zero,a9bc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    a9a8:	e0bffe17 	ldw	r2,-8(fp)
    a9ac:	00bfd016 	blt	zero,r2,a8f0 <_gp+0xffff5478>
    a9b0:	00000306 	br	a9c0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    a9b4:	0001883a 	nop
    a9b8:	00000106 	br	a9c0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    a9bc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    a9c0:	e0fffd17 	ldw	r3,-12(fp)
    a9c4:	e0bff717 	ldw	r2,-36(fp)
    a9c8:	18800426 	beq	r3,r2,a9dc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    a9cc:	e0fffd17 	ldw	r3,-12(fp)
    a9d0:	e0bff717 	ldw	r2,-36(fp)
    a9d4:	1885c83a 	sub	r2,r3,r2
    a9d8:	00000606 	br	a9f4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    a9dc:	e0bfff17 	ldw	r2,-4(fp)
    a9e0:	1090000c 	andi	r2,r2,16384
    a9e4:	10000226 	beq	r2,zero,a9f0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    a9e8:	00bffd44 	movi	r2,-11
    a9ec:	00000106 	br	a9f4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    a9f0:	00bffec4 	movi	r2,-5
}
    a9f4:	e037883a 	mov	sp,fp
    a9f8:	dfc00117 	ldw	ra,4(sp)
    a9fc:	df000017 	ldw	fp,0(sp)
    aa00:	dec00204 	addi	sp,sp,8
    aa04:	f800283a 	ret

0000aa08 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    aa08:	defff504 	addi	sp,sp,-44
    aa0c:	df000a15 	stw	fp,40(sp)
    aa10:	df000a04 	addi	fp,sp,40
    aa14:	e13ffc15 	stw	r4,-16(fp)
    aa18:	e17ffd15 	stw	r5,-12(fp)
    aa1c:	e1bffe15 	stw	r6,-8(fp)
    aa20:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    aa24:	e03ff615 	stw	zero,-40(fp)
    aa28:	d0a5b617 	ldw	r2,-26920(gp)
  
  if (alt_ticks_per_second ())
    aa2c:	10003c26 	beq	r2,zero,ab20 <alt_alarm_start+0x118>
  {
    if (alarm)
    aa30:	e0bffc17 	ldw	r2,-16(fp)
    aa34:	10003826 	beq	r2,zero,ab18 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    aa38:	e0bffc17 	ldw	r2,-16(fp)
    aa3c:	e0fffe17 	ldw	r3,-8(fp)
    aa40:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    aa44:	e0bffc17 	ldw	r2,-16(fp)
    aa48:	e0ffff17 	ldw	r3,-4(fp)
    aa4c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    aa50:	0005303a 	rdctl	r2,status
    aa54:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    aa58:	e0fff917 	ldw	r3,-28(fp)
    aa5c:	00bfff84 	movi	r2,-2
    aa60:	1884703a 	and	r2,r3,r2
    aa64:	1001703a 	wrctl	status,r2
  
  return context;
    aa68:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    aa6c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    aa70:	d0a5b717 	ldw	r2,-26916(gp)
      
      current_nticks = alt_nticks();
    aa74:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    aa78:	e0fffd17 	ldw	r3,-12(fp)
    aa7c:	e0bff617 	ldw	r2,-40(fp)
    aa80:	1885883a 	add	r2,r3,r2
    aa84:	10c00044 	addi	r3,r2,1
    aa88:	e0bffc17 	ldw	r2,-16(fp)
    aa8c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    aa90:	e0bffc17 	ldw	r2,-16(fp)
    aa94:	10c00217 	ldw	r3,8(r2)
    aa98:	e0bff617 	ldw	r2,-40(fp)
    aa9c:	1880042e 	bgeu	r3,r2,aab0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    aaa0:	e0bffc17 	ldw	r2,-16(fp)
    aaa4:	00c00044 	movi	r3,1
    aaa8:	10c00405 	stb	r3,16(r2)
    aaac:	00000206 	br	aab8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    aab0:	e0bffc17 	ldw	r2,-16(fp)
    aab4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    aab8:	e0bffc17 	ldw	r2,-16(fp)
    aabc:	d0e00c04 	addi	r3,gp,-32720
    aac0:	e0fffa15 	stw	r3,-24(fp)
    aac4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    aac8:	e0bffb17 	ldw	r2,-20(fp)
    aacc:	e0fffa17 	ldw	r3,-24(fp)
    aad0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    aad4:	e0bffa17 	ldw	r2,-24(fp)
    aad8:	10c00017 	ldw	r3,0(r2)
    aadc:	e0bffb17 	ldw	r2,-20(fp)
    aae0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    aae4:	e0bffa17 	ldw	r2,-24(fp)
    aae8:	10800017 	ldw	r2,0(r2)
    aaec:	e0fffb17 	ldw	r3,-20(fp)
    aaf0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    aaf4:	e0bffa17 	ldw	r2,-24(fp)
    aaf8:	e0fffb17 	ldw	r3,-20(fp)
    aafc:	10c00015 	stw	r3,0(r2)
    ab00:	e0bff817 	ldw	r2,-32(fp)
    ab04:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ab08:	e0bff717 	ldw	r2,-36(fp)
    ab0c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    ab10:	0005883a 	mov	r2,zero
    ab14:	00000306 	br	ab24 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    ab18:	00bffa84 	movi	r2,-22
    ab1c:	00000106 	br	ab24 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    ab20:	00bfde84 	movi	r2,-134
  }
}
    ab24:	e037883a 	mov	sp,fp
    ab28:	df000017 	ldw	fp,0(sp)
    ab2c:	dec00104 	addi	sp,sp,4
    ab30:	f800283a 	ret

0000ab34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ab34:	defffe04 	addi	sp,sp,-8
    ab38:	dfc00115 	stw	ra,4(sp)
    ab3c:	df000015 	stw	fp,0(sp)
    ab40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ab44:	d0a00b17 	ldw	r2,-32724(gp)
    ab48:	10000326 	beq	r2,zero,ab58 <alt_get_errno+0x24>
    ab4c:	d0a00b17 	ldw	r2,-32724(gp)
    ab50:	103ee83a 	callr	r2
    ab54:	00000106 	br	ab5c <alt_get_errno+0x28>
    ab58:	d0a5b804 	addi	r2,gp,-26912
}
    ab5c:	e037883a 	mov	sp,fp
    ab60:	dfc00117 	ldw	ra,4(sp)
    ab64:	df000017 	ldw	fp,0(sp)
    ab68:	dec00204 	addi	sp,sp,8
    ab6c:	f800283a 	ret

0000ab70 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    ab70:	defffb04 	addi	sp,sp,-20
    ab74:	dfc00415 	stw	ra,16(sp)
    ab78:	df000315 	stw	fp,12(sp)
    ab7c:	df000304 	addi	fp,sp,12
    ab80:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    ab84:	e0bfff17 	ldw	r2,-4(fp)
    ab88:	10000816 	blt	r2,zero,abac <close+0x3c>
    ab8c:	01400304 	movi	r5,12
    ab90:	e13fff17 	ldw	r4,-4(fp)
    ab94:	0009ab80 	call	9ab8 <__mulsi3>
    ab98:	1007883a 	mov	r3,r2
    ab9c:	00800074 	movhi	r2,1
    aba0:	10b3b504 	addi	r2,r2,-12588
    aba4:	1885883a 	add	r2,r3,r2
    aba8:	00000106 	br	abb0 <close+0x40>
    abac:	0005883a 	mov	r2,zero
    abb0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    abb4:	e0bffd17 	ldw	r2,-12(fp)
    abb8:	10001926 	beq	r2,zero,ac20 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    abbc:	e0bffd17 	ldw	r2,-12(fp)
    abc0:	10800017 	ldw	r2,0(r2)
    abc4:	10800417 	ldw	r2,16(r2)
    abc8:	10000626 	beq	r2,zero,abe4 <close+0x74>
    abcc:	e0bffd17 	ldw	r2,-12(fp)
    abd0:	10800017 	ldw	r2,0(r2)
    abd4:	10800417 	ldw	r2,16(r2)
    abd8:	e13ffd17 	ldw	r4,-12(fp)
    abdc:	103ee83a 	callr	r2
    abe0:	00000106 	br	abe8 <close+0x78>
    abe4:	0005883a 	mov	r2,zero
    abe8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    abec:	e13fff17 	ldw	r4,-4(fp)
    abf0:	000b2d40 	call	b2d4 <alt_release_fd>
    if (rval < 0)
    abf4:	e0bffe17 	ldw	r2,-8(fp)
    abf8:	1000070e 	bge	r2,zero,ac18 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    abfc:	000ab340 	call	ab34 <alt_get_errno>
    ac00:	1007883a 	mov	r3,r2
    ac04:	e0bffe17 	ldw	r2,-8(fp)
    ac08:	0085c83a 	sub	r2,zero,r2
    ac0c:	18800015 	stw	r2,0(r3)
      return -1;
    ac10:	00bfffc4 	movi	r2,-1
    ac14:	00000706 	br	ac34 <close+0xc4>
    }
    return 0;
    ac18:	0005883a 	mov	r2,zero
    ac1c:	00000506 	br	ac34 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ac20:	000ab340 	call	ab34 <alt_get_errno>
    ac24:	1007883a 	mov	r3,r2
    ac28:	00801444 	movi	r2,81
    ac2c:	18800015 	stw	r2,0(r3)
    return -1;
    ac30:	00bfffc4 	movi	r2,-1
  }
}
    ac34:	e037883a 	mov	sp,fp
    ac38:	dfc00117 	ldw	ra,4(sp)
    ac3c:	df000017 	ldw	fp,0(sp)
    ac40:	dec00204 	addi	sp,sp,8
    ac44:	f800283a 	ret

0000ac48 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    ac48:	deffff04 	addi	sp,sp,-4
    ac4c:	df000015 	stw	fp,0(sp)
    ac50:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    ac54:	0001883a 	nop
    ac58:	e037883a 	mov	sp,fp
    ac5c:	df000017 	ldw	fp,0(sp)
    ac60:	dec00104 	addi	sp,sp,4
    ac64:	f800283a 	ret

0000ac68 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    ac68:	defffc04 	addi	sp,sp,-16
    ac6c:	df000315 	stw	fp,12(sp)
    ac70:	df000304 	addi	fp,sp,12
    ac74:	e13ffd15 	stw	r4,-12(fp)
    ac78:	e17ffe15 	stw	r5,-8(fp)
    ac7c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    ac80:	e0bfff17 	ldw	r2,-4(fp)
}
    ac84:	e037883a 	mov	sp,fp
    ac88:	df000017 	ldw	fp,0(sp)
    ac8c:	dec00104 	addi	sp,sp,4
    ac90:	f800283a 	ret

0000ac94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ac94:	defffe04 	addi	sp,sp,-8
    ac98:	dfc00115 	stw	ra,4(sp)
    ac9c:	df000015 	stw	fp,0(sp)
    aca0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    aca4:	d0a00b17 	ldw	r2,-32724(gp)
    aca8:	10000326 	beq	r2,zero,acb8 <alt_get_errno+0x24>
    acac:	d0a00b17 	ldw	r2,-32724(gp)
    acb0:	103ee83a 	callr	r2
    acb4:	00000106 	br	acbc <alt_get_errno+0x28>
    acb8:	d0a5b804 	addi	r2,gp,-26912
}
    acbc:	e037883a 	mov	sp,fp
    acc0:	dfc00117 	ldw	ra,4(sp)
    acc4:	df000017 	ldw	fp,0(sp)
    acc8:	dec00204 	addi	sp,sp,8
    accc:	f800283a 	ret

0000acd0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    acd0:	defffa04 	addi	sp,sp,-24
    acd4:	dfc00515 	stw	ra,20(sp)
    acd8:	df000415 	stw	fp,16(sp)
    acdc:	df000404 	addi	fp,sp,16
    ace0:	e13ffe15 	stw	r4,-8(fp)
    ace4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    ace8:	e0bffe17 	ldw	r2,-8(fp)
    acec:	10000326 	beq	r2,zero,acfc <alt_dev_llist_insert+0x2c>
    acf0:	e0bffe17 	ldw	r2,-8(fp)
    acf4:	10800217 	ldw	r2,8(r2)
    acf8:	1000061e 	bne	r2,zero,ad14 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    acfc:	000ac940 	call	ac94 <alt_get_errno>
    ad00:	1007883a 	mov	r3,r2
    ad04:	00800584 	movi	r2,22
    ad08:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    ad0c:	00bffa84 	movi	r2,-22
    ad10:	00001306 	br	ad60 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    ad14:	e0bffe17 	ldw	r2,-8(fp)
    ad18:	e0ffff17 	ldw	r3,-4(fp)
    ad1c:	e0fffc15 	stw	r3,-16(fp)
    ad20:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    ad24:	e0bffd17 	ldw	r2,-12(fp)
    ad28:	e0fffc17 	ldw	r3,-16(fp)
    ad2c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    ad30:	e0bffc17 	ldw	r2,-16(fp)
    ad34:	10c00017 	ldw	r3,0(r2)
    ad38:	e0bffd17 	ldw	r2,-12(fp)
    ad3c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    ad40:	e0bffc17 	ldw	r2,-16(fp)
    ad44:	10800017 	ldw	r2,0(r2)
    ad48:	e0fffd17 	ldw	r3,-12(fp)
    ad4c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    ad50:	e0bffc17 	ldw	r2,-16(fp)
    ad54:	e0fffd17 	ldw	r3,-12(fp)
    ad58:	10c00015 	stw	r3,0(r2)

  return 0;  
    ad5c:	0005883a 	mov	r2,zero
}
    ad60:	e037883a 	mov	sp,fp
    ad64:	dfc00117 	ldw	ra,4(sp)
    ad68:	df000017 	ldw	fp,0(sp)
    ad6c:	dec00204 	addi	sp,sp,8
    ad70:	f800283a 	ret

0000ad74 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    ad74:	defffd04 	addi	sp,sp,-12
    ad78:	dfc00215 	stw	ra,8(sp)
    ad7c:	df000115 	stw	fp,4(sp)
    ad80:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    ad84:	00800074 	movhi	r2,1
    ad88:	10af3b04 	addi	r2,r2,-17172
    ad8c:	e0bfff15 	stw	r2,-4(fp)
    ad90:	00000606 	br	adac <_do_ctors+0x38>
        (*ctor) (); 
    ad94:	e0bfff17 	ldw	r2,-4(fp)
    ad98:	10800017 	ldw	r2,0(r2)
    ad9c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    ada0:	e0bfff17 	ldw	r2,-4(fp)
    ada4:	10bfff04 	addi	r2,r2,-4
    ada8:	e0bfff15 	stw	r2,-4(fp)
    adac:	e0ffff17 	ldw	r3,-4(fp)
    adb0:	00800074 	movhi	r2,1
    adb4:	10af3c04 	addi	r2,r2,-17168
    adb8:	18bff62e 	bgeu	r3,r2,ad94 <_gp+0xffff591c>
        (*ctor) (); 
}
    adbc:	0001883a 	nop
    adc0:	e037883a 	mov	sp,fp
    adc4:	dfc00117 	ldw	ra,4(sp)
    adc8:	df000017 	ldw	fp,0(sp)
    adcc:	dec00204 	addi	sp,sp,8
    add0:	f800283a 	ret

0000add4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    add4:	defffd04 	addi	sp,sp,-12
    add8:	dfc00215 	stw	ra,8(sp)
    addc:	df000115 	stw	fp,4(sp)
    ade0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    ade4:	00800074 	movhi	r2,1
    ade8:	10af3b04 	addi	r2,r2,-17172
    adec:	e0bfff15 	stw	r2,-4(fp)
    adf0:	00000606 	br	ae0c <_do_dtors+0x38>
        (*dtor) (); 
    adf4:	e0bfff17 	ldw	r2,-4(fp)
    adf8:	10800017 	ldw	r2,0(r2)
    adfc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    ae00:	e0bfff17 	ldw	r2,-4(fp)
    ae04:	10bfff04 	addi	r2,r2,-4
    ae08:	e0bfff15 	stw	r2,-4(fp)
    ae0c:	e0ffff17 	ldw	r3,-4(fp)
    ae10:	00800074 	movhi	r2,1
    ae14:	10af3c04 	addi	r2,r2,-17168
    ae18:	18bff62e 	bgeu	r3,r2,adf4 <_gp+0xffff597c>
        (*dtor) (); 
}
    ae1c:	0001883a 	nop
    ae20:	e037883a 	mov	sp,fp
    ae24:	dfc00117 	ldw	ra,4(sp)
    ae28:	df000017 	ldw	fp,0(sp)
    ae2c:	dec00204 	addi	sp,sp,8
    ae30:	f800283a 	ret

0000ae34 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    ae34:	deffff04 	addi	sp,sp,-4
    ae38:	df000015 	stw	fp,0(sp)
    ae3c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    ae40:	0001883a 	nop
    ae44:	e037883a 	mov	sp,fp
    ae48:	df000017 	ldw	fp,0(sp)
    ae4c:	dec00104 	addi	sp,sp,4
    ae50:	f800283a 	ret

0000ae54 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    ae54:	defffe04 	addi	sp,sp,-8
    ae58:	df000115 	stw	fp,4(sp)
    ae5c:	df000104 	addi	fp,sp,4
    ae60:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    ae64:	e0bfff17 	ldw	r2,-4(fp)
    ae68:	10bffe84 	addi	r2,r2,-6
    ae6c:	10c00428 	cmpgeui	r3,r2,16
    ae70:	18001a1e 	bne	r3,zero,aedc <alt_exception_cause_generated_bad_addr+0x88>
    ae74:	100690ba 	slli	r3,r2,2
    ae78:	00800074 	movhi	r2,1
    ae7c:	10aba304 	addi	r2,r2,-20852
    ae80:	1885883a 	add	r2,r3,r2
    ae84:	10800017 	ldw	r2,0(r2)
    ae88:	1000683a 	jmp	r2
    ae8c:	0000aecc 	andi	zero,zero,699
    ae90:	0000aecc 	andi	zero,zero,699
    ae94:	0000aedc 	xori	zero,zero,699
    ae98:	0000aedc 	xori	zero,zero,699
    ae9c:	0000aedc 	xori	zero,zero,699
    aea0:	0000aecc 	andi	zero,zero,699
    aea4:	0000aed4 	movui	zero,699
    aea8:	0000aedc 	xori	zero,zero,699
    aeac:	0000aecc 	andi	zero,zero,699
    aeb0:	0000aecc 	andi	zero,zero,699
    aeb4:	0000aedc 	xori	zero,zero,699
    aeb8:	0000aecc 	andi	zero,zero,699
    aebc:	0000aed4 	movui	zero,699
    aec0:	0000aedc 	xori	zero,zero,699
    aec4:	0000aedc 	xori	zero,zero,699
    aec8:	0000aecc 	andi	zero,zero,699
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    aecc:	00800044 	movi	r2,1
    aed0:	00000306 	br	aee0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    aed4:	0005883a 	mov	r2,zero
    aed8:	00000106 	br	aee0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    aedc:	0005883a 	mov	r2,zero
  }
}
    aee0:	e037883a 	mov	sp,fp
    aee4:	df000017 	ldw	fp,0(sp)
    aee8:	dec00104 	addi	sp,sp,4
    aeec:	f800283a 	ret

0000aef0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    aef0:	defff804 	addi	sp,sp,-32
    aef4:	dfc00715 	stw	ra,28(sp)
    aef8:	df000615 	stw	fp,24(sp)
    aefc:	dc000515 	stw	r16,20(sp)
    af00:	df000604 	addi	fp,sp,24
    af04:	e13ffb15 	stw	r4,-20(fp)
    af08:	e17ffc15 	stw	r5,-16(fp)
    af0c:	e1bffd15 	stw	r6,-12(fp)
    af10:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    af14:	e1bffe17 	ldw	r6,-8(fp)
    af18:	e17ffd17 	ldw	r5,-12(fp)
    af1c:	e13ffc17 	ldw	r4,-16(fp)
    af20:	000b1780 	call	b178 <open>
    af24:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    af28:	e0bffa17 	ldw	r2,-24(fp)
    af2c:	10002216 	blt	r2,zero,afb8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    af30:	04000074 	movhi	r16,1
    af34:	8433b504 	addi	r16,r16,-12588
    af38:	e0bffa17 	ldw	r2,-24(fp)
    af3c:	01400304 	movi	r5,12
    af40:	1009883a 	mov	r4,r2
    af44:	0009ab80 	call	9ab8 <__mulsi3>
    af48:	8085883a 	add	r2,r16,r2
    af4c:	10c00017 	ldw	r3,0(r2)
    af50:	e0bffb17 	ldw	r2,-20(fp)
    af54:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    af58:	04000074 	movhi	r16,1
    af5c:	8433b504 	addi	r16,r16,-12588
    af60:	e0bffa17 	ldw	r2,-24(fp)
    af64:	01400304 	movi	r5,12
    af68:	1009883a 	mov	r4,r2
    af6c:	0009ab80 	call	9ab8 <__mulsi3>
    af70:	8085883a 	add	r2,r16,r2
    af74:	10800104 	addi	r2,r2,4
    af78:	10c00017 	ldw	r3,0(r2)
    af7c:	e0bffb17 	ldw	r2,-20(fp)
    af80:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    af84:	04000074 	movhi	r16,1
    af88:	8433b504 	addi	r16,r16,-12588
    af8c:	e0bffa17 	ldw	r2,-24(fp)
    af90:	01400304 	movi	r5,12
    af94:	1009883a 	mov	r4,r2
    af98:	0009ab80 	call	9ab8 <__mulsi3>
    af9c:	8085883a 	add	r2,r16,r2
    afa0:	10800204 	addi	r2,r2,8
    afa4:	10c00017 	ldw	r3,0(r2)
    afa8:	e0bffb17 	ldw	r2,-20(fp)
    afac:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    afb0:	e13ffa17 	ldw	r4,-24(fp)
    afb4:	000b2d40 	call	b2d4 <alt_release_fd>
  }
} 
    afb8:	0001883a 	nop
    afbc:	e6ffff04 	addi	sp,fp,-4
    afc0:	dfc00217 	ldw	ra,8(sp)
    afc4:	df000117 	ldw	fp,4(sp)
    afc8:	dc000017 	ldw	r16,0(sp)
    afcc:	dec00304 	addi	sp,sp,12
    afd0:	f800283a 	ret

0000afd4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    afd4:	defffb04 	addi	sp,sp,-20
    afd8:	dfc00415 	stw	ra,16(sp)
    afdc:	df000315 	stw	fp,12(sp)
    afe0:	df000304 	addi	fp,sp,12
    afe4:	e13ffd15 	stw	r4,-12(fp)
    afe8:	e17ffe15 	stw	r5,-8(fp)
    afec:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    aff0:	01c07fc4 	movi	r7,511
    aff4:	01800044 	movi	r6,1
    aff8:	e17ffd17 	ldw	r5,-12(fp)
    affc:	01000074 	movhi	r4,1
    b000:	2133b804 	addi	r4,r4,-12576
    b004:	000aef00 	call	aef0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    b008:	01c07fc4 	movi	r7,511
    b00c:	000d883a 	mov	r6,zero
    b010:	e17ffe17 	ldw	r5,-8(fp)
    b014:	01000074 	movhi	r4,1
    b018:	2133b504 	addi	r4,r4,-12588
    b01c:	000aef00 	call	aef0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    b020:	01c07fc4 	movi	r7,511
    b024:	01800044 	movi	r6,1
    b028:	e17fff17 	ldw	r5,-4(fp)
    b02c:	01000074 	movhi	r4,1
    b030:	2133bb04 	addi	r4,r4,-12564
    b034:	000aef00 	call	aef0 <alt_open_fd>
}  
    b038:	0001883a 	nop
    b03c:	e037883a 	mov	sp,fp
    b040:	dfc00117 	ldw	ra,4(sp)
    b044:	df000017 	ldw	fp,0(sp)
    b048:	dec00204 	addi	sp,sp,8
    b04c:	f800283a 	ret

0000b050 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b050:	defffe04 	addi	sp,sp,-8
    b054:	dfc00115 	stw	ra,4(sp)
    b058:	df000015 	stw	fp,0(sp)
    b05c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b060:	d0a00b17 	ldw	r2,-32724(gp)
    b064:	10000326 	beq	r2,zero,b074 <alt_get_errno+0x24>
    b068:	d0a00b17 	ldw	r2,-32724(gp)
    b06c:	103ee83a 	callr	r2
    b070:	00000106 	br	b078 <alt_get_errno+0x28>
    b074:	d0a5b804 	addi	r2,gp,-26912
}
    b078:	e037883a 	mov	sp,fp
    b07c:	dfc00117 	ldw	ra,4(sp)
    b080:	df000017 	ldw	fp,0(sp)
    b084:	dec00204 	addi	sp,sp,8
    b088:	f800283a 	ret

0000b08c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    b08c:	defffb04 	addi	sp,sp,-20
    b090:	dfc00415 	stw	ra,16(sp)
    b094:	df000315 	stw	fp,12(sp)
    b098:	dc000215 	stw	r16,8(sp)
    b09c:	df000304 	addi	fp,sp,12
    b0a0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    b0a4:	e0bffe17 	ldw	r2,-8(fp)
    b0a8:	10800217 	ldw	r2,8(r2)
    b0ac:	10d00034 	orhi	r3,r2,16384
    b0b0:	e0bffe17 	ldw	r2,-8(fp)
    b0b4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    b0b8:	e03ffd15 	stw	zero,-12(fp)
    b0bc:	00002306 	br	b14c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    b0c0:	04000074 	movhi	r16,1
    b0c4:	8433b504 	addi	r16,r16,-12588
    b0c8:	e0bffd17 	ldw	r2,-12(fp)
    b0cc:	01400304 	movi	r5,12
    b0d0:	1009883a 	mov	r4,r2
    b0d4:	0009ab80 	call	9ab8 <__mulsi3>
    b0d8:	8085883a 	add	r2,r16,r2
    b0dc:	10c00017 	ldw	r3,0(r2)
    b0e0:	e0bffe17 	ldw	r2,-8(fp)
    b0e4:	10800017 	ldw	r2,0(r2)
    b0e8:	1880151e 	bne	r3,r2,b140 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    b0ec:	04000074 	movhi	r16,1
    b0f0:	8433b504 	addi	r16,r16,-12588
    b0f4:	e0bffd17 	ldw	r2,-12(fp)
    b0f8:	01400304 	movi	r5,12
    b0fc:	1009883a 	mov	r4,r2
    b100:	0009ab80 	call	9ab8 <__mulsi3>
    b104:	8085883a 	add	r2,r16,r2
    b108:	10800204 	addi	r2,r2,8
    b10c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    b110:	10000b0e 	bge	r2,zero,b140 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    b114:	01400304 	movi	r5,12
    b118:	e13ffd17 	ldw	r4,-12(fp)
    b11c:	0009ab80 	call	9ab8 <__mulsi3>
    b120:	1007883a 	mov	r3,r2
    b124:	00800074 	movhi	r2,1
    b128:	10b3b504 	addi	r2,r2,-12588
    b12c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    b130:	e0bffe17 	ldw	r2,-8(fp)
    b134:	18800226 	beq	r3,r2,b140 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    b138:	00bffcc4 	movi	r2,-13
    b13c:	00000806 	br	b160 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    b140:	e0bffd17 	ldw	r2,-12(fp)
    b144:	10800044 	addi	r2,r2,1
    b148:	e0bffd15 	stw	r2,-12(fp)
    b14c:	d0a00a17 	ldw	r2,-32728(gp)
    b150:	1007883a 	mov	r3,r2
    b154:	e0bffd17 	ldw	r2,-12(fp)
    b158:	18bfd92e 	bgeu	r3,r2,b0c0 <_gp+0xffff5c48>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    b15c:	0005883a 	mov	r2,zero
}
    b160:	e6ffff04 	addi	sp,fp,-4
    b164:	dfc00217 	ldw	ra,8(sp)
    b168:	df000117 	ldw	fp,4(sp)
    b16c:	dc000017 	ldw	r16,0(sp)
    b170:	dec00304 	addi	sp,sp,12
    b174:	f800283a 	ret

0000b178 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    b178:	defff604 	addi	sp,sp,-40
    b17c:	dfc00915 	stw	ra,36(sp)
    b180:	df000815 	stw	fp,32(sp)
    b184:	df000804 	addi	fp,sp,32
    b188:	e13ffd15 	stw	r4,-12(fp)
    b18c:	e17ffe15 	stw	r5,-8(fp)
    b190:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    b194:	00bfffc4 	movi	r2,-1
    b198:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    b19c:	00bffb44 	movi	r2,-19
    b1a0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    b1a4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    b1a8:	d1600804 	addi	r5,gp,-32736
    b1ac:	e13ffd17 	ldw	r4,-12(fp)
    b1b0:	000b5200 	call	b520 <alt_find_dev>
    b1b4:	e0bff815 	stw	r2,-32(fp)
    b1b8:	e0bff817 	ldw	r2,-32(fp)
    b1bc:	1000051e 	bne	r2,zero,b1d4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    b1c0:	e13ffd17 	ldw	r4,-12(fp)
    b1c4:	000b5b00 	call	b5b0 <alt_find_file>
    b1c8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    b1cc:	00800044 	movi	r2,1
    b1d0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    b1d4:	e0bff817 	ldw	r2,-32(fp)
    b1d8:	10002b26 	beq	r2,zero,b288 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    b1dc:	e13ff817 	ldw	r4,-32(fp)
    b1e0:	000b6b80 	call	b6b8 <alt_get_fd>
    b1e4:	e0bff915 	stw	r2,-28(fp)
    b1e8:	e0bff917 	ldw	r2,-28(fp)
    b1ec:	1000030e 	bge	r2,zero,b1fc <open+0x84>
    {
      status = index;
    b1f0:	e0bff917 	ldw	r2,-28(fp)
    b1f4:	e0bffa15 	stw	r2,-24(fp)
    b1f8:	00002506 	br	b290 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    b1fc:	01400304 	movi	r5,12
    b200:	e13ff917 	ldw	r4,-28(fp)
    b204:	0009ab80 	call	9ab8 <__mulsi3>
    b208:	1007883a 	mov	r3,r2
    b20c:	00800074 	movhi	r2,1
    b210:	10b3b504 	addi	r2,r2,-12588
    b214:	1885883a 	add	r2,r3,r2
    b218:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    b21c:	e0fffe17 	ldw	r3,-8(fp)
    b220:	00900034 	movhi	r2,16384
    b224:	10bfffc4 	addi	r2,r2,-1
    b228:	1886703a 	and	r3,r3,r2
    b22c:	e0bffc17 	ldw	r2,-16(fp)
    b230:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    b234:	e0bffb17 	ldw	r2,-20(fp)
    b238:	1000051e 	bne	r2,zero,b250 <open+0xd8>
    b23c:	e13ffc17 	ldw	r4,-16(fp)
    b240:	000b08c0 	call	b08c <alt_file_locked>
    b244:	e0bffa15 	stw	r2,-24(fp)
    b248:	e0bffa17 	ldw	r2,-24(fp)
    b24c:	10001016 	blt	r2,zero,b290 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    b250:	e0bff817 	ldw	r2,-32(fp)
    b254:	10800317 	ldw	r2,12(r2)
    b258:	10000826 	beq	r2,zero,b27c <open+0x104>
    b25c:	e0bff817 	ldw	r2,-32(fp)
    b260:	10800317 	ldw	r2,12(r2)
    b264:	e1ffff17 	ldw	r7,-4(fp)
    b268:	e1bffe17 	ldw	r6,-8(fp)
    b26c:	e17ffd17 	ldw	r5,-12(fp)
    b270:	e13ffc17 	ldw	r4,-16(fp)
    b274:	103ee83a 	callr	r2
    b278:	00000106 	br	b280 <open+0x108>
    b27c:	0005883a 	mov	r2,zero
    b280:	e0bffa15 	stw	r2,-24(fp)
    b284:	00000206 	br	b290 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    b288:	00bffb44 	movi	r2,-19
    b28c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    b290:	e0bffa17 	ldw	r2,-24(fp)
    b294:	1000090e 	bge	r2,zero,b2bc <open+0x144>
  {
    alt_release_fd (index);  
    b298:	e13ff917 	ldw	r4,-28(fp)
    b29c:	000b2d40 	call	b2d4 <alt_release_fd>
    ALT_ERRNO = -status;
    b2a0:	000b0500 	call	b050 <alt_get_errno>
    b2a4:	1007883a 	mov	r3,r2
    b2a8:	e0bffa17 	ldw	r2,-24(fp)
    b2ac:	0085c83a 	sub	r2,zero,r2
    b2b0:	18800015 	stw	r2,0(r3)
    return -1;
    b2b4:	00bfffc4 	movi	r2,-1
    b2b8:	00000106 	br	b2c0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    b2bc:	e0bff917 	ldw	r2,-28(fp)
}
    b2c0:	e037883a 	mov	sp,fp
    b2c4:	dfc00117 	ldw	ra,4(sp)
    b2c8:	df000017 	ldw	fp,0(sp)
    b2cc:	dec00204 	addi	sp,sp,8
    b2d0:	f800283a 	ret

0000b2d4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    b2d4:	defffc04 	addi	sp,sp,-16
    b2d8:	dfc00315 	stw	ra,12(sp)
    b2dc:	df000215 	stw	fp,8(sp)
    b2e0:	dc000115 	stw	r16,4(sp)
    b2e4:	df000204 	addi	fp,sp,8
    b2e8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    b2ec:	e0bffe17 	ldw	r2,-8(fp)
    b2f0:	108000d0 	cmplti	r2,r2,3
    b2f4:	1000111e 	bne	r2,zero,b33c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    b2f8:	04000074 	movhi	r16,1
    b2fc:	8433b504 	addi	r16,r16,-12588
    b300:	e0bffe17 	ldw	r2,-8(fp)
    b304:	01400304 	movi	r5,12
    b308:	1009883a 	mov	r4,r2
    b30c:	0009ab80 	call	9ab8 <__mulsi3>
    b310:	8085883a 	add	r2,r16,r2
    b314:	10800204 	addi	r2,r2,8
    b318:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    b31c:	04000074 	movhi	r16,1
    b320:	8433b504 	addi	r16,r16,-12588
    b324:	e0bffe17 	ldw	r2,-8(fp)
    b328:	01400304 	movi	r5,12
    b32c:	1009883a 	mov	r4,r2
    b330:	0009ab80 	call	9ab8 <__mulsi3>
    b334:	8085883a 	add	r2,r16,r2
    b338:	10000015 	stw	zero,0(r2)
  }
}
    b33c:	0001883a 	nop
    b340:	e6ffff04 	addi	sp,fp,-4
    b344:	dfc00217 	ldw	ra,8(sp)
    b348:	df000117 	ldw	fp,4(sp)
    b34c:	dc000017 	ldw	r16,0(sp)
    b350:	dec00304 	addi	sp,sp,12
    b354:	f800283a 	ret

0000b358 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    b358:	defffa04 	addi	sp,sp,-24
    b35c:	df000515 	stw	fp,20(sp)
    b360:	df000504 	addi	fp,sp,20
    b364:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b368:	0005303a 	rdctl	r2,status
    b36c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b370:	e0fffc17 	ldw	r3,-16(fp)
    b374:	00bfff84 	movi	r2,-2
    b378:	1884703a 	and	r2,r3,r2
    b37c:	1001703a 	wrctl	status,r2
  
  return context;
    b380:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    b384:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    b388:	e0bfff17 	ldw	r2,-4(fp)
    b38c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    b390:	e0bffd17 	ldw	r2,-12(fp)
    b394:	10800017 	ldw	r2,0(r2)
    b398:	e0fffd17 	ldw	r3,-12(fp)
    b39c:	18c00117 	ldw	r3,4(r3)
    b3a0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    b3a4:	e0bffd17 	ldw	r2,-12(fp)
    b3a8:	10800117 	ldw	r2,4(r2)
    b3ac:	e0fffd17 	ldw	r3,-12(fp)
    b3b0:	18c00017 	ldw	r3,0(r3)
    b3b4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    b3b8:	e0bffd17 	ldw	r2,-12(fp)
    b3bc:	e0fffd17 	ldw	r3,-12(fp)
    b3c0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    b3c4:	e0bffd17 	ldw	r2,-12(fp)
    b3c8:	e0fffd17 	ldw	r3,-12(fp)
    b3cc:	10c00015 	stw	r3,0(r2)
    b3d0:	e0bffb17 	ldw	r2,-20(fp)
    b3d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b3d8:	e0bffe17 	ldw	r2,-8(fp)
    b3dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    b3e0:	0001883a 	nop
    b3e4:	e037883a 	mov	sp,fp
    b3e8:	df000017 	ldw	fp,0(sp)
    b3ec:	dec00104 	addi	sp,sp,4
    b3f0:	f800283a 	ret

0000b3f4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    b3f4:	defffb04 	addi	sp,sp,-20
    b3f8:	dfc00415 	stw	ra,16(sp)
    b3fc:	df000315 	stw	fp,12(sp)
    b400:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    b404:	d0a00c17 	ldw	r2,-32720(gp)
    b408:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    b40c:	d0a5b717 	ldw	r2,-26916(gp)
    b410:	10800044 	addi	r2,r2,1
    b414:	d0a5b715 	stw	r2,-26916(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    b418:	00002e06 	br	b4d4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    b41c:	e0bffd17 	ldw	r2,-12(fp)
    b420:	10800017 	ldw	r2,0(r2)
    b424:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    b428:	e0bffd17 	ldw	r2,-12(fp)
    b42c:	10800403 	ldbu	r2,16(r2)
    b430:	10803fcc 	andi	r2,r2,255
    b434:	10000426 	beq	r2,zero,b448 <alt_tick+0x54>
    b438:	d0a5b717 	ldw	r2,-26916(gp)
    b43c:	1000021e 	bne	r2,zero,b448 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    b440:	e0bffd17 	ldw	r2,-12(fp)
    b444:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    b448:	e0bffd17 	ldw	r2,-12(fp)
    b44c:	10800217 	ldw	r2,8(r2)
    b450:	d0e5b717 	ldw	r3,-26916(gp)
    b454:	18801d36 	bltu	r3,r2,b4cc <alt_tick+0xd8>
    b458:	e0bffd17 	ldw	r2,-12(fp)
    b45c:	10800403 	ldbu	r2,16(r2)
    b460:	10803fcc 	andi	r2,r2,255
    b464:	1000191e 	bne	r2,zero,b4cc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    b468:	e0bffd17 	ldw	r2,-12(fp)
    b46c:	10800317 	ldw	r2,12(r2)
    b470:	e0fffd17 	ldw	r3,-12(fp)
    b474:	18c00517 	ldw	r3,20(r3)
    b478:	1809883a 	mov	r4,r3
    b47c:	103ee83a 	callr	r2
    b480:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    b484:	e0bfff17 	ldw	r2,-4(fp)
    b488:	1000031e 	bne	r2,zero,b498 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    b48c:	e13ffd17 	ldw	r4,-12(fp)
    b490:	000b3580 	call	b358 <alt_alarm_stop>
    b494:	00000d06 	br	b4cc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    b498:	e0bffd17 	ldw	r2,-12(fp)
    b49c:	10c00217 	ldw	r3,8(r2)
    b4a0:	e0bfff17 	ldw	r2,-4(fp)
    b4a4:	1887883a 	add	r3,r3,r2
    b4a8:	e0bffd17 	ldw	r2,-12(fp)
    b4ac:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    b4b0:	e0bffd17 	ldw	r2,-12(fp)
    b4b4:	10c00217 	ldw	r3,8(r2)
    b4b8:	d0a5b717 	ldw	r2,-26916(gp)
    b4bc:	1880032e 	bgeu	r3,r2,b4cc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    b4c0:	e0bffd17 	ldw	r2,-12(fp)
    b4c4:	00c00044 	movi	r3,1
    b4c8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    b4cc:	e0bffe17 	ldw	r2,-8(fp)
    b4d0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    b4d4:	e0fffd17 	ldw	r3,-12(fp)
    b4d8:	d0a00c04 	addi	r2,gp,-32720
    b4dc:	18bfcf1e 	bne	r3,r2,b41c <_gp+0xffff5fa4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    b4e0:	0001883a 	nop
}
    b4e4:	0001883a 	nop
    b4e8:	e037883a 	mov	sp,fp
    b4ec:	dfc00117 	ldw	ra,4(sp)
    b4f0:	df000017 	ldw	fp,0(sp)
    b4f4:	dec00204 	addi	sp,sp,8
    b4f8:	f800283a 	ret

0000b4fc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    b4fc:	deffff04 	addi	sp,sp,-4
    b500:	df000015 	stw	fp,0(sp)
    b504:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    b508:	000170fa 	wrctl	ienable,zero
}
    b50c:	0001883a 	nop
    b510:	e037883a 	mov	sp,fp
    b514:	df000017 	ldw	fp,0(sp)
    b518:	dec00104 	addi	sp,sp,4
    b51c:	f800283a 	ret

0000b520 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    b520:	defffa04 	addi	sp,sp,-24
    b524:	dfc00515 	stw	ra,20(sp)
    b528:	df000415 	stw	fp,16(sp)
    b52c:	df000404 	addi	fp,sp,16
    b530:	e13ffe15 	stw	r4,-8(fp)
    b534:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    b538:	e0bfff17 	ldw	r2,-4(fp)
    b53c:	10800017 	ldw	r2,0(r2)
    b540:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    b544:	e13ffe17 	ldw	r4,-8(fp)
    b548:	000b98c0 	call	b98c <strlen>
    b54c:	10800044 	addi	r2,r2,1
    b550:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    b554:	00000d06 	br	b58c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    b558:	e0bffc17 	ldw	r2,-16(fp)
    b55c:	10800217 	ldw	r2,8(r2)
    b560:	e0fffd17 	ldw	r3,-12(fp)
    b564:	180d883a 	mov	r6,r3
    b568:	e17ffe17 	ldw	r5,-8(fp)
    b56c:	1009883a 	mov	r4,r2
    b570:	000b7c80 	call	b7c8 <memcmp>
    b574:	1000021e 	bne	r2,zero,b580 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    b578:	e0bffc17 	ldw	r2,-16(fp)
    b57c:	00000706 	br	b59c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    b580:	e0bffc17 	ldw	r2,-16(fp)
    b584:	10800017 	ldw	r2,0(r2)
    b588:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    b58c:	e0fffc17 	ldw	r3,-16(fp)
    b590:	e0bfff17 	ldw	r2,-4(fp)
    b594:	18bff01e 	bne	r3,r2,b558 <_gp+0xffff60e0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    b598:	0005883a 	mov	r2,zero
}
    b59c:	e037883a 	mov	sp,fp
    b5a0:	dfc00117 	ldw	ra,4(sp)
    b5a4:	df000017 	ldw	fp,0(sp)
    b5a8:	dec00204 	addi	sp,sp,8
    b5ac:	f800283a 	ret

0000b5b0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    b5b0:	defffb04 	addi	sp,sp,-20
    b5b4:	dfc00415 	stw	ra,16(sp)
    b5b8:	df000315 	stw	fp,12(sp)
    b5bc:	df000304 	addi	fp,sp,12
    b5c0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    b5c4:	d0a00617 	ldw	r2,-32744(gp)
    b5c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    b5cc:	00003106 	br	b694 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    b5d0:	e0bffd17 	ldw	r2,-12(fp)
    b5d4:	10800217 	ldw	r2,8(r2)
    b5d8:	1009883a 	mov	r4,r2
    b5dc:	000b98c0 	call	b98c <strlen>
    b5e0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    b5e4:	e0bffd17 	ldw	r2,-12(fp)
    b5e8:	10c00217 	ldw	r3,8(r2)
    b5ec:	e0bffe17 	ldw	r2,-8(fp)
    b5f0:	10bfffc4 	addi	r2,r2,-1
    b5f4:	1885883a 	add	r2,r3,r2
    b5f8:	10800003 	ldbu	r2,0(r2)
    b5fc:	10803fcc 	andi	r2,r2,255
    b600:	1080201c 	xori	r2,r2,128
    b604:	10bfe004 	addi	r2,r2,-128
    b608:	10800bd8 	cmpnei	r2,r2,47
    b60c:	1000031e 	bne	r2,zero,b61c <alt_find_file+0x6c>
    {
      len -= 1;
    b610:	e0bffe17 	ldw	r2,-8(fp)
    b614:	10bfffc4 	addi	r2,r2,-1
    b618:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    b61c:	e0bffe17 	ldw	r2,-8(fp)
    b620:	e0ffff17 	ldw	r3,-4(fp)
    b624:	1885883a 	add	r2,r3,r2
    b628:	10800003 	ldbu	r2,0(r2)
    b62c:	10803fcc 	andi	r2,r2,255
    b630:	1080201c 	xori	r2,r2,128
    b634:	10bfe004 	addi	r2,r2,-128
    b638:	10800be0 	cmpeqi	r2,r2,47
    b63c:	1000081e 	bne	r2,zero,b660 <alt_find_file+0xb0>
    b640:	e0bffe17 	ldw	r2,-8(fp)
    b644:	e0ffff17 	ldw	r3,-4(fp)
    b648:	1885883a 	add	r2,r3,r2
    b64c:	10800003 	ldbu	r2,0(r2)
    b650:	10803fcc 	andi	r2,r2,255
    b654:	1080201c 	xori	r2,r2,128
    b658:	10bfe004 	addi	r2,r2,-128
    b65c:	10000a1e 	bne	r2,zero,b688 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    b660:	e0bffd17 	ldw	r2,-12(fp)
    b664:	10800217 	ldw	r2,8(r2)
    b668:	e0fffe17 	ldw	r3,-8(fp)
    b66c:	180d883a 	mov	r6,r3
    b670:	e17fff17 	ldw	r5,-4(fp)
    b674:	1009883a 	mov	r4,r2
    b678:	000b7c80 	call	b7c8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    b67c:	1000021e 	bne	r2,zero,b688 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    b680:	e0bffd17 	ldw	r2,-12(fp)
    b684:	00000706 	br	b6a4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    b688:	e0bffd17 	ldw	r2,-12(fp)
    b68c:	10800017 	ldw	r2,0(r2)
    b690:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    b694:	e0fffd17 	ldw	r3,-12(fp)
    b698:	d0a00604 	addi	r2,gp,-32744
    b69c:	18bfcc1e 	bne	r3,r2,b5d0 <_gp+0xffff6158>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    b6a0:	0005883a 	mov	r2,zero
}
    b6a4:	e037883a 	mov	sp,fp
    b6a8:	dfc00117 	ldw	ra,4(sp)
    b6ac:	df000017 	ldw	fp,0(sp)
    b6b0:	dec00204 	addi	sp,sp,8
    b6b4:	f800283a 	ret

0000b6b8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    b6b8:	defffa04 	addi	sp,sp,-24
    b6bc:	dfc00515 	stw	ra,20(sp)
    b6c0:	df000415 	stw	fp,16(sp)
    b6c4:	dc000315 	stw	r16,12(sp)
    b6c8:	df000404 	addi	fp,sp,16
    b6cc:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    b6d0:	00bffa04 	movi	r2,-24
    b6d4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    b6d8:	e03ffc15 	stw	zero,-16(fp)
    b6dc:	00001d06 	br	b754 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    b6e0:	04000074 	movhi	r16,1
    b6e4:	8433b504 	addi	r16,r16,-12588
    b6e8:	e0bffc17 	ldw	r2,-16(fp)
    b6ec:	01400304 	movi	r5,12
    b6f0:	1009883a 	mov	r4,r2
    b6f4:	0009ab80 	call	9ab8 <__mulsi3>
    b6f8:	8085883a 	add	r2,r16,r2
    b6fc:	10800017 	ldw	r2,0(r2)
    b700:	1000111e 	bne	r2,zero,b748 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    b704:	04000074 	movhi	r16,1
    b708:	8433b504 	addi	r16,r16,-12588
    b70c:	e0bffc17 	ldw	r2,-16(fp)
    b710:	01400304 	movi	r5,12
    b714:	1009883a 	mov	r4,r2
    b718:	0009ab80 	call	9ab8 <__mulsi3>
    b71c:	8085883a 	add	r2,r16,r2
    b720:	e0fffe17 	ldw	r3,-8(fp)
    b724:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    b728:	d0e00a17 	ldw	r3,-32728(gp)
    b72c:	e0bffc17 	ldw	r2,-16(fp)
    b730:	1880020e 	bge	r3,r2,b73c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    b734:	e0bffc17 	ldw	r2,-16(fp)
    b738:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
    b73c:	e0bffc17 	ldw	r2,-16(fp)
    b740:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    b744:	00000606 	br	b760 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    b748:	e0bffc17 	ldw	r2,-16(fp)
    b74c:	10800044 	addi	r2,r2,1
    b750:	e0bffc15 	stw	r2,-16(fp)
    b754:	e0bffc17 	ldw	r2,-16(fp)
    b758:	10800810 	cmplti	r2,r2,32
    b75c:	103fe01e 	bne	r2,zero,b6e0 <_gp+0xffff6268>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    b760:	e0bffd17 	ldw	r2,-12(fp)
}
    b764:	e6ffff04 	addi	sp,fp,-4
    b768:	dfc00217 	ldw	ra,8(sp)
    b76c:	df000117 	ldw	fp,4(sp)
    b770:	dc000017 	ldw	r16,0(sp)
    b774:	dec00304 	addi	sp,sp,12
    b778:	f800283a 	ret

0000b77c <atexit>:
    b77c:	200b883a 	mov	r5,r4
    b780:	000f883a 	mov	r7,zero
    b784:	000d883a 	mov	r6,zero
    b788:	0009883a 	mov	r4,zero
    b78c:	000ba241 	jmpi	ba24 <__register_exitproc>

0000b790 <exit>:
    b790:	defffe04 	addi	sp,sp,-8
    b794:	000b883a 	mov	r5,zero
    b798:	dc000015 	stw	r16,0(sp)
    b79c:	dfc00115 	stw	ra,4(sp)
    b7a0:	2021883a 	mov	r16,r4
    b7a4:	000bb3c0 	call	bb3c <__call_exitprocs>
    b7a8:	00800074 	movhi	r2,1
    b7ac:	10b52c04 	addi	r2,r2,-11088
    b7b0:	11000017 	ldw	r4,0(r2)
    b7b4:	20800f17 	ldw	r2,60(r4)
    b7b8:	10000126 	beq	r2,zero,b7c0 <exit+0x30>
    b7bc:	103ee83a 	callr	r2
    b7c0:	8009883a 	mov	r4,r16
    b7c4:	000bcbc0 	call	bcbc <_exit>

0000b7c8 <memcmp>:
    b7c8:	01c000c4 	movi	r7,3
    b7cc:	3980192e 	bgeu	r7,r6,b834 <memcmp+0x6c>
    b7d0:	2144b03a 	or	r2,r4,r5
    b7d4:	11c4703a 	and	r2,r2,r7
    b7d8:	10000f26 	beq	r2,zero,b818 <memcmp+0x50>
    b7dc:	20800003 	ldbu	r2,0(r4)
    b7e0:	28c00003 	ldbu	r3,0(r5)
    b7e4:	10c0151e 	bne	r2,r3,b83c <memcmp+0x74>
    b7e8:	31bfff84 	addi	r6,r6,-2
    b7ec:	01ffffc4 	movi	r7,-1
    b7f0:	00000406 	br	b804 <memcmp+0x3c>
    b7f4:	20800003 	ldbu	r2,0(r4)
    b7f8:	28c00003 	ldbu	r3,0(r5)
    b7fc:	31bfffc4 	addi	r6,r6,-1
    b800:	10c00e1e 	bne	r2,r3,b83c <memcmp+0x74>
    b804:	21000044 	addi	r4,r4,1
    b808:	29400044 	addi	r5,r5,1
    b80c:	31fff91e 	bne	r6,r7,b7f4 <_gp+0xffff637c>
    b810:	0005883a 	mov	r2,zero
    b814:	f800283a 	ret
    b818:	20c00017 	ldw	r3,0(r4)
    b81c:	28800017 	ldw	r2,0(r5)
    b820:	18bfee1e 	bne	r3,r2,b7dc <_gp+0xffff6364>
    b824:	31bfff04 	addi	r6,r6,-4
    b828:	21000104 	addi	r4,r4,4
    b82c:	29400104 	addi	r5,r5,4
    b830:	39bff936 	bltu	r7,r6,b818 <_gp+0xffff63a0>
    b834:	303fe91e 	bne	r6,zero,b7dc <_gp+0xffff6364>
    b838:	003ff506 	br	b810 <_gp+0xffff6398>
    b83c:	10c5c83a 	sub	r2,r2,r3
    b840:	f800283a 	ret

0000b844 <memcpy>:
    b844:	defffd04 	addi	sp,sp,-12
    b848:	dfc00215 	stw	ra,8(sp)
    b84c:	dc400115 	stw	r17,4(sp)
    b850:	dc000015 	stw	r16,0(sp)
    b854:	00c003c4 	movi	r3,15
    b858:	2005883a 	mov	r2,r4
    b85c:	1980452e 	bgeu	r3,r6,b974 <memcpy+0x130>
    b860:	2906b03a 	or	r3,r5,r4
    b864:	18c000cc 	andi	r3,r3,3
    b868:	1800441e 	bne	r3,zero,b97c <memcpy+0x138>
    b86c:	347ffc04 	addi	r17,r6,-16
    b870:	8822d13a 	srli	r17,r17,4
    b874:	28c00104 	addi	r3,r5,4
    b878:	23400104 	addi	r13,r4,4
    b87c:	8820913a 	slli	r16,r17,4
    b880:	2b000204 	addi	r12,r5,8
    b884:	22c00204 	addi	r11,r4,8
    b888:	84000504 	addi	r16,r16,20
    b88c:	2a800304 	addi	r10,r5,12
    b890:	22400304 	addi	r9,r4,12
    b894:	2c21883a 	add	r16,r5,r16
    b898:	2811883a 	mov	r8,r5
    b89c:	200f883a 	mov	r7,r4
    b8a0:	41000017 	ldw	r4,0(r8)
    b8a4:	1fc00017 	ldw	ra,0(r3)
    b8a8:	63c00017 	ldw	r15,0(r12)
    b8ac:	39000015 	stw	r4,0(r7)
    b8b0:	53800017 	ldw	r14,0(r10)
    b8b4:	6fc00015 	stw	ra,0(r13)
    b8b8:	5bc00015 	stw	r15,0(r11)
    b8bc:	4b800015 	stw	r14,0(r9)
    b8c0:	18c00404 	addi	r3,r3,16
    b8c4:	39c00404 	addi	r7,r7,16
    b8c8:	42000404 	addi	r8,r8,16
    b8cc:	6b400404 	addi	r13,r13,16
    b8d0:	63000404 	addi	r12,r12,16
    b8d4:	5ac00404 	addi	r11,r11,16
    b8d8:	52800404 	addi	r10,r10,16
    b8dc:	4a400404 	addi	r9,r9,16
    b8e0:	1c3fef1e 	bne	r3,r16,b8a0 <_gp+0xffff6428>
    b8e4:	89c00044 	addi	r7,r17,1
    b8e8:	380e913a 	slli	r7,r7,4
    b8ec:	310003cc 	andi	r4,r6,15
    b8f0:	02c000c4 	movi	r11,3
    b8f4:	11c7883a 	add	r3,r2,r7
    b8f8:	29cb883a 	add	r5,r5,r7
    b8fc:	5900212e 	bgeu	r11,r4,b984 <memcpy+0x140>
    b900:	1813883a 	mov	r9,r3
    b904:	2811883a 	mov	r8,r5
    b908:	200f883a 	mov	r7,r4
    b90c:	42800017 	ldw	r10,0(r8)
    b910:	4a400104 	addi	r9,r9,4
    b914:	39ffff04 	addi	r7,r7,-4
    b918:	4abfff15 	stw	r10,-4(r9)
    b91c:	42000104 	addi	r8,r8,4
    b920:	59fffa36 	bltu	r11,r7,b90c <_gp+0xffff6494>
    b924:	213fff04 	addi	r4,r4,-4
    b928:	2008d0ba 	srli	r4,r4,2
    b92c:	318000cc 	andi	r6,r6,3
    b930:	21000044 	addi	r4,r4,1
    b934:	2109883a 	add	r4,r4,r4
    b938:	2109883a 	add	r4,r4,r4
    b93c:	1907883a 	add	r3,r3,r4
    b940:	290b883a 	add	r5,r5,r4
    b944:	30000626 	beq	r6,zero,b960 <memcpy+0x11c>
    b948:	198d883a 	add	r6,r3,r6
    b94c:	29c00003 	ldbu	r7,0(r5)
    b950:	18c00044 	addi	r3,r3,1
    b954:	29400044 	addi	r5,r5,1
    b958:	19ffffc5 	stb	r7,-1(r3)
    b95c:	19bffb1e 	bne	r3,r6,b94c <_gp+0xffff64d4>
    b960:	dfc00217 	ldw	ra,8(sp)
    b964:	dc400117 	ldw	r17,4(sp)
    b968:	dc000017 	ldw	r16,0(sp)
    b96c:	dec00304 	addi	sp,sp,12
    b970:	f800283a 	ret
    b974:	2007883a 	mov	r3,r4
    b978:	003ff206 	br	b944 <_gp+0xffff64cc>
    b97c:	2007883a 	mov	r3,r4
    b980:	003ff106 	br	b948 <_gp+0xffff64d0>
    b984:	200d883a 	mov	r6,r4
    b988:	003fee06 	br	b944 <_gp+0xffff64cc>

0000b98c <strlen>:
    b98c:	208000cc 	andi	r2,r4,3
    b990:	10002026 	beq	r2,zero,ba14 <strlen+0x88>
    b994:	20800007 	ldb	r2,0(r4)
    b998:	10002026 	beq	r2,zero,ba1c <strlen+0x90>
    b99c:	2005883a 	mov	r2,r4
    b9a0:	00000206 	br	b9ac <strlen+0x20>
    b9a4:	10c00007 	ldb	r3,0(r2)
    b9a8:	18001826 	beq	r3,zero,ba0c <strlen+0x80>
    b9ac:	10800044 	addi	r2,r2,1
    b9b0:	10c000cc 	andi	r3,r2,3
    b9b4:	183ffb1e 	bne	r3,zero,b9a4 <_gp+0xffff652c>
    b9b8:	10c00017 	ldw	r3,0(r2)
    b9bc:	01ffbff4 	movhi	r7,65279
    b9c0:	39ffbfc4 	addi	r7,r7,-257
    b9c4:	00ca303a 	nor	r5,zero,r3
    b9c8:	01a02074 	movhi	r6,32897
    b9cc:	19c7883a 	add	r3,r3,r7
    b9d0:	31a02004 	addi	r6,r6,-32640
    b9d4:	1946703a 	and	r3,r3,r5
    b9d8:	1986703a 	and	r3,r3,r6
    b9dc:	1800091e 	bne	r3,zero,ba04 <strlen+0x78>
    b9e0:	10800104 	addi	r2,r2,4
    b9e4:	10c00017 	ldw	r3,0(r2)
    b9e8:	19cb883a 	add	r5,r3,r7
    b9ec:	00c6303a 	nor	r3,zero,r3
    b9f0:	28c6703a 	and	r3,r5,r3
    b9f4:	1986703a 	and	r3,r3,r6
    b9f8:	183ff926 	beq	r3,zero,b9e0 <_gp+0xffff6568>
    b9fc:	00000106 	br	ba04 <strlen+0x78>
    ba00:	10800044 	addi	r2,r2,1
    ba04:	10c00007 	ldb	r3,0(r2)
    ba08:	183ffd1e 	bne	r3,zero,ba00 <_gp+0xffff6588>
    ba0c:	1105c83a 	sub	r2,r2,r4
    ba10:	f800283a 	ret
    ba14:	2005883a 	mov	r2,r4
    ba18:	003fe706 	br	b9b8 <_gp+0xffff6540>
    ba1c:	0005883a 	mov	r2,zero
    ba20:	f800283a 	ret

0000ba24 <__register_exitproc>:
    ba24:	defffa04 	addi	sp,sp,-24
    ba28:	dc000315 	stw	r16,12(sp)
    ba2c:	04000074 	movhi	r16,1
    ba30:	84352c04 	addi	r16,r16,-11088
    ba34:	80c00017 	ldw	r3,0(r16)
    ba38:	dc400415 	stw	r17,16(sp)
    ba3c:	dfc00515 	stw	ra,20(sp)
    ba40:	18805217 	ldw	r2,328(r3)
    ba44:	2023883a 	mov	r17,r4
    ba48:	10003726 	beq	r2,zero,bb28 <__register_exitproc+0x104>
    ba4c:	10c00117 	ldw	r3,4(r2)
    ba50:	010007c4 	movi	r4,31
    ba54:	20c00e16 	blt	r4,r3,ba90 <__register_exitproc+0x6c>
    ba58:	1a000044 	addi	r8,r3,1
    ba5c:	8800221e 	bne	r17,zero,bae8 <__register_exitproc+0xc4>
    ba60:	18c00084 	addi	r3,r3,2
    ba64:	18c7883a 	add	r3,r3,r3
    ba68:	18c7883a 	add	r3,r3,r3
    ba6c:	12000115 	stw	r8,4(r2)
    ba70:	10c7883a 	add	r3,r2,r3
    ba74:	19400015 	stw	r5,0(r3)
    ba78:	0005883a 	mov	r2,zero
    ba7c:	dfc00517 	ldw	ra,20(sp)
    ba80:	dc400417 	ldw	r17,16(sp)
    ba84:	dc000317 	ldw	r16,12(sp)
    ba88:	dec00604 	addi	sp,sp,24
    ba8c:	f800283a 	ret
    ba90:	00800034 	movhi	r2,0
    ba94:	10800004 	addi	r2,r2,0
    ba98:	10002626 	beq	r2,zero,bb34 <__register_exitproc+0x110>
    ba9c:	01006404 	movi	r4,400
    baa0:	d9400015 	stw	r5,0(sp)
    baa4:	d9800115 	stw	r6,4(sp)
    baa8:	d9c00215 	stw	r7,8(sp)
    baac:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    bab0:	d9400017 	ldw	r5,0(sp)
    bab4:	d9800117 	ldw	r6,4(sp)
    bab8:	d9c00217 	ldw	r7,8(sp)
    babc:	10001d26 	beq	r2,zero,bb34 <__register_exitproc+0x110>
    bac0:	81000017 	ldw	r4,0(r16)
    bac4:	10000115 	stw	zero,4(r2)
    bac8:	02000044 	movi	r8,1
    bacc:	22405217 	ldw	r9,328(r4)
    bad0:	0007883a 	mov	r3,zero
    bad4:	12400015 	stw	r9,0(r2)
    bad8:	20805215 	stw	r2,328(r4)
    badc:	10006215 	stw	zero,392(r2)
    bae0:	10006315 	stw	zero,396(r2)
    bae4:	883fde26 	beq	r17,zero,ba60 <_gp+0xffff65e8>
    bae8:	18c9883a 	add	r4,r3,r3
    baec:	2109883a 	add	r4,r4,r4
    baf0:	1109883a 	add	r4,r2,r4
    baf4:	21802215 	stw	r6,136(r4)
    baf8:	01800044 	movi	r6,1
    bafc:	12406217 	ldw	r9,392(r2)
    bb00:	30cc983a 	sll	r6,r6,r3
    bb04:	4992b03a 	or	r9,r9,r6
    bb08:	12406215 	stw	r9,392(r2)
    bb0c:	21c04215 	stw	r7,264(r4)
    bb10:	01000084 	movi	r4,2
    bb14:	893fd21e 	bne	r17,r4,ba60 <_gp+0xffff65e8>
    bb18:	11006317 	ldw	r4,396(r2)
    bb1c:	218cb03a 	or	r6,r4,r6
    bb20:	11806315 	stw	r6,396(r2)
    bb24:	003fce06 	br	ba60 <_gp+0xffff65e8>
    bb28:	18805304 	addi	r2,r3,332
    bb2c:	18805215 	stw	r2,328(r3)
    bb30:	003fc606 	br	ba4c <_gp+0xffff65d4>
    bb34:	00bfffc4 	movi	r2,-1
    bb38:	003fd006 	br	ba7c <_gp+0xffff6604>

0000bb3c <__call_exitprocs>:
    bb3c:	defff504 	addi	sp,sp,-44
    bb40:	df000915 	stw	fp,36(sp)
    bb44:	dd400615 	stw	r21,24(sp)
    bb48:	dc800315 	stw	r18,12(sp)
    bb4c:	dfc00a15 	stw	ra,40(sp)
    bb50:	ddc00815 	stw	r23,32(sp)
    bb54:	dd800715 	stw	r22,28(sp)
    bb58:	dd000515 	stw	r20,20(sp)
    bb5c:	dcc00415 	stw	r19,16(sp)
    bb60:	dc400215 	stw	r17,8(sp)
    bb64:	dc000115 	stw	r16,4(sp)
    bb68:	d9000015 	stw	r4,0(sp)
    bb6c:	2839883a 	mov	fp,r5
    bb70:	04800044 	movi	r18,1
    bb74:	057fffc4 	movi	r21,-1
    bb78:	00800074 	movhi	r2,1
    bb7c:	10b52c04 	addi	r2,r2,-11088
    bb80:	12000017 	ldw	r8,0(r2)
    bb84:	45005217 	ldw	r20,328(r8)
    bb88:	44c05204 	addi	r19,r8,328
    bb8c:	a0001c26 	beq	r20,zero,bc00 <__call_exitprocs+0xc4>
    bb90:	a0800117 	ldw	r2,4(r20)
    bb94:	15ffffc4 	addi	r23,r2,-1
    bb98:	b8000d16 	blt	r23,zero,bbd0 <__call_exitprocs+0x94>
    bb9c:	14000044 	addi	r16,r2,1
    bba0:	8421883a 	add	r16,r16,r16
    bba4:	8421883a 	add	r16,r16,r16
    bba8:	84402004 	addi	r17,r16,128
    bbac:	a463883a 	add	r17,r20,r17
    bbb0:	a421883a 	add	r16,r20,r16
    bbb4:	e0001e26 	beq	fp,zero,bc30 <__call_exitprocs+0xf4>
    bbb8:	80804017 	ldw	r2,256(r16)
    bbbc:	e0801c26 	beq	fp,r2,bc30 <__call_exitprocs+0xf4>
    bbc0:	bdffffc4 	addi	r23,r23,-1
    bbc4:	843fff04 	addi	r16,r16,-4
    bbc8:	8c7fff04 	addi	r17,r17,-4
    bbcc:	bd7ff91e 	bne	r23,r21,bbb4 <_gp+0xffff673c>
    bbd0:	00800034 	movhi	r2,0
    bbd4:	10800004 	addi	r2,r2,0
    bbd8:	10000926 	beq	r2,zero,bc00 <__call_exitprocs+0xc4>
    bbdc:	a0800117 	ldw	r2,4(r20)
    bbe0:	1000301e 	bne	r2,zero,bca4 <__call_exitprocs+0x168>
    bbe4:	a0800017 	ldw	r2,0(r20)
    bbe8:	10003226 	beq	r2,zero,bcb4 <__call_exitprocs+0x178>
    bbec:	a009883a 	mov	r4,r20
    bbf0:	98800015 	stw	r2,0(r19)
    bbf4:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    bbf8:	9d000017 	ldw	r20,0(r19)
    bbfc:	a03fe41e 	bne	r20,zero,bb90 <_gp+0xffff6718>
    bc00:	dfc00a17 	ldw	ra,40(sp)
    bc04:	df000917 	ldw	fp,36(sp)
    bc08:	ddc00817 	ldw	r23,32(sp)
    bc0c:	dd800717 	ldw	r22,28(sp)
    bc10:	dd400617 	ldw	r21,24(sp)
    bc14:	dd000517 	ldw	r20,20(sp)
    bc18:	dcc00417 	ldw	r19,16(sp)
    bc1c:	dc800317 	ldw	r18,12(sp)
    bc20:	dc400217 	ldw	r17,8(sp)
    bc24:	dc000117 	ldw	r16,4(sp)
    bc28:	dec00b04 	addi	sp,sp,44
    bc2c:	f800283a 	ret
    bc30:	a0800117 	ldw	r2,4(r20)
    bc34:	80c00017 	ldw	r3,0(r16)
    bc38:	10bfffc4 	addi	r2,r2,-1
    bc3c:	15c01426 	beq	r2,r23,bc90 <__call_exitprocs+0x154>
    bc40:	80000015 	stw	zero,0(r16)
    bc44:	183fde26 	beq	r3,zero,bbc0 <_gp+0xffff6748>
    bc48:	95c8983a 	sll	r4,r18,r23
    bc4c:	a0806217 	ldw	r2,392(r20)
    bc50:	a5800117 	ldw	r22,4(r20)
    bc54:	2084703a 	and	r2,r4,r2
    bc58:	10000b26 	beq	r2,zero,bc88 <__call_exitprocs+0x14c>
    bc5c:	a0806317 	ldw	r2,396(r20)
    bc60:	2088703a 	and	r4,r4,r2
    bc64:	20000c1e 	bne	r4,zero,bc98 <__call_exitprocs+0x15c>
    bc68:	89400017 	ldw	r5,0(r17)
    bc6c:	d9000017 	ldw	r4,0(sp)
    bc70:	183ee83a 	callr	r3
    bc74:	a0800117 	ldw	r2,4(r20)
    bc78:	15bfbf1e 	bne	r2,r22,bb78 <_gp+0xffff6700>
    bc7c:	98800017 	ldw	r2,0(r19)
    bc80:	153fcf26 	beq	r2,r20,bbc0 <_gp+0xffff6748>
    bc84:	003fbc06 	br	bb78 <_gp+0xffff6700>
    bc88:	183ee83a 	callr	r3
    bc8c:	003ff906 	br	bc74 <_gp+0xffff67fc>
    bc90:	a5c00115 	stw	r23,4(r20)
    bc94:	003feb06 	br	bc44 <_gp+0xffff67cc>
    bc98:	89000017 	ldw	r4,0(r17)
    bc9c:	183ee83a 	callr	r3
    bca0:	003ff406 	br	bc74 <_gp+0xffff67fc>
    bca4:	a0800017 	ldw	r2,0(r20)
    bca8:	a027883a 	mov	r19,r20
    bcac:	1029883a 	mov	r20,r2
    bcb0:	003fb606 	br	bb8c <_gp+0xffff6714>
    bcb4:	0005883a 	mov	r2,zero
    bcb8:	003ffb06 	br	bca8 <_gp+0xffff6830>

0000bcbc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    bcbc:	defffd04 	addi	sp,sp,-12
    bcc0:	df000215 	stw	fp,8(sp)
    bcc4:	df000204 	addi	fp,sp,8
    bcc8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    bccc:	0001883a 	nop
    bcd0:	e0bfff17 	ldw	r2,-4(fp)
    bcd4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    bcd8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    bcdc:	10000226 	beq	r2,zero,bce8 <_exit+0x2c>
    ALT_SIM_FAIL();
    bce0:	002af070 	cmpltui	zero,zero,43969
    bce4:	00000106 	br	bcec <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    bce8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    bcec:	003fff06 	br	bcec <_gp+0xffff6874>
