-- Copyright (C) 2018  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details.
--currCount[7] is currCount[7]
--register power-up is low

currCount[7] = DFFEAS(A1L2, clk, reset_n,  ,  ,  ,  , A1L467,  );


--currCount[6] is currCount[6]
--register power-up is low

currCount[6] = DFFEAS(A1L6, clk, reset_n,  ,  ,  ,  , A1L467,  );


--currCount[5] is currCount[5]
--register power-up is low

currCount[5] = DFFEAS(A1L10, clk, reset_n,  ,  ,  ,  , A1L467,  );


--currCount[4] is currCount[4]
--register power-up is low

currCount[4] = DFFEAS(A1L14, clk, reset_n,  ,  ,  ,  , A1L467,  );


--currCount[1] is currCount[1]
--register power-up is low

currCount[1] = DFFEAS(A1L18, clk, reset_n,  ,  ,  ,  , A1L467,  );


--currCount[0] is currCount[0]
--register power-up is low

currCount[0] = DFFEAS(A1L22, clk, reset_n,  ,  ,  ,  , A1L467,  );


--currCount[3] is currCount[3]
--register power-up is low

currCount[3] = DFFEAS(A1L26, clk, reset_n,  ,  ,  ,  , A1L467,  );


--currCount[2] is currCount[2]
--register power-up is low

currCount[2] = DFFEAS(A1L30, clk, reset_n,  ,  ,  ,  , A1L467,  );


--currCount[14] is currCount[14]
--register power-up is low

currCount[14] = DFFEAS(A1L34, clk, reset_n,  ,  ,  ,  , A1L467,  );


--currCount[13] is currCount[13]
--register power-up is low

currCount[13] = DFFEAS(A1L38, clk, reset_n,  ,  ,  ,  , A1L467,  );


--currCount[12] is currCount[12]
--register power-up is low

currCount[12] = DFFEAS(A1L42, clk, reset_n,  ,  ,  ,  , A1L467,  );


--currCount[11] is currCount[11]
--register power-up is low

currCount[11] = DFFEAS(A1L46, clk, reset_n,  ,  ,  ,  , A1L467,  );


--currCount[9] is currCount[9]
--register power-up is low

currCount[9] = DFFEAS(A1L50, clk, reset_n,  ,  ,  ,  , A1L467,  );


--currCount[10] is currCount[10]
--register power-up is low

currCount[10] = DFFEAS(A1L54, clk, reset_n,  ,  ,  ,  , A1L467,  );


--currCount[8] is currCount[8]
--register power-up is low

currCount[8] = DFFEAS(A1L58, clk, reset_n,  ,  ,  ,  , A1L467,  );


--currCount[18] is currCount[18]
--register power-up is low

currCount[18] = DFFEAS(A1L62, clk, reset_n,  ,  ,  ,  , A1L467,  );


--currCount[21] is currCount[21]
--register power-up is low

currCount[21] = DFFEAS(A1L66, clk, reset_n,  ,  ,  ,  , A1L467,  );


--currCount[20] is currCount[20]
--register power-up is low

currCount[20] = DFFEAS(A1L70, clk, reset_n,  ,  ,  ,  , A1L467,  );


--currCount[19] is currCount[19]
--register power-up is low

currCount[19] = DFFEAS(A1L74, clk, reset_n,  ,  ,  ,  , A1L467,  );


--currCount[17] is currCount[17]
--register power-up is low

currCount[17] = DFFEAS(A1L78, clk, reset_n,  ,  ,  ,  , A1L467,  );


--currCount[16] is currCount[16]
--register power-up is low

currCount[16] = DFFEAS(A1L82, clk, reset_n,  ,  ,  ,  , A1L467,  );


--currCount[15] is currCount[15]
--register power-up is low

currCount[15] = DFFEAS(A1L86, clk, reset_n,  ,  ,  ,  , A1L467,  );


--currCount[25] is currCount[25]
--register power-up is low

currCount[25] = DFFEAS(A1L90, clk, reset_n,  ,  ,  ,  , A1L467,  );


--currCount[28] is currCount[28]
--register power-up is low

currCount[28] = DFFEAS(A1L94, clk, reset_n,  ,  ,  ,  , A1L467,  );


--currCount[27] is currCount[27]
--register power-up is low

currCount[27] = DFFEAS(A1L98, clk, reset_n,  ,  ,  ,  , A1L467,  );


--currCount[26] is currCount[26]
--register power-up is low

currCount[26] = DFFEAS(A1L102, clk, reset_n,  ,  ,  ,  , A1L467,  );


--currCount[24] is currCount[24]
--register power-up is low

currCount[24] = DFFEAS(A1L106, clk, reset_n,  ,  ,  ,  , A1L467,  );


--currCount[23] is currCount[23]
--register power-up is low

currCount[23] = DFFEAS(A1L110, clk, reset_n,  ,  ,  ,  , A1L467,  );


--currCount[22] is currCount[22]
--register power-up is low

currCount[22] = DFFEAS(A1L114, clk, reset_n,  ,  ,  ,  , A1L467,  );


--currCount[31] is currCount[31]
--register power-up is low

currCount[31] = DFFEAS(A1L118, clk, reset_n,  ,  ,  ,  , A1L467,  );


--currCount[30] is currCount[30]
--register power-up is low

currCount[30] = DFFEAS(A1L122, clk, reset_n,  ,  ,  ,  , A1L467,  );


--currCount[29] is currCount[29]
--register power-up is low

currCount[29] = DFFEAS(A1L126, clk, reset_n,  ,  ,  ,  , A1L467,  );


--A1L130 is Add1~1
A1L130_adder_eqn = ( angleCount[7] ) + ( GND ) + ( A1L135 );
A1L130 = SUM(A1L130_adder_eqn);

--A1L131 is Add1~2
A1L131_adder_eqn = ( angleCount[7] ) + ( GND ) + ( A1L135 );
A1L131 = CARRY(A1L131_adder_eqn);


--A1L258 is Add2~1
A1L258_adder_eqn = ( angleCount[7] ) + ( VCC ) + ( A1L263 );
A1L258 = SUM(A1L258_adder_eqn);

--A1L259 is Add2~2
A1L259_adder_eqn = ( angleCount[7] ) + ( VCC ) + ( A1L263 );
A1L259 = CARRY(A1L259_adder_eqn);


--A1L2 is Add0~1
A1L2_adder_eqn = ( currCount[7] ) + ( GND ) + ( A1L7 );
A1L2 = SUM(A1L2_adder_eqn);

--A1L3 is Add0~2
A1L3_adder_eqn = ( currCount[7] ) + ( GND ) + ( A1L7 );
A1L3 = CARRY(A1L3_adder_eqn);


--A1L134 is Add1~5
A1L134_adder_eqn = ( angleCount[6] ) + ( GND ) + ( A1L139 );
A1L134 = SUM(A1L134_adder_eqn);

--A1L135 is Add1~6
A1L135_adder_eqn = ( angleCount[6] ) + ( GND ) + ( A1L139 );
A1L135 = CARRY(A1L135_adder_eqn);


--A1L262 is Add2~5
A1L262_adder_eqn = ( angleCount[6] ) + ( VCC ) + ( A1L267 );
A1L262 = SUM(A1L262_adder_eqn);

--A1L263 is Add2~6
A1L263_adder_eqn = ( angleCount[6] ) + ( VCC ) + ( A1L267 );
A1L263 = CARRY(A1L263_adder_eqn);


--A1L6 is Add0~5
A1L6_adder_eqn = ( currCount[6] ) + ( GND ) + ( A1L11 );
A1L6 = SUM(A1L6_adder_eqn);

--A1L7 is Add0~6
A1L7_adder_eqn = ( currCount[6] ) + ( GND ) + ( A1L11 );
A1L7 = CARRY(A1L7_adder_eqn);


--A1L138 is Add1~9
A1L138_adder_eqn = ( angleCount[5] ) + ( GND ) + ( A1L143 );
A1L138 = SUM(A1L138_adder_eqn);

--A1L139 is Add1~10
A1L139_adder_eqn = ( angleCount[5] ) + ( GND ) + ( A1L143 );
A1L139 = CARRY(A1L139_adder_eqn);


--A1L266 is Add2~9
A1L266_adder_eqn = ( angleCount[5] ) + ( VCC ) + ( A1L271 );
A1L266 = SUM(A1L266_adder_eqn);

--A1L267 is Add2~10
A1L267_adder_eqn = ( angleCount[5] ) + ( VCC ) + ( A1L271 );
A1L267 = CARRY(A1L267_adder_eqn);


--A1L10 is Add0~9
A1L10_adder_eqn = ( currCount[5] ) + ( GND ) + ( A1L15 );
A1L10 = SUM(A1L10_adder_eqn);

--A1L11 is Add0~10
A1L11_adder_eqn = ( currCount[5] ) + ( GND ) + ( A1L15 );
A1L11 = CARRY(A1L11_adder_eqn);


--A1L142 is Add1~13
A1L142_adder_eqn = ( angleCount[4] ) + ( GND ) + ( A1L155 );
A1L142 = SUM(A1L142_adder_eqn);

--A1L143 is Add1~14
A1L143_adder_eqn = ( angleCount[4] ) + ( GND ) + ( A1L155 );
A1L143 = CARRY(A1L143_adder_eqn);


--A1L270 is Add2~13
A1L270_adder_eqn = ( angleCount[4] ) + ( VCC ) + ( A1L283 );
A1L270 = SUM(A1L270_adder_eqn);

--A1L271 is Add2~14
A1L271_adder_eqn = ( angleCount[4] ) + ( VCC ) + ( A1L283 );
A1L271 = CARRY(A1L271_adder_eqn);


--A1L14 is Add0~13
A1L14_adder_eqn = ( currCount[4] ) + ( GND ) + ( A1L27 );
A1L14 = SUM(A1L14_adder_eqn);

--A1L15 is Add0~14
A1L15_adder_eqn = ( currCount[4] ) + ( GND ) + ( A1L27 );
A1L15 = CARRY(A1L15_adder_eqn);


--A1L146 is Add1~17
A1L146_adder_eqn = ( angleCount[1] ) + ( GND ) + ( A1L151 );
A1L146 = SUM(A1L146_adder_eqn);

--A1L147 is Add1~18
A1L147_adder_eqn = ( angleCount[1] ) + ( GND ) + ( A1L151 );
A1L147 = CARRY(A1L147_adder_eqn);


--A1L274 is Add2~17
A1L274_adder_eqn = ( angleCount[1] ) + ( VCC ) + ( A1L279 );
A1L274 = SUM(A1L274_adder_eqn);

--A1L275 is Add2~18
A1L275_adder_eqn = ( angleCount[1] ) + ( VCC ) + ( A1L279 );
A1L275 = CARRY(A1L275_adder_eqn);


--A1L18 is Add0~17
A1L18_adder_eqn = ( currCount[1] ) + ( GND ) + ( A1L23 );
A1L18 = SUM(A1L18_adder_eqn);

--A1L19 is Add0~18
A1L19_adder_eqn = ( currCount[1] ) + ( GND ) + ( A1L23 );
A1L19 = CARRY(A1L19_adder_eqn);


--A1L150 is Add1~21
A1L150_adder_eqn = ( angleCount[0] ) + ( VCC ) + ( !VCC );
A1L150 = SUM(A1L150_adder_eqn);

--A1L151 is Add1~22
A1L151_adder_eqn = ( angleCount[0] ) + ( VCC ) + ( !VCC );
A1L151 = CARRY(A1L151_adder_eqn);


--A1L278 is Add2~21
A1L278_adder_eqn = ( angleCount[0] ) + ( VCC ) + ( !VCC );
A1L278 = SUM(A1L278_adder_eqn);

--A1L279 is Add2~22
A1L279_adder_eqn = ( angleCount[0] ) + ( VCC ) + ( !VCC );
A1L279 = CARRY(A1L279_adder_eqn);


--A1L22 is Add0~21
A1L22_adder_eqn = ( currCount[0] ) + ( VCC ) + ( !VCC );
A1L22 = SUM(A1L22_adder_eqn);

--A1L23 is Add0~22
A1L23_adder_eqn = ( currCount[0] ) + ( VCC ) + ( !VCC );
A1L23 = CARRY(A1L23_adder_eqn);


--A1L154 is Add1~25
A1L154_adder_eqn = ( angleCount[3] ) + ( GND ) + ( A1L159 );
A1L154 = SUM(A1L154_adder_eqn);

--A1L155 is Add1~26
A1L155_adder_eqn = ( angleCount[3] ) + ( GND ) + ( A1L159 );
A1L155 = CARRY(A1L155_adder_eqn);


--A1L282 is Add2~25
A1L282_adder_eqn = ( angleCount[3] ) + ( VCC ) + ( A1L287 );
A1L282 = SUM(A1L282_adder_eqn);

--A1L283 is Add2~26
A1L283_adder_eqn = ( angleCount[3] ) + ( VCC ) + ( A1L287 );
A1L283 = CARRY(A1L283_adder_eqn);


--A1L26 is Add0~25
A1L26_adder_eqn = ( currCount[3] ) + ( GND ) + ( A1L31 );
A1L26 = SUM(A1L26_adder_eqn);

--A1L27 is Add0~26
A1L27_adder_eqn = ( currCount[3] ) + ( GND ) + ( A1L31 );
A1L27 = CARRY(A1L27_adder_eqn);


--A1L158 is Add1~29
A1L158_adder_eqn = ( angleCount[2] ) + ( GND ) + ( A1L147 );
A1L158 = SUM(A1L158_adder_eqn);

--A1L159 is Add1~30
A1L159_adder_eqn = ( angleCount[2] ) + ( GND ) + ( A1L147 );
A1L159 = CARRY(A1L159_adder_eqn);


--A1L286 is Add2~29
A1L286_adder_eqn = ( angleCount[2] ) + ( VCC ) + ( A1L275 );
A1L286 = SUM(A1L286_adder_eqn);

--A1L287 is Add2~30
A1L287_adder_eqn = ( angleCount[2] ) + ( VCC ) + ( A1L275 );
A1L287 = CARRY(A1L287_adder_eqn);


--A1L30 is Add0~29
A1L30_adder_eqn = ( currCount[2] ) + ( GND ) + ( A1L19 );
A1L30 = SUM(A1L30_adder_eqn);

--A1L31 is Add0~30
A1L31_adder_eqn = ( currCount[2] ) + ( GND ) + ( A1L19 );
A1L31 = CARRY(A1L31_adder_eqn);


--A1L162 is Add1~33
A1L162_adder_eqn = ( angleCount[14] ) + ( GND ) + ( A1L167 );
A1L162 = SUM(A1L162_adder_eqn);

--A1L163 is Add1~34
A1L163_adder_eqn = ( angleCount[14] ) + ( GND ) + ( A1L167 );
A1L163 = CARRY(A1L163_adder_eqn);


--A1L290 is Add2~33
A1L290_adder_eqn = ( angleCount[14] ) + ( VCC ) + ( A1L295 );
A1L290 = SUM(A1L290_adder_eqn);

--A1L291 is Add2~34
A1L291_adder_eqn = ( angleCount[14] ) + ( VCC ) + ( A1L295 );
A1L291 = CARRY(A1L291_adder_eqn);


--A1L34 is Add0~33
A1L34_adder_eqn = ( currCount[14] ) + ( GND ) + ( A1L39 );
A1L34 = SUM(A1L34_adder_eqn);

--A1L35 is Add0~34
A1L35_adder_eqn = ( currCount[14] ) + ( GND ) + ( A1L39 );
A1L35 = CARRY(A1L35_adder_eqn);


--A1L166 is Add1~37
A1L166_adder_eqn = ( angleCount[13] ) + ( GND ) + ( A1L171 );
A1L166 = SUM(A1L166_adder_eqn);

--A1L167 is Add1~38
A1L167_adder_eqn = ( angleCount[13] ) + ( GND ) + ( A1L171 );
A1L167 = CARRY(A1L167_adder_eqn);


--A1L294 is Add2~37
A1L294_adder_eqn = ( angleCount[13] ) + ( VCC ) + ( A1L299 );
A1L294 = SUM(A1L294_adder_eqn);

--A1L295 is Add2~38
A1L295_adder_eqn = ( angleCount[13] ) + ( VCC ) + ( A1L299 );
A1L295 = CARRY(A1L295_adder_eqn);


--A1L38 is Add0~37
A1L38_adder_eqn = ( currCount[13] ) + ( GND ) + ( A1L43 );
A1L38 = SUM(A1L38_adder_eqn);

--A1L39 is Add0~38
A1L39_adder_eqn = ( currCount[13] ) + ( GND ) + ( A1L43 );
A1L39 = CARRY(A1L39_adder_eqn);


--A1L170 is Add1~41
A1L170_adder_eqn = ( angleCount[12] ) + ( GND ) + ( A1L175 );
A1L170 = SUM(A1L170_adder_eqn);

--A1L171 is Add1~42
A1L171_adder_eqn = ( angleCount[12] ) + ( GND ) + ( A1L175 );
A1L171 = CARRY(A1L171_adder_eqn);


--A1L298 is Add2~41
A1L298_adder_eqn = ( angleCount[12] ) + ( VCC ) + ( A1L303 );
A1L298 = SUM(A1L298_adder_eqn);

--A1L299 is Add2~42
A1L299_adder_eqn = ( angleCount[12] ) + ( VCC ) + ( A1L303 );
A1L299 = CARRY(A1L299_adder_eqn);


--A1L42 is Add0~41
A1L42_adder_eqn = ( currCount[12] ) + ( GND ) + ( A1L47 );
A1L42 = SUM(A1L42_adder_eqn);

--A1L43 is Add0~42
A1L43_adder_eqn = ( currCount[12] ) + ( GND ) + ( A1L47 );
A1L43 = CARRY(A1L43_adder_eqn);


--A1L174 is Add1~45
A1L174_adder_eqn = ( angleCount[11] ) + ( GND ) + ( A1L183 );
A1L174 = SUM(A1L174_adder_eqn);

--A1L175 is Add1~46
A1L175_adder_eqn = ( angleCount[11] ) + ( GND ) + ( A1L183 );
A1L175 = CARRY(A1L175_adder_eqn);


--A1L302 is Add2~45
A1L302_adder_eqn = ( angleCount[11] ) + ( VCC ) + ( A1L311 );
A1L302 = SUM(A1L302_adder_eqn);

--A1L303 is Add2~46
A1L303_adder_eqn = ( angleCount[11] ) + ( VCC ) + ( A1L311 );
A1L303 = CARRY(A1L303_adder_eqn);


--A1L46 is Add0~45
A1L46_adder_eqn = ( currCount[11] ) + ( GND ) + ( A1L55 );
A1L46 = SUM(A1L46_adder_eqn);

--A1L47 is Add0~46
A1L47_adder_eqn = ( currCount[11] ) + ( GND ) + ( A1L55 );
A1L47 = CARRY(A1L47_adder_eqn);


--A1L178 is Add1~49
A1L178_adder_eqn = ( angleCount[9] ) + ( GND ) + ( A1L187 );
A1L178 = SUM(A1L178_adder_eqn);

--A1L179 is Add1~50
A1L179_adder_eqn = ( angleCount[9] ) + ( GND ) + ( A1L187 );
A1L179 = CARRY(A1L179_adder_eqn);


--A1L306 is Add2~49
A1L306_adder_eqn = ( angleCount[9] ) + ( VCC ) + ( A1L315 );
A1L306 = SUM(A1L306_adder_eqn);

--A1L307 is Add2~50
A1L307_adder_eqn = ( angleCount[9] ) + ( VCC ) + ( A1L315 );
A1L307 = CARRY(A1L307_adder_eqn);


--A1L50 is Add0~49
A1L50_adder_eqn = ( currCount[9] ) + ( GND ) + ( A1L59 );
A1L50 = SUM(A1L50_adder_eqn);

--A1L51 is Add0~50
A1L51_adder_eqn = ( currCount[9] ) + ( GND ) + ( A1L59 );
A1L51 = CARRY(A1L51_adder_eqn);


--A1L182 is Add1~53
A1L182_adder_eqn = ( angleCount[10] ) + ( GND ) + ( A1L179 );
A1L182 = SUM(A1L182_adder_eqn);

--A1L183 is Add1~54
A1L183_adder_eqn = ( angleCount[10] ) + ( GND ) + ( A1L179 );
A1L183 = CARRY(A1L183_adder_eqn);


--A1L310 is Add2~53
A1L310_adder_eqn = ( angleCount[10] ) + ( VCC ) + ( A1L307 );
A1L310 = SUM(A1L310_adder_eqn);

--A1L311 is Add2~54
A1L311_adder_eqn = ( angleCount[10] ) + ( VCC ) + ( A1L307 );
A1L311 = CARRY(A1L311_adder_eqn);


--A1L54 is Add0~53
A1L54_adder_eqn = ( currCount[10] ) + ( GND ) + ( A1L51 );
A1L54 = SUM(A1L54_adder_eqn);

--A1L55 is Add0~54
A1L55_adder_eqn = ( currCount[10] ) + ( GND ) + ( A1L51 );
A1L55 = CARRY(A1L55_adder_eqn);


--A1L186 is Add1~57
A1L186_adder_eqn = ( angleCount[8] ) + ( GND ) + ( A1L131 );
A1L186 = SUM(A1L186_adder_eqn);

--A1L187 is Add1~58
A1L187_adder_eqn = ( angleCount[8] ) + ( GND ) + ( A1L131 );
A1L187 = CARRY(A1L187_adder_eqn);


--A1L314 is Add2~57
A1L314_adder_eqn = ( angleCount[8] ) + ( VCC ) + ( A1L259 );
A1L314 = SUM(A1L314_adder_eqn);

--A1L315 is Add2~58
A1L315_adder_eqn = ( angleCount[8] ) + ( VCC ) + ( A1L259 );
A1L315 = CARRY(A1L315_adder_eqn);


--A1L58 is Add0~57
A1L58_adder_eqn = ( currCount[8] ) + ( GND ) + ( A1L3 );
A1L58 = SUM(A1L58_adder_eqn);

--A1L59 is Add0~58
A1L59_adder_eqn = ( currCount[8] ) + ( GND ) + ( A1L3 );
A1L59 = CARRY(A1L59_adder_eqn);


--A1L190 is Add1~61
A1L190_adder_eqn = ( angleCount[18] ) + ( GND ) + ( A1L207 );
A1L190 = SUM(A1L190_adder_eqn);

--A1L191 is Add1~62
A1L191_adder_eqn = ( angleCount[18] ) + ( GND ) + ( A1L207 );
A1L191 = CARRY(A1L191_adder_eqn);


--A1L318 is Add2~61
A1L318_adder_eqn = ( angleCount[18] ) + ( VCC ) + ( A1L335 );
A1L318 = SUM(A1L318_adder_eqn);

--A1L319 is Add2~62
A1L319_adder_eqn = ( angleCount[18] ) + ( VCC ) + ( A1L335 );
A1L319 = CARRY(A1L319_adder_eqn);


--A1L62 is Add0~61
A1L62_adder_eqn = ( currCount[18] ) + ( GND ) + ( A1L79 );
A1L62 = SUM(A1L62_adder_eqn);

--A1L63 is Add0~62
A1L63_adder_eqn = ( currCount[18] ) + ( GND ) + ( A1L79 );
A1L63 = CARRY(A1L63_adder_eqn);


--A1L194 is Add1~65
A1L194_adder_eqn = ( angleCount[21] ) + ( GND ) + ( A1L199 );
A1L194 = SUM(A1L194_adder_eqn);

--A1L195 is Add1~66
A1L195_adder_eqn = ( angleCount[21] ) + ( GND ) + ( A1L199 );
A1L195 = CARRY(A1L195_adder_eqn);


--A1L322 is Add2~65
A1L322_adder_eqn = ( angleCount[21] ) + ( VCC ) + ( A1L327 );
A1L322 = SUM(A1L322_adder_eqn);

--A1L323 is Add2~66
A1L323_adder_eqn = ( angleCount[21] ) + ( VCC ) + ( A1L327 );
A1L323 = CARRY(A1L323_adder_eqn);


--A1L66 is Add0~65
A1L66_adder_eqn = ( currCount[21] ) + ( GND ) + ( A1L71 );
A1L66 = SUM(A1L66_adder_eqn);

--A1L67 is Add0~66
A1L67_adder_eqn = ( currCount[21] ) + ( GND ) + ( A1L71 );
A1L67 = CARRY(A1L67_adder_eqn);


--A1L198 is Add1~69
A1L198_adder_eqn = ( angleCount[20] ) + ( GND ) + ( A1L203 );
A1L198 = SUM(A1L198_adder_eqn);

--A1L199 is Add1~70
A1L199_adder_eqn = ( angleCount[20] ) + ( GND ) + ( A1L203 );
A1L199 = CARRY(A1L199_adder_eqn);


--A1L326 is Add2~69
A1L326_adder_eqn = ( angleCount[20] ) + ( VCC ) + ( A1L331 );
A1L326 = SUM(A1L326_adder_eqn);

--A1L327 is Add2~70
A1L327_adder_eqn = ( angleCount[20] ) + ( VCC ) + ( A1L331 );
A1L327 = CARRY(A1L327_adder_eqn);


--A1L70 is Add0~69
A1L70_adder_eqn = ( currCount[20] ) + ( GND ) + ( A1L75 );
A1L70 = SUM(A1L70_adder_eqn);

--A1L71 is Add0~70
A1L71_adder_eqn = ( currCount[20] ) + ( GND ) + ( A1L75 );
A1L71 = CARRY(A1L71_adder_eqn);


--A1L202 is Add1~73
A1L202_adder_eqn = ( angleCount[19] ) + ( GND ) + ( A1L191 );
A1L202 = SUM(A1L202_adder_eqn);

--A1L203 is Add1~74
A1L203_adder_eqn = ( angleCount[19] ) + ( GND ) + ( A1L191 );
A1L203 = CARRY(A1L203_adder_eqn);


--A1L330 is Add2~73
A1L330_adder_eqn = ( angleCount[19] ) + ( VCC ) + ( A1L319 );
A1L330 = SUM(A1L330_adder_eqn);

--A1L331 is Add2~74
A1L331_adder_eqn = ( angleCount[19] ) + ( VCC ) + ( A1L319 );
A1L331 = CARRY(A1L331_adder_eqn);


--A1L74 is Add0~73
A1L74_adder_eqn = ( currCount[19] ) + ( GND ) + ( A1L63 );
A1L74 = SUM(A1L74_adder_eqn);

--A1L75 is Add0~74
A1L75_adder_eqn = ( currCount[19] ) + ( GND ) + ( A1L63 );
A1L75 = CARRY(A1L75_adder_eqn);


--A1L206 is Add1~77
A1L206_adder_eqn = ( angleCount[17] ) + ( GND ) + ( A1L211 );
A1L206 = SUM(A1L206_adder_eqn);

--A1L207 is Add1~78
A1L207_adder_eqn = ( angleCount[17] ) + ( GND ) + ( A1L211 );
A1L207 = CARRY(A1L207_adder_eqn);


--A1L334 is Add2~77
A1L334_adder_eqn = ( angleCount[17] ) + ( VCC ) + ( A1L339 );
A1L334 = SUM(A1L334_adder_eqn);

--A1L335 is Add2~78
A1L335_adder_eqn = ( angleCount[17] ) + ( VCC ) + ( A1L339 );
A1L335 = CARRY(A1L335_adder_eqn);


--A1L78 is Add0~77
A1L78_adder_eqn = ( currCount[17] ) + ( GND ) + ( A1L83 );
A1L78 = SUM(A1L78_adder_eqn);

--A1L79 is Add0~78
A1L79_adder_eqn = ( currCount[17] ) + ( GND ) + ( A1L83 );
A1L79 = CARRY(A1L79_adder_eqn);


--A1L210 is Add1~81
A1L210_adder_eqn = ( angleCount[16] ) + ( GND ) + ( A1L215 );
A1L210 = SUM(A1L210_adder_eqn);

--A1L211 is Add1~82
A1L211_adder_eqn = ( angleCount[16] ) + ( GND ) + ( A1L215 );
A1L211 = CARRY(A1L211_adder_eqn);


--A1L338 is Add2~81
A1L338_adder_eqn = ( angleCount[16] ) + ( VCC ) + ( A1L343 );
A1L338 = SUM(A1L338_adder_eqn);

--A1L339 is Add2~82
A1L339_adder_eqn = ( angleCount[16] ) + ( VCC ) + ( A1L343 );
A1L339 = CARRY(A1L339_adder_eqn);


--A1L82 is Add0~81
A1L82_adder_eqn = ( currCount[16] ) + ( GND ) + ( A1L87 );
A1L82 = SUM(A1L82_adder_eqn);

--A1L83 is Add0~82
A1L83_adder_eqn = ( currCount[16] ) + ( GND ) + ( A1L87 );
A1L83 = CARRY(A1L83_adder_eqn);


--A1L214 is Add1~85
A1L214_adder_eqn = ( angleCount[15] ) + ( GND ) + ( A1L163 );
A1L214 = SUM(A1L214_adder_eqn);

--A1L215 is Add1~86
A1L215_adder_eqn = ( angleCount[15] ) + ( GND ) + ( A1L163 );
A1L215 = CARRY(A1L215_adder_eqn);


--A1L342 is Add2~85
A1L342_adder_eqn = ( angleCount[15] ) + ( VCC ) + ( A1L291 );
A1L342 = SUM(A1L342_adder_eqn);

--A1L343 is Add2~86
A1L343_adder_eqn = ( angleCount[15] ) + ( VCC ) + ( A1L291 );
A1L343 = CARRY(A1L343_adder_eqn);


--A1L86 is Add0~85
A1L86_adder_eqn = ( currCount[15] ) + ( GND ) + ( A1L35 );
A1L86 = SUM(A1L86_adder_eqn);

--A1L87 is Add0~86
A1L87_adder_eqn = ( currCount[15] ) + ( GND ) + ( A1L35 );
A1L87 = CARRY(A1L87_adder_eqn);


--A1L218 is Add1~89
A1L218_adder_eqn = ( angleCount[25] ) + ( GND ) + ( A1L235 );
A1L218 = SUM(A1L218_adder_eqn);

--A1L219 is Add1~90
A1L219_adder_eqn = ( angleCount[25] ) + ( GND ) + ( A1L235 );
A1L219 = CARRY(A1L219_adder_eqn);


--A1L346 is Add2~89
A1L346_adder_eqn = ( angleCount[25] ) + ( VCC ) + ( A1L363 );
A1L346 = SUM(A1L346_adder_eqn);

--A1L347 is Add2~90
A1L347_adder_eqn = ( angleCount[25] ) + ( VCC ) + ( A1L363 );
A1L347 = CARRY(A1L347_adder_eqn);


--A1L90 is Add0~89
A1L90_adder_eqn = ( currCount[25] ) + ( GND ) + ( A1L107 );
A1L90 = SUM(A1L90_adder_eqn);

--A1L91 is Add0~90
A1L91_adder_eqn = ( currCount[25] ) + ( GND ) + ( A1L107 );
A1L91 = CARRY(A1L91_adder_eqn);


--A1L222 is Add1~93
A1L222_adder_eqn = ( angleCount[28] ) + ( GND ) + ( A1L227 );
A1L222 = SUM(A1L222_adder_eqn);

--A1L223 is Add1~94
A1L223_adder_eqn = ( angleCount[28] ) + ( GND ) + ( A1L227 );
A1L223 = CARRY(A1L223_adder_eqn);


--A1L350 is Add2~93
A1L350_adder_eqn = ( angleCount[28] ) + ( VCC ) + ( A1L355 );
A1L350 = SUM(A1L350_adder_eqn);

--A1L351 is Add2~94
A1L351_adder_eqn = ( angleCount[28] ) + ( VCC ) + ( A1L355 );
A1L351 = CARRY(A1L351_adder_eqn);


--A1L94 is Add0~93
A1L94_adder_eqn = ( currCount[28] ) + ( GND ) + ( A1L99 );
A1L94 = SUM(A1L94_adder_eqn);

--A1L95 is Add0~94
A1L95_adder_eqn = ( currCount[28] ) + ( GND ) + ( A1L99 );
A1L95 = CARRY(A1L95_adder_eqn);


--A1L226 is Add1~97
A1L226_adder_eqn = ( angleCount[27] ) + ( GND ) + ( A1L231 );
A1L226 = SUM(A1L226_adder_eqn);

--A1L227 is Add1~98
A1L227_adder_eqn = ( angleCount[27] ) + ( GND ) + ( A1L231 );
A1L227 = CARRY(A1L227_adder_eqn);


--A1L354 is Add2~97
A1L354_adder_eqn = ( angleCount[27] ) + ( VCC ) + ( A1L359 );
A1L354 = SUM(A1L354_adder_eqn);

--A1L355 is Add2~98
A1L355_adder_eqn = ( angleCount[27] ) + ( VCC ) + ( A1L359 );
A1L355 = CARRY(A1L355_adder_eqn);


--A1L98 is Add0~97
A1L98_adder_eqn = ( currCount[27] ) + ( GND ) + ( A1L103 );
A1L98 = SUM(A1L98_adder_eqn);

--A1L99 is Add0~98
A1L99_adder_eqn = ( currCount[27] ) + ( GND ) + ( A1L103 );
A1L99 = CARRY(A1L99_adder_eqn);


--A1L230 is Add1~101
A1L230_adder_eqn = ( angleCount[26] ) + ( GND ) + ( A1L219 );
A1L230 = SUM(A1L230_adder_eqn);

--A1L231 is Add1~102
A1L231_adder_eqn = ( angleCount[26] ) + ( GND ) + ( A1L219 );
A1L231 = CARRY(A1L231_adder_eqn);


--A1L358 is Add2~101
A1L358_adder_eqn = ( angleCount[26] ) + ( VCC ) + ( A1L347 );
A1L358 = SUM(A1L358_adder_eqn);

--A1L359 is Add2~102
A1L359_adder_eqn = ( angleCount[26] ) + ( VCC ) + ( A1L347 );
A1L359 = CARRY(A1L359_adder_eqn);


--A1L102 is Add0~101
A1L102_adder_eqn = ( currCount[26] ) + ( GND ) + ( A1L91 );
A1L102 = SUM(A1L102_adder_eqn);

--A1L103 is Add0~102
A1L103_adder_eqn = ( currCount[26] ) + ( GND ) + ( A1L91 );
A1L103 = CARRY(A1L103_adder_eqn);


--A1L234 is Add1~105
A1L234_adder_eqn = ( angleCount[24] ) + ( GND ) + ( A1L239 );
A1L234 = SUM(A1L234_adder_eqn);

--A1L235 is Add1~106
A1L235_adder_eqn = ( angleCount[24] ) + ( GND ) + ( A1L239 );
A1L235 = CARRY(A1L235_adder_eqn);


--A1L362 is Add2~105
A1L362_adder_eqn = ( angleCount[24] ) + ( VCC ) + ( A1L367 );
A1L362 = SUM(A1L362_adder_eqn);

--A1L363 is Add2~106
A1L363_adder_eqn = ( angleCount[24] ) + ( VCC ) + ( A1L367 );
A1L363 = CARRY(A1L363_adder_eqn);


--A1L106 is Add0~105
A1L106_adder_eqn = ( currCount[24] ) + ( GND ) + ( A1L111 );
A1L106 = SUM(A1L106_adder_eqn);

--A1L107 is Add0~106
A1L107_adder_eqn = ( currCount[24] ) + ( GND ) + ( A1L111 );
A1L107 = CARRY(A1L107_adder_eqn);


--A1L238 is Add1~109
A1L238_adder_eqn = ( angleCount[23] ) + ( GND ) + ( A1L243 );
A1L238 = SUM(A1L238_adder_eqn);

--A1L239 is Add1~110
A1L239_adder_eqn = ( angleCount[23] ) + ( GND ) + ( A1L243 );
A1L239 = CARRY(A1L239_adder_eqn);


--A1L366 is Add2~109
A1L366_adder_eqn = ( angleCount[23] ) + ( VCC ) + ( A1L371 );
A1L366 = SUM(A1L366_adder_eqn);

--A1L367 is Add2~110
A1L367_adder_eqn = ( angleCount[23] ) + ( VCC ) + ( A1L371 );
A1L367 = CARRY(A1L367_adder_eqn);


--A1L110 is Add0~109
A1L110_adder_eqn = ( currCount[23] ) + ( GND ) + ( A1L115 );
A1L110 = SUM(A1L110_adder_eqn);

--A1L111 is Add0~110
A1L111_adder_eqn = ( currCount[23] ) + ( GND ) + ( A1L115 );
A1L111 = CARRY(A1L111_adder_eqn);


--A1L242 is Add1~113
A1L242_adder_eqn = ( angleCount[22] ) + ( GND ) + ( A1L195 );
A1L242 = SUM(A1L242_adder_eqn);

--A1L243 is Add1~114
A1L243_adder_eqn = ( angleCount[22] ) + ( GND ) + ( A1L195 );
A1L243 = CARRY(A1L243_adder_eqn);


--A1L370 is Add2~113
A1L370_adder_eqn = ( angleCount[22] ) + ( VCC ) + ( A1L323 );
A1L370 = SUM(A1L370_adder_eqn);

--A1L371 is Add2~114
A1L371_adder_eqn = ( angleCount[22] ) + ( VCC ) + ( A1L323 );
A1L371 = CARRY(A1L371_adder_eqn);


--A1L114 is Add0~113
A1L114_adder_eqn = ( currCount[22] ) + ( GND ) + ( A1L67 );
A1L114 = SUM(A1L114_adder_eqn);

--A1L115 is Add0~114
A1L115_adder_eqn = ( currCount[22] ) + ( GND ) + ( A1L67 );
A1L115 = CARRY(A1L115_adder_eqn);


--A1L246 is Add1~117
A1L246_adder_eqn = ( angleCount[31] ) + ( GND ) + ( A1L251 );
A1L246 = SUM(A1L246_adder_eqn);


--A1L374 is Add2~117
A1L374_adder_eqn = ( angleCount[31] ) + ( VCC ) + ( A1L379 );
A1L374 = SUM(A1L374_adder_eqn);


--A1L118 is Add0~117
A1L118_adder_eqn = ( currCount[31] ) + ( GND ) + ( A1L123 );
A1L118 = SUM(A1L118_adder_eqn);


--A1L250 is Add1~121
A1L250_adder_eqn = ( angleCount[30] ) + ( GND ) + ( A1L255 );
A1L250 = SUM(A1L250_adder_eqn);

--A1L251 is Add1~122
A1L251_adder_eqn = ( angleCount[30] ) + ( GND ) + ( A1L255 );
A1L251 = CARRY(A1L251_adder_eqn);


--A1L378 is Add2~121
A1L378_adder_eqn = ( angleCount[30] ) + ( VCC ) + ( A1L383 );
A1L378 = SUM(A1L378_adder_eqn);

--A1L379 is Add2~122
A1L379_adder_eqn = ( angleCount[30] ) + ( VCC ) + ( A1L383 );
A1L379 = CARRY(A1L379_adder_eqn);


--A1L122 is Add0~121
A1L122_adder_eqn = ( currCount[30] ) + ( GND ) + ( A1L127 );
A1L122 = SUM(A1L122_adder_eqn);

--A1L123 is Add0~122
A1L123_adder_eqn = ( currCount[30] ) + ( GND ) + ( A1L127 );
A1L123 = CARRY(A1L123_adder_eqn);


--A1L254 is Add1~125
A1L254_adder_eqn = ( angleCount[29] ) + ( GND ) + ( A1L223 );
A1L254 = SUM(A1L254_adder_eqn);

--A1L255 is Add1~126
A1L255_adder_eqn = ( angleCount[29] ) + ( GND ) + ( A1L223 );
A1L255 = CARRY(A1L255_adder_eqn);


--A1L382 is Add2~125
A1L382_adder_eqn = ( angleCount[29] ) + ( VCC ) + ( A1L351 );
A1L382 = SUM(A1L382_adder_eqn);

--A1L383 is Add2~126
A1L383_adder_eqn = ( angleCount[29] ) + ( VCC ) + ( A1L351 );
A1L383 = CARRY(A1L383_adder_eqn);


--A1L126 is Add0~125
A1L126_adder_eqn = ( currCount[29] ) + ( GND ) + ( A1L95 );
A1L126 = SUM(A1L126_adder_eqn);

--A1L127 is Add0~126
A1L127_adder_eqn = ( currCount[29] ) + ( GND ) + ( A1L95 );
A1L127 = CARRY(A1L127_adder_eqn);


--writedata[31] is writedata[31]
writedata[31] = INPUT();


--out_wave_export is out_wave_export
out_wave_export = OUTPUT(out_wave);


--irq is irq
irq = OUTPUT(A1L461Q);


--out_wave is out_wave
--register power-up is low

out_wave = DFFEAS(A1L662, clk,  ,  ,  ,  ,  ,  ,  );


--A1L461Q is irq~reg0
--register power-up is low

A1L461Q = DFFEAS(A1L762, clk,  ,  , reset_n,  ,  ,  ,  );


--reset_n is reset_n
reset_n = INPUT();


--current_state.INT_RIGHT is current_state.INT_RIGHT
--register power-up is low

current_state.INT_RIGHT = DFFEAS(next_state.INT_RIGHT, clk, reset_n,  ,  ,  ,  ,  ,  );


--current_state.INT_LEFT is current_state.INT_LEFT
--register power-up is low

current_state.INT_LEFT = DFFEAS(next_state.INT_LEFT, clk, reset_n,  ,  ,  ,  ,  ,  );


--angleCount[7] is angleCount[7]
--register power-up is low

angleCount[7] = DFFEAS(A1L754, clk,  ,  , A1L421,  ,  ,  ,  );


--angleCount[6] is angleCount[6]
--register power-up is low

angleCount[6] = DFFEAS(A1L755, clk,  ,  , A1L421,  ,  ,  ,  );


--A1L468 is LessThan1~0
A1L468 = (!angleCount[7] & (!currCount[7] & (!angleCount[6] $ (currCount[6])))) # (angleCount[7] & (currCount[7] & (!angleCount[6] $ (currCount[6]))));


--angleCount[5] is angleCount[5]
--register power-up is low

angleCount[5] = DFFEAS(A1L756, clk,  ,  , A1L421,  ,  ,  ,  );


--angleCount[4] is angleCount[4]
--register power-up is low

angleCount[4] = DFFEAS(A1L757, clk,  ,  , A1L421,  ,  ,  ,  );


--angleCount[1] is angleCount[1]
--register power-up is low

angleCount[1] = DFFEAS(A1L760, clk,  ,  , A1L421,  ,  ,  ,  );


--angleCount[0] is angleCount[0]
--register power-up is low

angleCount[0] = DFFEAS(A1L761, clk,  ,  , A1L421,  ,  ,  ,  );


--angleCount[3] is angleCount[3]
--register power-up is low

angleCount[3] = DFFEAS(A1L758, clk,  ,  , A1L421,  ,  ,  ,  );


--angleCount[2] is angleCount[2]
--register power-up is low

angleCount[2] = DFFEAS(A1L759, clk,  ,  , A1L421,  ,  ,  ,  );


--A1L469 is LessThan1~1
A1L469 = (!angleCount[3] & (!currCount[3] & (!angleCount[2] $ (currCount[2])))) # (angleCount[3] & (currCount[3] & (!angleCount[2] $ (currCount[2]))));


--A1L470 is LessThan1~2
A1L470 = (!angleCount[3] & (!currCount[3] & (angleCount[2] & !currCount[2]))) # (angleCount[3] & ((!currCount[3]) # ((angleCount[2] & !currCount[2]))));


--A1L471 is LessThan1~3
A1L471 = ( A1L494 & ( A1L495 & ( (!A1L469 & (A1L470 & (!angleCount[7] $ (currCount[7])))) # (A1L469 & ((!angleCount[7] $ (currCount[7])))) ) ) ) # ( A1L494 & ( !A1L495 & ( (A1L470 & (!angleCount[7] $ (currCount[7]))) ) ) );


--A1L472 is LessThan1~4
A1L472 = (!angleCount[7] & (!currCount[7] & (angleCount[6] & !currCount[6]))) # (angleCount[7] & ((!currCount[7]) # ((angleCount[6] & !currCount[6]))));


--A1L473 is LessThan1~5
A1L473 = ( currCount[4] & ( !A1L472 & ( (!angleCount[5]) # ((!A1L468) # (currCount[5])) ) ) ) # ( !currCount[4] & ( !A1L472 & ( (!A1L468) # ((!angleCount[5] & ((!angleCount[4]) # (currCount[5]))) # (angleCount[5] & (currCount[5] & !angleCount[4]))) ) ) );


--angleCount[14] is angleCount[14]
--register power-up is low

angleCount[14] = DFFEAS(A1L747, clk,  ,  , A1L421,  ,  ,  ,  );


--angleCount[13] is angleCount[13]
--register power-up is low

angleCount[13] = DFFEAS(A1L748, clk,  ,  , A1L421,  ,  ,  ,  );


--angleCount[12] is angleCount[12]
--register power-up is low

angleCount[12] = DFFEAS(A1L749, clk,  ,  , A1L421,  ,  ,  ,  );


--A1L474 is LessThan1~6
A1L474 = ( angleCount[12] & ( currCount[12] & ( (!angleCount[14] & (!currCount[14] & (!angleCount[13] $ (currCount[13])))) # (angleCount[14] & (currCount[14] & (!angleCount[13] $ (currCount[13])))) ) ) ) # ( !angleCount[12] & ( !currCount[12] & ( (!angleCount[14] & (!currCount[14] & (!angleCount[13] $ (currCount[13])))) # (angleCount[14] & (currCount[14] & (!angleCount[13] $ (currCount[13])))) ) ) );


--angleCount[11] is angleCount[11]
--register power-up is low

angleCount[11] = DFFEAS(A1L750, clk,  ,  , A1L421,  ,  ,  ,  );


--angleCount[9] is angleCount[9]
--register power-up is low

angleCount[9] = DFFEAS(A1L752, clk,  ,  , A1L421,  ,  ,  ,  );


--angleCount[10] is angleCount[10]
--register power-up is low

angleCount[10] = DFFEAS(A1L751, clk,  ,  , A1L421,  ,  ,  ,  );


--angleCount[8] is angleCount[8]
--register power-up is low

angleCount[8] = DFFEAS(A1L753, clk,  ,  , A1L421,  ,  ,  ,  );


--A1L475 is LessThan1~7
A1L475 = ( A1L502 & ( A1L503 & ( (!angleCount[9] & (!currCount[9] & (!angleCount[14] $ (currCount[14])))) # (angleCount[9] & (currCount[9] & (!angleCount[14] $ (currCount[14])))) ) ) );


--A1L476 is LessThan1~8
A1L476 = ( angleCount[12] & ( currCount[12] & ( (!angleCount[14] & (!currCount[14] & (angleCount[13] & !currCount[13]))) # (angleCount[14] & ((!currCount[14]) # ((angleCount[13] & !currCount[13])))) ) ) ) # ( !angleCount[12] & ( currCount[12] & ( (!angleCount[14] & (!currCount[14] & (angleCount[13] & !currCount[13]))) # (angleCount[14] & ((!currCount[14]) # ((angleCount[13] & !currCount[13])))) ) ) ) # ( angleCount[12] & ( !currCount[12] & ( (!angleCount[14] & (!currCount[14] & ((!currCount[13]) # (angleCount[13])))) # (angleCount[14] & ((!currCount[14]) # ((!currCount[13]) # (angleCount[13])))) ) ) ) # ( !angleCount[12] & ( !currCount[12] & ( (!angleCount[14] & (!currCount[14] & (angleCount[13] & !currCount[13]))) # (angleCount[14] & ((!currCount[14]) # ((angleCount[13] & !currCount[13])))) ) ) );


--A1L477 is LessThan1~9
A1L477 = ( currCount[10] & ( !A1L476 & ( (!angleCount[11]) # ((!A1L474) # (currCount[11])) ) ) ) # ( !currCount[10] & ( !A1L476 & ( (!A1L474) # ((!angleCount[11] & ((!angleCount[10]) # (currCount[11]))) # (angleCount[11] & (currCount[11] & !angleCount[10]))) ) ) );


--A1L478 is LessThan1~10
A1L478 = ( A1L504 & ( A1L505 & ( (!angleCount[9] & (!currCount[9] & (angleCount[8] & !currCount[8]))) # (angleCount[9] & ((!currCount[9]) # ((angleCount[8] & !currCount[8])))) ) ) );


--angleCount[18] is angleCount[18]
--register power-up is low

angleCount[18] = DFFEAS(A1L743, clk,  ,  , A1L421,  ,  ,  ,  );


--angleCount[21] is angleCount[21]
--register power-up is low

angleCount[21] = DFFEAS(A1L740, clk,  ,  , A1L421,  ,  ,  ,  );


--angleCount[20] is angleCount[20]
--register power-up is low

angleCount[20] = DFFEAS(A1L741, clk,  ,  , A1L421,  ,  ,  ,  );


--angleCount[19] is angleCount[19]
--register power-up is low

angleCount[19] = DFFEAS(A1L742, clk,  ,  , A1L421,  ,  ,  ,  );


--A1L479 is LessThan1~11
A1L479 = ( angleCount[19] & ( currCount[19] & ( (!angleCount[21] & (!currCount[21] & (!angleCount[20] $ (currCount[20])))) # (angleCount[21] & (currCount[21] & (!angleCount[20] $ (currCount[20])))) ) ) ) # ( !angleCount[19] & ( !currCount[19] & ( (!angleCount[21] & (!currCount[21] & (!angleCount[20] $ (currCount[20])))) # (angleCount[21] & (currCount[21] & (!angleCount[20] $ (currCount[20])))) ) ) );


--angleCount[17] is angleCount[17]
--register power-up is low

angleCount[17] = DFFEAS(A1L744, clk,  ,  , A1L421,  ,  ,  ,  );


--angleCount[16] is angleCount[16]
--register power-up is low

angleCount[16] = DFFEAS(A1L745, clk,  ,  , A1L421,  ,  ,  ,  );


--angleCount[15] is angleCount[15]
--register power-up is low

angleCount[15] = DFFEAS(A1L746, clk,  ,  , A1L421,  ,  ,  ,  );


--A1L480 is LessThan1~12
A1L480 = ( A1L496 & ( A1L497 & ( (!angleCount[18] & (!currCount[18] & (!angleCount[21] $ (currCount[21])))) # (angleCount[18] & (currCount[18] & (!angleCount[21] $ (currCount[21])))) ) ) );


--A1L481 is LessThan1~13
A1L481 = ( A1L478 & ( A1L480 ) ) # ( !A1L478 & ( A1L480 & ( (!A1L477) # ((A1L475 & ((!A1L473) # (A1L471)))) ) ) );


--A1L482 is LessThan1~14
A1L482 = ( angleCount[19] & ( currCount[19] & ( (!angleCount[21] & (!currCount[21] & (angleCount[20] & !currCount[20]))) # (angleCount[21] & ((!currCount[21]) # ((angleCount[20] & !currCount[20])))) ) ) ) # ( !angleCount[19] & ( currCount[19] & ( (!angleCount[21] & (!currCount[21] & (angleCount[20] & !currCount[20]))) # (angleCount[21] & ((!currCount[21]) # ((angleCount[20] & !currCount[20])))) ) ) ) # ( angleCount[19] & ( !currCount[19] & ( (!angleCount[21] & (!currCount[21] & ((!currCount[20]) # (angleCount[20])))) # (angleCount[21] & ((!currCount[21]) # ((!currCount[20]) # (angleCount[20])))) ) ) ) # ( !angleCount[19] & ( !currCount[19] & ( (!angleCount[21] & (!currCount[21] & (angleCount[20] & !currCount[20]))) # (angleCount[21] & ((!currCount[21]) # ((angleCount[20] & !currCount[20])))) ) ) );


--A1L483 is LessThan1~15
A1L483 = ( A1L498 & ( A1L499 & ( (!A1L479 & !A1L482) ) ) ) # ( !A1L498 & ( A1L499 & ( (!A1L479 & !A1L482) ) ) ) # ( A1L498 & ( !A1L499 & ( (!A1L482 & ((!A1L479) # (!angleCount[17] $ (!currCount[17])))) ) ) ) # ( !A1L498 & ( !A1L499 & ( !A1L482 ) ) );


--angleCount[25] is angleCount[25]
--register power-up is low

angleCount[25] = DFFEAS(A1L736, clk,  ,  , A1L421,  ,  ,  ,  );


--angleCount[28] is angleCount[28]
--register power-up is low

angleCount[28] = DFFEAS(A1L733, clk,  ,  , A1L421,  ,  ,  ,  );


--angleCount[27] is angleCount[27]
--register power-up is low

angleCount[27] = DFFEAS(A1L734, clk,  ,  , A1L421,  ,  ,  ,  );


--angleCount[26] is angleCount[26]
--register power-up is low

angleCount[26] = DFFEAS(A1L735, clk,  ,  , A1L421,  ,  ,  ,  );


--A1L484 is LessThan1~16
A1L484 = ( angleCount[26] & ( currCount[26] & ( (!angleCount[28] & (!currCount[28] & (!angleCount[27] $ (currCount[27])))) # (angleCount[28] & (currCount[28] & (!angleCount[27] $ (currCount[27])))) ) ) ) # ( !angleCount[26] & ( !currCount[26] & ( (!angleCount[28] & (!currCount[28] & (!angleCount[27] $ (currCount[27])))) # (angleCount[28] & (currCount[28] & (!angleCount[27] $ (currCount[27])))) ) ) );


--angleCount[24] is angleCount[24]
--register power-up is low

angleCount[24] = DFFEAS(A1L737, clk,  ,  , A1L421,  ,  ,  ,  );


--A1L485 is LessThan1~17
A1L485 = !angleCount[24] $ (!currCount[24]);


--angleCount[23] is angleCount[23]
--register power-up is low

angleCount[23] = DFFEAS(A1L738, clk,  ,  , A1L421,  ,  ,  ,  );


--A1L486 is LessThan1~18
A1L486 = !angleCount[23] $ (!currCount[23]);


--angleCount[22] is angleCount[22]
--register power-up is low

angleCount[22] = DFFEAS(A1L739, clk,  ,  , A1L421,  ,  ,  ,  );


--A1L487 is LessThan1~19
A1L487 = !angleCount[22] $ (!currCount[22]);


--A1L488 is LessThan1~20
A1L488 = ( !A1L486 & ( !A1L487 & ( (A1L484 & (!A1L485 & (!angleCount[25] $ (currCount[25])))) ) ) );


--A1L489 is LessThan1~21
A1L489 = ( angleCount[26] & ( currCount[26] & ( (!angleCount[28] & (!currCount[28] & (angleCount[27] & !currCount[27]))) # (angleCount[28] & ((!currCount[28]) # ((angleCount[27] & !currCount[27])))) ) ) ) # ( !angleCount[26] & ( currCount[26] & ( (!angleCount[28] & (!currCount[28] & (angleCount[27] & !currCount[27]))) # (angleCount[28] & ((!currCount[28]) # ((angleCount[27] & !currCount[27])))) ) ) ) # ( angleCount[26] & ( !currCount[26] & ( (!angleCount[28] & (!currCount[28] & ((!currCount[27]) # (angleCount[27])))) # (angleCount[28] & ((!currCount[28]) # ((!currCount[27]) # (angleCount[27])))) ) ) ) # ( !angleCount[26] & ( !currCount[26] & ( (!angleCount[28] & (!currCount[28] & (angleCount[27] & !currCount[27]))) # (angleCount[28] & ((!currCount[28]) # ((angleCount[27] & !currCount[27])))) ) ) );


--A1L490 is LessThan1~22
A1L490 = ( A1L501 & ( (!A1L484 & !A1L489) ) ) # ( !A1L501 & ( (!A1L489 & ((!A1L484) # ((!A1L500) # (A1L485)))) ) );


--angleCount[31] is angleCount[31]
--register power-up is low

angleCount[31] = DFFEAS(A1L730, clk,  ,  , A1L421,  ,  ,  ,  );


--angleCount[30] is angleCount[30]
--register power-up is low

angleCount[30] = DFFEAS(A1L731, clk,  ,  , A1L421,  ,  ,  ,  );


--angleCount[29] is angleCount[29]
--register power-up is low

angleCount[29] = DFFEAS(A1L732, clk,  ,  , A1L421,  ,  ,  ,  );


--A1L491 is LessThan1~23
A1L491 = ( angleCount[29] & ( currCount[29] & ( (!angleCount[31] & (!currCount[31] & (!angleCount[30] $ (currCount[30])))) # (angleCount[31] & (currCount[31] & (!angleCount[30] $ (currCount[30])))) ) ) ) # ( !angleCount[29] & ( !currCount[29] & ( (!angleCount[31] & (!currCount[31] & (!angleCount[30] $ (currCount[30])))) # (angleCount[31] & (currCount[31] & (!angleCount[30] $ (currCount[30])))) ) ) );


--A1L492 is LessThan1~24
A1L492 = ( angleCount[29] & ( currCount[29] & ( (!angleCount[31] & (((angleCount[30] & !currCount[30])) # (currCount[31]))) # (angleCount[31] & (currCount[31] & (angleCount[30] & !currCount[30]))) ) ) ) # ( !angleCount[29] & ( currCount[29] & ( (!angleCount[31] & (((angleCount[30] & !currCount[30])) # (currCount[31]))) # (angleCount[31] & (currCount[31] & (angleCount[30] & !currCount[30]))) ) ) ) # ( angleCount[29] & ( !currCount[29] & ( (!angleCount[31] & (((!currCount[30]) # (angleCount[30])) # (currCount[31]))) # (angleCount[31] & (currCount[31] & ((!currCount[30]) # (angleCount[30])))) ) ) ) # ( !angleCount[29] & ( !currCount[29] & ( (!angleCount[31] & (((angleCount[30] & !currCount[30])) # (currCount[31]))) # (angleCount[31] & (currCount[31] & (angleCount[30] & !currCount[30]))) ) ) );


--A1L493 is LessThan1~25
A1L493 = ( A1L491 & ( !A1L492 & ( (A1L490 & ((!A1L488) # ((!A1L481 & A1L483)))) ) ) ) # ( !A1L491 & ( !A1L492 ) );


--A1L662 is out_wave~0
A1L662 = ( A1L493 & ( (out_wave & ((!reset_n) # ((current_state.INT_LEFT) # (current_state.INT_RIGHT)))) ) ) # ( !A1L493 & ( ((reset_n & (!current_state.INT_RIGHT & !current_state.INT_LEFT))) # (out_wave) ) );


--clk is clk
clk = INPUT();


--current_state.SW_RIGHT is current_state.SW_RIGHT
--register power-up is low

current_state.SW_RIGHT = DFFEAS(next_state.SW_RIGHT, clk, reset_n,  ,  ,  ,  ,  ,  );


--minAngleCount[7] is minAngleCount[7]
--register power-up is low

minAngleCount[7] = DFFEAS(reg[0][7], clk,  ,  , A1L586,  ,  ,  ,  );


--minAngleCount[6] is minAngleCount[6]
--register power-up is low

minAngleCount[6] = DFFEAS(reg[0][6], clk,  ,  , A1L586,  ,  ,  ,  );


--A1L546 is LessThan3~0
A1L546 = (!currCount[7] & (!minAngleCount[7] & (!currCount[6] $ (minAngleCount[6])))) # (currCount[7] & (minAngleCount[7] & (!currCount[6] $ (minAngleCount[6]))));


--minAngleCount[5] is minAngleCount[5]
--register power-up is low

minAngleCount[5] = DFFEAS(reg[0][5], clk,  ,  , A1L586,  ,  ,  ,  );


--minAngleCount[4] is minAngleCount[4]
--register power-up is low

minAngleCount[4] = DFFEAS(reg[0][4], clk,  ,  , A1L586,  ,  ,  ,  );


--minAngleCount[1] is minAngleCount[1]
--register power-up is low

minAngleCount[1] = DFFEAS(reg[0][1], clk,  ,  , A1L586,  ,  ,  ,  );


--minAngleCount[0] is minAngleCount[0]
--register power-up is low

minAngleCount[0] = DFFEAS(A1L623, clk,  ,  , A1L586,  ,  ,  ,  );


--minAngleCount[3] is minAngleCount[3]
--register power-up is low

minAngleCount[3] = DFFEAS(reg[0][3], clk,  ,  , A1L586,  ,  ,  ,  );


--minAngleCount[2] is minAngleCount[2]
--register power-up is low

minAngleCount[2] = DFFEAS(A1L626, clk,  ,  , A1L586,  ,  ,  ,  );


--A1L547 is LessThan3~1
A1L547 = (!currCount[3] & (!minAngleCount[3] & (!currCount[2] $ (!minAngleCount[2])))) # (currCount[3] & (minAngleCount[3] & (!currCount[2] $ (!minAngleCount[2]))));


--A1L548 is LessThan3~2
A1L548 = (!currCount[3] & (currCount[2] & (!minAngleCount[3] & minAngleCount[2]))) # (currCount[3] & ((!minAngleCount[3]) # ((currCount[2] & minAngleCount[2]))));


--A1L549 is LessThan3~3
A1L549 = ( A1L574 & ( A1L575 & ( (!A1L547 & (A1L548 & (!currCount[7] $ (minAngleCount[7])))) # (A1L547 & ((!currCount[7] $ (minAngleCount[7])))) ) ) ) # ( A1L574 & ( !A1L575 & ( (A1L548 & (!currCount[7] $ (minAngleCount[7]))) ) ) );


--A1L550 is LessThan3~4
A1L550 = (!currCount[7] & (currCount[6] & (!minAngleCount[7] & !minAngleCount[6]))) # (currCount[7] & ((!minAngleCount[7]) # ((currCount[6] & !minAngleCount[6]))));


--A1L551 is LessThan3~5
A1L551 = ( minAngleCount[4] & ( !A1L550 & ( (!currCount[5]) # ((!A1L546) # (minAngleCount[5])) ) ) ) # ( !minAngleCount[4] & ( !A1L550 & ( (!A1L546) # ((!currCount[5] & ((!currCount[4]) # (minAngleCount[5]))) # (currCount[5] & (!currCount[4] & minAngleCount[5]))) ) ) );


--minAngleCount[14] is minAngleCount[14]
--register power-up is low

minAngleCount[14] = DFFEAS(reg[0][14], clk,  ,  , A1L586,  ,  ,  ,  );


--minAngleCount[13] is minAngleCount[13]
--register power-up is low

minAngleCount[13] = DFFEAS(reg[0][13], clk,  ,  , A1L586,  ,  ,  ,  );


--minAngleCount[12] is minAngleCount[12]
--register power-up is low

minAngleCount[12] = DFFEAS(reg[0][12], clk,  ,  , A1L586,  ,  ,  ,  );


--A1L552 is LessThan3~6
A1L552 = ( minAngleCount[13] & ( minAngleCount[12] & ( (currCount[13] & (currCount[12] & (!currCount[14] $ (minAngleCount[14])))) ) ) ) # ( !minAngleCount[13] & ( minAngleCount[12] & ( (!currCount[13] & (currCount[12] & (!currCount[14] $ (minAngleCount[14])))) ) ) ) # ( minAngleCount[13] & ( !minAngleCount[12] & ( (currCount[13] & (!currCount[12] & (!currCount[14] $ (minAngleCount[14])))) ) ) ) # ( !minAngleCount[13] & ( !minAngleCount[12] & ( (!currCount[13] & (!currCount[12] & (!currCount[14] $ (minAngleCount[14])))) ) ) );


--minAngleCount[11] is minAngleCount[11]
--register power-up is low

minAngleCount[11] = DFFEAS(reg[0][11], clk,  ,  , A1L586,  ,  ,  ,  );


--minAngleCount[9] is minAngleCount[9]
--register power-up is low

minAngleCount[9] = DFFEAS(reg[0][9], clk,  ,  , A1L586,  ,  ,  ,  );


--minAngleCount[10] is minAngleCount[10]
--register power-up is low

minAngleCount[10] = DFFEAS(reg[0][10], clk,  ,  , A1L586,  ,  ,  ,  );


--minAngleCount[8] is minAngleCount[8]
--register power-up is low

minAngleCount[8] = DFFEAS(reg[0][8], clk,  ,  , A1L586,  ,  ,  ,  );


--A1L553 is LessThan3~7
A1L553 = ( A1L576 & ( A1L577 & ( (!currCount[9] & (!minAngleCount[9] & (!currCount[14] $ (minAngleCount[14])))) # (currCount[9] & (minAngleCount[9] & (!currCount[14] $ (minAngleCount[14])))) ) ) );


--A1L554 is LessThan3~8
A1L554 = ( minAngleCount[13] & ( minAngleCount[12] & ( (currCount[14] & !minAngleCount[14]) ) ) ) # ( !minAngleCount[13] & ( minAngleCount[12] & ( (!currCount[14] & (currCount[13] & !minAngleCount[14])) # (currCount[14] & ((!minAngleCount[14]) # (currCount[13]))) ) ) ) # ( minAngleCount[13] & ( !minAngleCount[12] & ( (!currCount[14] & (currCount[13] & (currCount[12] & !minAngleCount[14]))) # (currCount[14] & ((!minAngleCount[14]) # ((currCount[13] & currCount[12])))) ) ) ) # ( !minAngleCount[13] & ( !minAngleCount[12] & ( (!currCount[14] & (!minAngleCount[14] & ((currCount[12]) # (currCount[13])))) # (currCount[14] & (((!minAngleCount[14]) # (currCount[12])) # (currCount[13]))) ) ) );


--A1L555 is LessThan3~9
A1L555 = ( minAngleCount[10] & ( !A1L554 & ( (!currCount[11]) # ((!A1L552) # (minAngleCount[11])) ) ) ) # ( !minAngleCount[10] & ( !A1L554 & ( (!A1L552) # ((!currCount[11] & ((!currCount[10]) # (minAngleCount[11]))) # (currCount[11] & (!currCount[10] & minAngleCount[11]))) ) ) );


--A1L556 is LessThan3~10
A1L556 = ( A1L578 & ( A1L579 & ( (!currCount[9] & (!minAngleCount[9] & (currCount[8] & !minAngleCount[8]))) # (currCount[9] & ((!minAngleCount[9]) # ((currCount[8] & !minAngleCount[8])))) ) ) );


--minAngleCount[18] is minAngleCount[18]
--register power-up is low

minAngleCount[18] = DFFEAS(reg[0][18], clk,  ,  , A1L586,  ,  ,  ,  );


--minAngleCount[21] is minAngleCount[21]
--register power-up is low

minAngleCount[21] = DFFEAS(reg[0][21], clk,  ,  , A1L586,  ,  ,  ,  );


--minAngleCount[20] is minAngleCount[20]
--register power-up is low

minAngleCount[20] = DFFEAS(reg[0][20], clk,  ,  , A1L586,  ,  ,  ,  );


--minAngleCount[19] is minAngleCount[19]
--register power-up is low

minAngleCount[19] = DFFEAS(reg[0][19], clk,  ,  , A1L586,  ,  ,  ,  );


--A1L557 is LessThan3~11
A1L557 = ( minAngleCount[20] & ( minAngleCount[19] & ( (currCount[20] & (currCount[19] & (!currCount[21] $ (minAngleCount[21])))) ) ) ) # ( !minAngleCount[20] & ( minAngleCount[19] & ( (!currCount[20] & (currCount[19] & (!currCount[21] $ (minAngleCount[21])))) ) ) ) # ( minAngleCount[20] & ( !minAngleCount[19] & ( (currCount[20] & (!currCount[19] & (!currCount[21] $ (minAngleCount[21])))) ) ) ) # ( !minAngleCount[20] & ( !minAngleCount[19] & ( (!currCount[20] & (!currCount[19] & (!currCount[21] $ (minAngleCount[21])))) ) ) );


--minAngleCount[17] is minAngleCount[17]
--register power-up is low

minAngleCount[17] = DFFEAS(reg[0][17], clk,  ,  , A1L586,  ,  ,  ,  );


--minAngleCount[16] is minAngleCount[16]
--register power-up is low

minAngleCount[16] = DFFEAS(reg[0][16], clk,  ,  , A1L586,  ,  ,  ,  );


--minAngleCount[15] is minAngleCount[15]
--register power-up is low

minAngleCount[15] = DFFEAS(reg[0][15], clk,  ,  , A1L586,  ,  ,  ,  );


--A1L558 is LessThan3~12
A1L558 = ( A1L580 & ( A1L581 & ( (!currCount[18] & (!minAngleCount[18] & (!currCount[21] $ (minAngleCount[21])))) # (currCount[18] & (minAngleCount[18] & (!currCount[21] $ (minAngleCount[21])))) ) ) );


--A1L559 is LessThan3~13
A1L559 = ( A1L556 & ( A1L558 ) ) # ( !A1L556 & ( A1L558 & ( (!A1L555) # ((A1L553 & ((!A1L551) # (A1L549)))) ) ) );


--A1L560 is LessThan3~14
A1L560 = ( minAngleCount[20] & ( minAngleCount[19] & ( (currCount[21] & !minAngleCount[21]) ) ) ) # ( !minAngleCount[20] & ( minAngleCount[19] & ( (!currCount[21] & (currCount[20] & !minAngleCount[21])) # (currCount[21] & ((!minAngleCount[21]) # (currCount[20]))) ) ) ) # ( minAngleCount[20] & ( !minAngleCount[19] & ( (!currCount[21] & (currCount[20] & (currCount[19] & !minAngleCount[21]))) # (currCount[21] & ((!minAngleCount[21]) # ((currCount[20] & currCount[19])))) ) ) ) # ( !minAngleCount[20] & ( !minAngleCount[19] & ( (!currCount[21] & (!minAngleCount[21] & ((currCount[19]) # (currCount[20])))) # (currCount[21] & (((!minAngleCount[21]) # (currCount[19])) # (currCount[20]))) ) ) );


--A1L561 is LessThan3~15
A1L561 = ( A1L582 & ( A1L583 & ( (!A1L557 & !A1L560) ) ) ) # ( !A1L582 & ( A1L583 & ( (!A1L557 & !A1L560) ) ) ) # ( A1L582 & ( !A1L583 & ( (!A1L560 & ((!A1L557) # (!currCount[17] $ (!minAngleCount[17])))) ) ) ) # ( !A1L582 & ( !A1L583 & ( !A1L560 ) ) );


--minAngleCount[25] is minAngleCount[25]
--register power-up is low

minAngleCount[25] = DFFEAS(reg[0][25], clk,  ,  , A1L586,  ,  ,  ,  );


--minAngleCount[28] is minAngleCount[28]
--register power-up is low

minAngleCount[28] = DFFEAS(reg[0][28], clk,  ,  , A1L586,  ,  ,  ,  );


--minAngleCount[27] is minAngleCount[27]
--register power-up is low

minAngleCount[27] = DFFEAS(reg[0][27], clk,  ,  , A1L586,  ,  ,  ,  );


--minAngleCount[26] is minAngleCount[26]
--register power-up is low

minAngleCount[26] = DFFEAS(reg[0][26], clk,  ,  , A1L586,  ,  ,  ,  );


--A1L562 is LessThan3~16
A1L562 = ( minAngleCount[27] & ( minAngleCount[26] & ( (currCount[27] & (currCount[26] & (!currCount[28] $ (minAngleCount[28])))) ) ) ) # ( !minAngleCount[27] & ( minAngleCount[26] & ( (!currCount[27] & (currCount[26] & (!currCount[28] $ (minAngleCount[28])))) ) ) ) # ( minAngleCount[27] & ( !minAngleCount[26] & ( (currCount[27] & (!currCount[26] & (!currCount[28] $ (minAngleCount[28])))) ) ) ) # ( !minAngleCount[27] & ( !minAngleCount[26] & ( (!currCount[27] & (!currCount[26] & (!currCount[28] $ (minAngleCount[28])))) ) ) );


--minAngleCount[24] is minAngleCount[24]
--register power-up is low

minAngleCount[24] = DFFEAS(reg[0][24], clk,  ,  , A1L586,  ,  ,  ,  );


--A1L563 is LessThan3~17
A1L563 = !currCount[24] $ (!minAngleCount[24]);


--minAngleCount[23] is minAngleCount[23]
--register power-up is low

minAngleCount[23] = DFFEAS(reg[0][23], clk,  ,  , A1L586,  ,  ,  ,  );


--A1L564 is LessThan3~18
A1L564 = !currCount[23] $ (!minAngleCount[23]);


--minAngleCount[22] is minAngleCount[22]
--register power-up is low

minAngleCount[22] = DFFEAS(reg[0][22], clk,  ,  , A1L586,  ,  ,  ,  );


--A1L565 is LessThan3~19
A1L565 = !currCount[22] $ (!minAngleCount[22]);


--A1L566 is LessThan3~20
A1L566 = ( !A1L564 & ( !A1L565 & ( (A1L562 & (!A1L563 & (!currCount[25] $ (minAngleCount[25])))) ) ) );


--A1L567 is LessThan3~21
A1L567 = (A1L562 & (!A1L563 & (!currCount[25] $ (minAngleCount[25]))));


--A1L568 is LessThan3~22
A1L568 = ( minAngleCount[27] & ( minAngleCount[26] & ( (currCount[28] & !minAngleCount[28]) ) ) ) # ( !minAngleCount[27] & ( minAngleCount[26] & ( (!currCount[28] & (currCount[27] & !minAngleCount[28])) # (currCount[28] & ((!minAngleCount[28]) # (currCount[27]))) ) ) ) # ( minAngleCount[27] & ( !minAngleCount[26] & ( (!currCount[28] & (currCount[27] & (currCount[26] & !minAngleCount[28]))) # (currCount[28] & ((!minAngleCount[28]) # ((currCount[27] & currCount[26])))) ) ) ) # ( !minAngleCount[27] & ( !minAngleCount[26] & ( (!currCount[28] & (!minAngleCount[28] & ((currCount[26]) # (currCount[27])))) # (currCount[28] & (((!minAngleCount[28]) # (currCount[26])) # (currCount[27]))) ) ) );


--A1L569 is LessThan3~23
A1L569 = ( minAngleCount[24] & ( !A1L568 & ( (!currCount[25]) # ((!A1L562) # (minAngleCount[25])) ) ) ) # ( !minAngleCount[24] & ( !A1L568 & ( (!A1L562) # ((!currCount[25] & ((!currCount[24]) # (minAngleCount[25]))) # (currCount[25] & (!currCount[24] & minAngleCount[25]))) ) ) );


--A1L570 is LessThan3~24
A1L570 = ( minAngleCount[22] & ( A1L569 & ( (!currCount[23]) # ((!A1L567) # (minAngleCount[23])) ) ) ) # ( !minAngleCount[22] & ( A1L569 & ( (!A1L567) # ((!currCount[23] & ((!currCount[22]) # (minAngleCount[23]))) # (currCount[23] & (!currCount[22] & minAngleCount[23]))) ) ) );


--minAngleCount[30] is minAngleCount[30]
--register power-up is low

minAngleCount[30] = DFFEAS(reg[0][30], clk,  ,  , A1L586,  ,  ,  ,  );


--minAngleCount[29] is minAngleCount[29]
--register power-up is low

minAngleCount[29] = DFFEAS(reg[0][29], clk,  ,  , A1L586,  ,  ,  ,  );


--A1L571 is LessThan3~25
A1L571 = ( minAngleCount[29] & ( (!currCount[31] & (currCount[29] & (!currCount[30] $ (minAngleCount[30])))) ) ) # ( !minAngleCount[29] & ( (!currCount[31] & (!currCount[29] & (!currCount[30] $ (minAngleCount[30])))) ) );


--A1L572 is LessThan3~26
A1L572 = ( minAngleCount[29] & ( (!currCount[31] & (currCount[30] & !minAngleCount[30])) ) ) # ( !minAngleCount[29] & ( (!currCount[31] & ((!currCount[30] & (currCount[29] & !minAngleCount[30])) # (currCount[30] & ((!minAngleCount[30]) # (currCount[29]))))) ) );


--A1L573 is LessThan3~27
A1L573 = ( A1L571 & ( !A1L572 & ( (A1L570 & ((!A1L566) # ((!A1L559 & A1L561)))) ) ) ) # ( !A1L571 & ( !A1L572 ) );


--current_state.SW_LEFT is current_state.SW_LEFT
--register power-up is low

current_state.SW_LEFT = DFFEAS(next_state.SW_LEFT, clk, reset_n,  ,  ,  ,  ,  ,  );


--maxAngleCount[7] is maxAngleCount[7]
--register power-up is low

maxAngleCount[7] = DFFEAS(reg[1][7], clk,  ,  , A1L586,  ,  ,  ,  );


--maxAngleCount[6] is maxAngleCount[6]
--register power-up is low

maxAngleCount[6] = DFFEAS(reg[1][6], clk,  ,  , A1L586,  ,  ,  ,  );


--A1L506 is LessThan2~0
A1L506 = (!angleCount[7] & (!maxAngleCount[7] & (!angleCount[6] $ (maxAngleCount[6])))) # (angleCount[7] & (maxAngleCount[7] & (!angleCount[6] $ (maxAngleCount[6]))));


--maxAngleCount[5] is maxAngleCount[5]
--register power-up is low

maxAngleCount[5] = DFFEAS(reg[1][5], clk,  ,  , A1L586,  ,  ,  ,  );


--A1L507 is LessThan2~1
A1L507 = !angleCount[5] $ (!maxAngleCount[5]);


--maxAngleCount[4] is maxAngleCount[4]
--register power-up is low

maxAngleCount[4] = DFFEAS(reg[1][4], clk,  ,  , A1L586,  ,  ,  ,  );


--A1L508 is LessThan2~2
A1L508 = !angleCount[4] $ (!maxAngleCount[4]);


--maxAngleCount[1] is maxAngleCount[1]
--register power-up is low

maxAngleCount[1] = DFFEAS(A1L589, clk,  ,  , A1L586,  ,  ,  ,  );


--maxAngleCount[0] is maxAngleCount[0]
--register power-up is low

maxAngleCount[0] = DFFEAS(A1L587, clk,  ,  , A1L586,  ,  ,  ,  );


--A1L509 is LessThan2~3
A1L509 = (!angleCount[1] & ((!maxAngleCount[1]) # ((!angleCount[0] & !maxAngleCount[0])))) # (angleCount[1] & (!angleCount[0] & (!maxAngleCount[1] & !maxAngleCount[0])));


--maxAngleCount[3] is maxAngleCount[3]
--register power-up is low

maxAngleCount[3] = DFFEAS(A1L593, clk,  ,  , A1L586,  ,  ,  ,  );


--maxAngleCount[2] is maxAngleCount[2]
--register power-up is low

maxAngleCount[2] = DFFEAS(A1L591, clk,  ,  , A1L586,  ,  ,  ,  );


--A1L510 is LessThan2~4
A1L510 = (!angleCount[3] & (maxAngleCount[3] & (!angleCount[2] $ (!maxAngleCount[2])))) # (angleCount[3] & (!maxAngleCount[3] & (!angleCount[2] $ (!maxAngleCount[2]))));


--A1L511 is LessThan2~5
A1L511 = (!angleCount[3] & ((!maxAngleCount[3]) # ((!angleCount[2] & !maxAngleCount[2])))) # (angleCount[3] & (!angleCount[2] & (!maxAngleCount[3] & !maxAngleCount[2])));


--A1L512 is LessThan2~6
A1L512 = ( A1L510 & ( A1L511 & ( (A1L506 & (!A1L507 & !A1L508)) ) ) ) # ( !A1L510 & ( A1L511 & ( (A1L506 & (!A1L507 & !A1L508)) ) ) ) # ( A1L510 & ( !A1L511 & ( (A1L506 & (!A1L507 & (!A1L508 & A1L509))) ) ) );


--A1L513 is LessThan2~7
A1L513 = (!angleCount[7] & (((!angleCount[6] & maxAngleCount[6])) # (maxAngleCount[7]))) # (angleCount[7] & (!angleCount[6] & (maxAngleCount[7] & maxAngleCount[6])));


--A1L514 is LessThan2~8
A1L514 = ( maxAngleCount[4] & ( !A1L513 & ( (!A1L506) # ((!angleCount[5] & (angleCount[4] & !maxAngleCount[5])) # (angleCount[5] & ((!maxAngleCount[5]) # (angleCount[4])))) ) ) ) # ( !maxAngleCount[4] & ( !A1L513 & ( ((!maxAngleCount[5]) # (!A1L506)) # (angleCount[5]) ) ) );


--maxAngleCount[14] is maxAngleCount[14]
--register power-up is low

maxAngleCount[14] = DFFEAS(reg[1][14], clk,  ,  , A1L586,  ,  ,  ,  );


--maxAngleCount[13] is maxAngleCount[13]
--register power-up is low

maxAngleCount[13] = DFFEAS(reg[1][13], clk,  ,  , A1L586,  ,  ,  ,  );


--maxAngleCount[12] is maxAngleCount[12]
--register power-up is low

maxAngleCount[12] = DFFEAS(reg[1][12], clk,  ,  , A1L586,  ,  ,  ,  );


--A1L515 is LessThan2~9
A1L515 = ( maxAngleCount[13] & ( maxAngleCount[12] & ( (angleCount[13] & (angleCount[12] & (!angleCount[14] $ (maxAngleCount[14])))) ) ) ) # ( !maxAngleCount[13] & ( maxAngleCount[12] & ( (!angleCount[13] & (angleCount[12] & (!angleCount[14] $ (maxAngleCount[14])))) ) ) ) # ( maxAngleCount[13] & ( !maxAngleCount[12] & ( (angleCount[13] & (!angleCount[12] & (!angleCount[14] $ (maxAngleCount[14])))) ) ) ) # ( !maxAngleCount[13] & ( !maxAngleCount[12] & ( (!angleCount[13] & (!angleCount[12] & (!angleCount[14] $ (maxAngleCount[14])))) ) ) );


--maxAngleCount[11] is maxAngleCount[11]
--register power-up is low

maxAngleCount[11] = DFFEAS(reg[1][11], clk,  ,  , A1L586,  ,  ,  ,  );


--A1L516 is LessThan2~10
A1L516 = !angleCount[11] $ (!maxAngleCount[11]);


--maxAngleCount[9] is maxAngleCount[9]
--register power-up is low

maxAngleCount[9] = DFFEAS(reg[1][9], clk,  ,  , A1L586,  ,  ,  ,  );


--maxAngleCount[10] is maxAngleCount[10]
--register power-up is low

maxAngleCount[10] = DFFEAS(reg[1][10], clk,  ,  , A1L586,  ,  ,  ,  );


--A1L517 is LessThan2~11
A1L517 = !angleCount[10] $ (!maxAngleCount[10]);


--maxAngleCount[8] is maxAngleCount[8]
--register power-up is low

maxAngleCount[8] = DFFEAS(reg[1][8], clk,  ,  , A1L586,  ,  ,  ,  );


--A1L518 is LessThan2~12
A1L518 = !angleCount[8] $ (!maxAngleCount[8]);


--A1L519 is LessThan2~13
A1L519 = ( !A1L517 & ( !A1L518 & ( (A1L515 & (!A1L516 & (!angleCount[9] $ (maxAngleCount[9])))) ) ) );


--A1L520 is LessThan2~14
A1L520 = ( maxAngleCount[13] & ( maxAngleCount[12] & ( (!angleCount[14] & ((!angleCount[13]) # ((!angleCount[12]) # (maxAngleCount[14])))) # (angleCount[14] & (maxAngleCount[14] & ((!angleCount[13]) # (!angleCount[12])))) ) ) ) # ( !maxAngleCount[13] & ( maxAngleCount[12] & ( (!angleCount[14] & (((!angleCount[13] & !angleCount[12])) # (maxAngleCount[14]))) # (angleCount[14] & (!angleCount[13] & (!angleCount[12] & maxAngleCount[14]))) ) ) ) # ( maxAngleCount[13] & ( !maxAngleCount[12] & ( (!angleCount[14] & ((!angleCount[13]) # (maxAngleCount[14]))) # (angleCount[14] & (!angleCount[13] & maxAngleCount[14])) ) ) ) # ( !maxAngleCount[13] & ( !maxAngleCount[12] & ( (!angleCount[14] & maxAngleCount[14]) ) ) );


--A1L521 is LessThan2~15
A1L521 = ( maxAngleCount[10] & ( !A1L520 & ( (!A1L515) # ((!angleCount[11] & (angleCount[10] & !maxAngleCount[11])) # (angleCount[11] & ((!maxAngleCount[11]) # (angleCount[10])))) ) ) ) # ( !maxAngleCount[10] & ( !A1L520 & ( ((!maxAngleCount[11]) # (!A1L515)) # (angleCount[11]) ) ) );


--A1L522 is LessThan2~16
A1L522 = (!angleCount[8] & maxAngleCount[8]);


--A1L523 is LessThan2~17
A1L523 = ( !A1L517 & ( A1L522 & ( (A1L515 & (!A1L516 & ((!angleCount[9]) # (maxAngleCount[9])))) ) ) ) # ( !A1L517 & ( !A1L522 & ( (!angleCount[9] & (A1L515 & (!A1L516 & maxAngleCount[9]))) ) ) );


--maxAngleCount[18] is maxAngleCount[18]
--register power-up is low

maxAngleCount[18] = DFFEAS(reg[1][18], clk,  ,  , A1L586,  ,  ,  ,  );


--maxAngleCount[21] is maxAngleCount[21]
--register power-up is low

maxAngleCount[21] = DFFEAS(reg[1][21], clk,  ,  , A1L586,  ,  ,  ,  );


--maxAngleCount[20] is maxAngleCount[20]
--register power-up is low

maxAngleCount[20] = DFFEAS(reg[1][20], clk,  ,  , A1L586,  ,  ,  ,  );


--maxAngleCount[19] is maxAngleCount[19]
--register power-up is low

maxAngleCount[19] = DFFEAS(reg[1][19], clk,  ,  , A1L586,  ,  ,  ,  );


--A1L524 is LessThan2~18
A1L524 = ( maxAngleCount[20] & ( maxAngleCount[19] & ( (angleCount[20] & (angleCount[19] & (!angleCount[21] $ (maxAngleCount[21])))) ) ) ) # ( !maxAngleCount[20] & ( maxAngleCount[19] & ( (!angleCount[20] & (angleCount[19] & (!angleCount[21] $ (maxAngleCount[21])))) ) ) ) # ( maxAngleCount[20] & ( !maxAngleCount[19] & ( (angleCount[20] & (!angleCount[19] & (!angleCount[21] $ (maxAngleCount[21])))) ) ) ) # ( !maxAngleCount[20] & ( !maxAngleCount[19] & ( (!angleCount[20] & (!angleCount[19] & (!angleCount[21] $ (maxAngleCount[21])))) ) ) );


--maxAngleCount[17] is maxAngleCount[17]
--register power-up is low

maxAngleCount[17] = DFFEAS(reg[1][17], clk,  ,  , A1L586,  ,  ,  ,  );


--A1L525 is LessThan2~19
A1L525 = !angleCount[17] $ (!maxAngleCount[17]);


--maxAngleCount[16] is maxAngleCount[16]
--register power-up is low

maxAngleCount[16] = DFFEAS(reg[1][16], clk,  ,  , A1L586,  ,  ,  ,  );


--A1L526 is LessThan2~20
A1L526 = !angleCount[16] $ (!maxAngleCount[16]);


--maxAngleCount[15] is maxAngleCount[15]
--register power-up is low

maxAngleCount[15] = DFFEAS(reg[1][15], clk,  ,  , A1L586,  ,  ,  ,  );


--A1L527 is LessThan2~21
A1L527 = !angleCount[15] $ (!maxAngleCount[15]);


--A1L528 is LessThan2~22
A1L528 = ( !A1L526 & ( !A1L527 & ( (A1L524 & (!A1L525 & (!angleCount[18] $ (maxAngleCount[18])))) ) ) );


--A1L529 is LessThan2~23
A1L529 = ( A1L523 & ( A1L528 ) ) # ( !A1L523 & ( A1L528 & ( (!A1L521) # ((A1L519 & ((!A1L514) # (A1L512)))) ) ) );


--A1L530 is LessThan2~24
A1L530 = (A1L524 & (!A1L525 & (!angleCount[18] $ (maxAngleCount[18]))));


--A1L531 is LessThan2~25
A1L531 = ( maxAngleCount[20] & ( maxAngleCount[19] & ( (!angleCount[21] & ((!angleCount[20]) # ((!angleCount[19]) # (maxAngleCount[21])))) # (angleCount[21] & (maxAngleCount[21] & ((!angleCount[20]) # (!angleCount[19])))) ) ) ) # ( !maxAngleCount[20] & ( maxAngleCount[19] & ( (!angleCount[21] & (((!angleCount[20] & !angleCount[19])) # (maxAngleCount[21]))) # (angleCount[21] & (!angleCount[20] & (!angleCount[19] & maxAngleCount[21]))) ) ) ) # ( maxAngleCount[20] & ( !maxAngleCount[19] & ( (!angleCount[21] & ((!angleCount[20]) # (maxAngleCount[21]))) # (angleCount[21] & (!angleCount[20] & maxAngleCount[21])) ) ) ) # ( !maxAngleCount[20] & ( !maxAngleCount[19] & ( (!angleCount[21] & maxAngleCount[21]) ) ) );


--A1L532 is LessThan2~26
A1L532 = ( maxAngleCount[17] & ( !A1L531 & ( (!A1L524) # ((!angleCount[18] & (angleCount[17] & !maxAngleCount[18])) # (angleCount[18] & ((!maxAngleCount[18]) # (angleCount[17])))) ) ) ) # ( !maxAngleCount[17] & ( !A1L531 & ( ((!maxAngleCount[18]) # (!A1L524)) # (angleCount[18]) ) ) );


--A1L533 is LessThan2~27
A1L533 = ( maxAngleCount[15] & ( A1L532 & ( (!A1L530) # ((!angleCount[16] & (angleCount[15] & !maxAngleCount[16])) # (angleCount[16] & ((!maxAngleCount[16]) # (angleCount[15])))) ) ) ) # ( !maxAngleCount[15] & ( A1L532 & ( ((!maxAngleCount[16]) # (!A1L530)) # (angleCount[16]) ) ) );


--maxAngleCount[25] is maxAngleCount[25]
--register power-up is low

maxAngleCount[25] = DFFEAS(reg[1][25], clk,  ,  , A1L586,  ,  ,  ,  );


--maxAngleCount[28] is maxAngleCount[28]
--register power-up is low

maxAngleCount[28] = DFFEAS(reg[1][28], clk,  ,  , A1L586,  ,  ,  ,  );


--maxAngleCount[27] is maxAngleCount[27]
--register power-up is low

maxAngleCount[27] = DFFEAS(reg[1][27], clk,  ,  , A1L586,  ,  ,  ,  );


--maxAngleCount[26] is maxAngleCount[26]
--register power-up is low

maxAngleCount[26] = DFFEAS(reg[1][26], clk,  ,  , A1L586,  ,  ,  ,  );


--A1L534 is LessThan2~28
A1L534 = ( maxAngleCount[27] & ( maxAngleCount[26] & ( (angleCount[27] & (angleCount[26] & (!angleCount[28] $ (maxAngleCount[28])))) ) ) ) # ( !maxAngleCount[27] & ( maxAngleCount[26] & ( (!angleCount[27] & (angleCount[26] & (!angleCount[28] $ (maxAngleCount[28])))) ) ) ) # ( maxAngleCount[27] & ( !maxAngleCount[26] & ( (angleCount[27] & (!angleCount[26] & (!angleCount[28] $ (maxAngleCount[28])))) ) ) ) # ( !maxAngleCount[27] & ( !maxAngleCount[26] & ( (!angleCount[27] & (!angleCount[26] & (!angleCount[28] $ (maxAngleCount[28])))) ) ) );


--maxAngleCount[24] is maxAngleCount[24]
--register power-up is low

maxAngleCount[24] = DFFEAS(reg[1][24], clk,  ,  , A1L586,  ,  ,  ,  );


--A1L535 is LessThan2~29
A1L535 = !angleCount[24] $ (!maxAngleCount[24]);


--maxAngleCount[23] is maxAngleCount[23]
--register power-up is low

maxAngleCount[23] = DFFEAS(reg[1][23], clk,  ,  , A1L586,  ,  ,  ,  );


--A1L536 is LessThan2~30
A1L536 = !angleCount[23] $ (!maxAngleCount[23]);


--maxAngleCount[22] is maxAngleCount[22]
--register power-up is low

maxAngleCount[22] = DFFEAS(reg[1][22], clk,  ,  , A1L586,  ,  ,  ,  );


--A1L537 is LessThan2~31
A1L537 = !angleCount[22] $ (!maxAngleCount[22]);


--A1L538 is LessThan2~32
A1L538 = ( !A1L536 & ( !A1L537 & ( (A1L534 & (!A1L535 & (!angleCount[25] $ (maxAngleCount[25])))) ) ) );


--A1L539 is LessThan2~33
A1L539 = (A1L534 & (!A1L535 & (!angleCount[25] $ (maxAngleCount[25]))));


--A1L540 is LessThan2~34
A1L540 = ( maxAngleCount[27] & ( maxAngleCount[26] & ( (!angleCount[28] & ((!angleCount[27]) # ((!angleCount[26]) # (maxAngleCount[28])))) # (angleCount[28] & (maxAngleCount[28] & ((!angleCount[27]) # (!angleCount[26])))) ) ) ) # ( !maxAngleCount[27] & ( maxAngleCount[26] & ( (!angleCount[28] & (((!angleCount[27] & !angleCount[26])) # (maxAngleCount[28]))) # (angleCount[28] & (!angleCount[27] & (!angleCount[26] & maxAngleCount[28]))) ) ) ) # ( maxAngleCount[27] & ( !maxAngleCount[26] & ( (!angleCount[28] & ((!angleCount[27]) # (maxAngleCount[28]))) # (angleCount[28] & (!angleCount[27] & maxAngleCount[28])) ) ) ) # ( !maxAngleCount[27] & ( !maxAngleCount[26] & ( (!angleCount[28] & maxAngleCount[28]) ) ) );


--A1L541 is LessThan2~35
A1L541 = ( maxAngleCount[24] & ( !A1L540 & ( (!A1L534) # ((!angleCount[25] & (angleCount[24] & !maxAngleCount[25])) # (angleCount[25] & ((!maxAngleCount[25]) # (angleCount[24])))) ) ) ) # ( !maxAngleCount[24] & ( !A1L540 & ( ((!maxAngleCount[25]) # (!A1L534)) # (angleCount[25]) ) ) );


--A1L542 is LessThan2~36
A1L542 = ( maxAngleCount[22] & ( A1L541 & ( (!A1L539) # ((!angleCount[23] & (angleCount[22] & !maxAngleCount[23])) # (angleCount[23] & ((!maxAngleCount[23]) # (angleCount[22])))) ) ) ) # ( !maxAngleCount[22] & ( A1L541 & ( ((!maxAngleCount[23]) # (!A1L539)) # (angleCount[23]) ) ) );


--maxAngleCount[30] is maxAngleCount[30]
--register power-up is low

maxAngleCount[30] = DFFEAS(reg[1][30], clk,  ,  , A1L586,  ,  ,  ,  );


--maxAngleCount[29] is maxAngleCount[29]
--register power-up is low

maxAngleCount[29] = DFFEAS(reg[1][29], clk,  ,  , A1L586,  ,  ,  ,  );


--A1L543 is LessThan2~37
A1L543 = ( maxAngleCount[29] & ( (!angleCount[31] & (angleCount[29] & (!angleCount[30] $ (maxAngleCount[30])))) ) ) # ( !maxAngleCount[29] & ( (!angleCount[31] & (!angleCount[29] & (!angleCount[30] $ (maxAngleCount[30])))) ) );


--A1L544 is LessThan2~38
A1L544 = ( maxAngleCount[29] & ( (!angleCount[31] & ((!angleCount[30] & (angleCount[29] & !maxAngleCount[30])) # (angleCount[30] & ((!maxAngleCount[30]) # (angleCount[29]))))) ) ) # ( !maxAngleCount[29] & ( (!angleCount[31] & ((!maxAngleCount[30]) # (angleCount[30]))) ) );


--A1L545 is LessThan2~39
A1L545 = ( A1L543 & ( A1L544 & ( (A1L542 & ((!A1L538) # ((!A1L529 & A1L533)))) ) ) ) # ( !A1L543 & ( A1L544 ) );


--A1L762 is Selector33~0
A1L762 = (!current_state.SW_RIGHT & (((!current_state.SW_LEFT & A1L545)))) # (current_state.SW_RIGHT & (((!current_state.SW_LEFT & A1L545)) # (A1L573)));


--next_state.INT_RIGHT is next_state.INT_RIGHT
--register power-up is low

next_state.INT_RIGHT = DFFEAS(A1L764, clk, reset_n,  ,  ,  ,  ,  ,  );


--next_state.INT_LEFT is next_state.INT_LEFT
--register power-up is low

next_state.INT_LEFT = DFFEAS(A1L766, clk, reset_n,  ,  ,  ,  ,  ,  );


--A1L393 is angleCount[5]~0
A1L393 = !current_state.INT_LEFT $ (!current_state.SW_RIGHT);


--A1L394 is angleCount[5]~1
A1L394 = !current_state.INT_RIGHT $ (!current_state.SW_RIGHT);


--A1L754 is Selector24~0
A1L754 = ( A1L393 & ( A1L394 & ( A1L258 ) ) ) # ( !A1L393 & ( A1L394 & ( minAngleCount[7] ) ) ) # ( A1L393 & ( !A1L394 & ( maxAngleCount[7] ) ) ) # ( !A1L393 & ( !A1L394 & ( A1L130 ) ) );


--A1L421 is angleCount[31]~2
A1L421 = (reset_n & (((!current_state.SW_RIGHT & current_state.SW_LEFT)) # (A1L493)));


--A1L462 is LessThan0~0
A1L462 = ( !currCount[5] & ( (!currCount[10] & (!currCount[9] & (!currCount[7] & !currCount[6]))) ) );


--A1L463 is LessThan0~1
A1L463 = ( !currCount[12] & ( !currCount[11] & ( (!currCount[16] & (!currCount[15] & (!currCount[14] & !currCount[13]))) ) ) );


--A1L464 is LessThan0~2
A1L464 = ( !currCount[18] & ( !currCount[17] & ( (!currCount[22] & (!currCount[21] & (!currCount[20] & !currCount[19]))) ) ) );


--A1L465 is LessThan0~3
A1L465 = ( currCount[3] & ( currCount[2] & ( (!currCount[27] & (!currCount[26] & (!currCount[25] & !currCount[4]))) ) ) ) # ( !currCount[3] & ( currCount[2] & ( (!currCount[27] & (!currCount[26] & (!currCount[25] & !currCount[4]))) ) ) ) # ( currCount[3] & ( !currCount[2] & ( (!currCount[27] & (!currCount[26] & (!currCount[25] & !currCount[4]))) ) ) ) # ( !currCount[3] & ( !currCount[2] & ( (!currCount[27] & (!currCount[26] & !currCount[25])) ) ) );


--A1L466 is LessThan0~4
A1L466 = ( !currCount[23] & ( !currCount[8] & ( (!currCount[30] & (!currCount[29] & (!currCount[28] & !currCount[24]))) ) ) );


--A1L467 is LessThan0~5
A1L467 = ( A1L465 & ( A1L466 & ( (!currCount[31] & ((!A1L462) # ((!A1L463) # (!A1L464)))) ) ) ) # ( !A1L465 & ( A1L466 & ( !currCount[31] ) ) ) # ( A1L465 & ( !A1L466 & ( !currCount[31] ) ) ) # ( !A1L465 & ( !A1L466 & ( !currCount[31] ) ) );


--A1L755 is Selector25~0
A1L755 = ( A1L393 & ( A1L394 & ( A1L262 ) ) ) # ( !A1L393 & ( A1L394 & ( minAngleCount[6] ) ) ) # ( A1L393 & ( !A1L394 & ( maxAngleCount[6] ) ) ) # ( !A1L393 & ( !A1L394 & ( A1L134 ) ) );


--A1L756 is Selector26~0
A1L756 = ( A1L393 & ( A1L394 & ( A1L266 ) ) ) # ( !A1L393 & ( A1L394 & ( minAngleCount[5] ) ) ) # ( A1L393 & ( !A1L394 & ( maxAngleCount[5] ) ) ) # ( !A1L393 & ( !A1L394 & ( A1L138 ) ) );


--A1L757 is Selector27~0
A1L757 = ( A1L393 & ( A1L394 & ( A1L270 ) ) ) # ( !A1L393 & ( A1L394 & ( minAngleCount[4] ) ) ) # ( A1L393 & ( !A1L394 & ( maxAngleCount[4] ) ) ) # ( !A1L393 & ( !A1L394 & ( A1L142 ) ) );


--A1L760 is Selector30~0
A1L760 = ( A1L393 & ( A1L394 & ( A1L274 ) ) ) # ( !A1L393 & ( A1L394 & ( minAngleCount[1] ) ) ) # ( A1L393 & ( !A1L394 & ( !maxAngleCount[1] ) ) ) # ( !A1L393 & ( !A1L394 & ( A1L146 ) ) );


--A1L761 is Selector31~0
A1L761 = ( A1L393 & ( A1L394 & ( A1L278 ) ) ) # ( !A1L393 & ( A1L394 & ( !minAngleCount[0] ) ) ) # ( A1L393 & ( !A1L394 & ( !maxAngleCount[0] ) ) ) # ( !A1L393 & ( !A1L394 & ( A1L150 ) ) );


--A1L758 is Selector28~0
A1L758 = ( A1L393 & ( A1L394 & ( A1L282 ) ) ) # ( !A1L393 & ( A1L394 & ( minAngleCount[3] ) ) ) # ( A1L393 & ( !A1L394 & ( !maxAngleCount[3] ) ) ) # ( !A1L393 & ( !A1L394 & ( A1L154 ) ) );


--A1L759 is Selector29~0
A1L759 = ( A1L393 & ( A1L394 & ( A1L286 ) ) ) # ( !A1L393 & ( A1L394 & ( !minAngleCount[2] ) ) ) # ( A1L393 & ( !A1L394 & ( !maxAngleCount[2] ) ) ) # ( !A1L393 & ( !A1L394 & ( A1L158 ) ) );


--A1L747 is Selector17~0
A1L747 = ( A1L393 & ( A1L394 & ( A1L290 ) ) ) # ( !A1L393 & ( A1L394 & ( minAngleCount[14] ) ) ) # ( A1L393 & ( !A1L394 & ( maxAngleCount[14] ) ) ) # ( !A1L393 & ( !A1L394 & ( A1L162 ) ) );


--A1L748 is Selector18~0
A1L748 = ( A1L393 & ( A1L394 & ( A1L294 ) ) ) # ( !A1L393 & ( A1L394 & ( minAngleCount[13] ) ) ) # ( A1L393 & ( !A1L394 & ( maxAngleCount[13] ) ) ) # ( !A1L393 & ( !A1L394 & ( A1L166 ) ) );


--A1L749 is Selector19~0
A1L749 = ( A1L393 & ( A1L394 & ( A1L298 ) ) ) # ( !A1L393 & ( A1L394 & ( minAngleCount[12] ) ) ) # ( A1L393 & ( !A1L394 & ( maxAngleCount[12] ) ) ) # ( !A1L393 & ( !A1L394 & ( A1L170 ) ) );


--A1L750 is Selector20~0
A1L750 = ( A1L393 & ( A1L394 & ( A1L302 ) ) ) # ( !A1L393 & ( A1L394 & ( minAngleCount[11] ) ) ) # ( A1L393 & ( !A1L394 & ( maxAngleCount[11] ) ) ) # ( !A1L393 & ( !A1L394 & ( A1L174 ) ) );


--A1L752 is Selector22~0
A1L752 = ( A1L393 & ( A1L394 & ( A1L306 ) ) ) # ( !A1L393 & ( A1L394 & ( minAngleCount[9] ) ) ) # ( A1L393 & ( !A1L394 & ( maxAngleCount[9] ) ) ) # ( !A1L393 & ( !A1L394 & ( A1L178 ) ) );


--A1L751 is Selector21~0
A1L751 = ( A1L393 & ( A1L394 & ( A1L310 ) ) ) # ( !A1L393 & ( A1L394 & ( minAngleCount[10] ) ) ) # ( A1L393 & ( !A1L394 & ( maxAngleCount[10] ) ) ) # ( !A1L393 & ( !A1L394 & ( A1L182 ) ) );


--A1L753 is Selector23~0
A1L753 = ( A1L393 & ( A1L394 & ( A1L314 ) ) ) # ( !A1L393 & ( A1L394 & ( minAngleCount[8] ) ) ) # ( A1L393 & ( !A1L394 & ( maxAngleCount[8] ) ) ) # ( !A1L393 & ( !A1L394 & ( A1L186 ) ) );


--A1L743 is Selector13~0
A1L743 = ( A1L393 & ( A1L394 & ( A1L318 ) ) ) # ( !A1L393 & ( A1L394 & ( minAngleCount[18] ) ) ) # ( A1L393 & ( !A1L394 & ( maxAngleCount[18] ) ) ) # ( !A1L393 & ( !A1L394 & ( A1L190 ) ) );


--A1L740 is Selector10~0
A1L740 = ( A1L393 & ( A1L394 & ( A1L322 ) ) ) # ( !A1L393 & ( A1L394 & ( minAngleCount[21] ) ) ) # ( A1L393 & ( !A1L394 & ( maxAngleCount[21] ) ) ) # ( !A1L393 & ( !A1L394 & ( A1L194 ) ) );


--A1L741 is Selector11~0
A1L741 = ( A1L393 & ( A1L394 & ( A1L326 ) ) ) # ( !A1L393 & ( A1L394 & ( minAngleCount[20] ) ) ) # ( A1L393 & ( !A1L394 & ( maxAngleCount[20] ) ) ) # ( !A1L393 & ( !A1L394 & ( A1L198 ) ) );


--A1L742 is Selector12~0
A1L742 = ( A1L393 & ( A1L394 & ( A1L330 ) ) ) # ( !A1L393 & ( A1L394 & ( minAngleCount[19] ) ) ) # ( A1L393 & ( !A1L394 & ( maxAngleCount[19] ) ) ) # ( !A1L393 & ( !A1L394 & ( A1L202 ) ) );


--A1L744 is Selector14~0
A1L744 = ( A1L393 & ( A1L394 & ( A1L334 ) ) ) # ( !A1L393 & ( A1L394 & ( minAngleCount[17] ) ) ) # ( A1L393 & ( !A1L394 & ( maxAngleCount[17] ) ) ) # ( !A1L393 & ( !A1L394 & ( A1L206 ) ) );


--A1L745 is Selector15~0
A1L745 = ( A1L393 & ( A1L394 & ( A1L338 ) ) ) # ( !A1L393 & ( A1L394 & ( minAngleCount[16] ) ) ) # ( A1L393 & ( !A1L394 & ( maxAngleCount[16] ) ) ) # ( !A1L393 & ( !A1L394 & ( A1L210 ) ) );


--A1L746 is Selector16~0
A1L746 = ( A1L393 & ( A1L394 & ( A1L342 ) ) ) # ( !A1L393 & ( A1L394 & ( minAngleCount[15] ) ) ) # ( A1L393 & ( !A1L394 & ( maxAngleCount[15] ) ) ) # ( !A1L393 & ( !A1L394 & ( A1L214 ) ) );


--A1L736 is Selector6~0
A1L736 = ( A1L393 & ( A1L394 & ( A1L346 ) ) ) # ( !A1L393 & ( A1L394 & ( minAngleCount[25] ) ) ) # ( A1L393 & ( !A1L394 & ( maxAngleCount[25] ) ) ) # ( !A1L393 & ( !A1L394 & ( A1L218 ) ) );


--A1L733 is Selector3~0
A1L733 = ( A1L393 & ( A1L394 & ( A1L350 ) ) ) # ( !A1L393 & ( A1L394 & ( minAngleCount[28] ) ) ) # ( A1L393 & ( !A1L394 & ( maxAngleCount[28] ) ) ) # ( !A1L393 & ( !A1L394 & ( A1L222 ) ) );


--A1L734 is Selector4~0
A1L734 = ( A1L393 & ( A1L394 & ( A1L354 ) ) ) # ( !A1L393 & ( A1L394 & ( minAngleCount[27] ) ) ) # ( A1L393 & ( !A1L394 & ( maxAngleCount[27] ) ) ) # ( !A1L393 & ( !A1L394 & ( A1L226 ) ) );


--A1L735 is Selector5~0
A1L735 = ( A1L393 & ( A1L394 & ( A1L358 ) ) ) # ( !A1L393 & ( A1L394 & ( minAngleCount[26] ) ) ) # ( A1L393 & ( !A1L394 & ( maxAngleCount[26] ) ) ) # ( !A1L393 & ( !A1L394 & ( A1L230 ) ) );


--A1L737 is Selector7~0
A1L737 = ( A1L393 & ( A1L394 & ( A1L362 ) ) ) # ( !A1L393 & ( A1L394 & ( minAngleCount[24] ) ) ) # ( A1L393 & ( !A1L394 & ( maxAngleCount[24] ) ) ) # ( !A1L393 & ( !A1L394 & ( A1L234 ) ) );


--A1L738 is Selector8~0
A1L738 = ( A1L393 & ( A1L394 & ( A1L366 ) ) ) # ( !A1L393 & ( A1L394 & ( minAngleCount[23] ) ) ) # ( A1L393 & ( !A1L394 & ( maxAngleCount[23] ) ) ) # ( !A1L393 & ( !A1L394 & ( A1L238 ) ) );


--A1L739 is Selector9~0
A1L739 = ( A1L393 & ( A1L394 & ( A1L370 ) ) ) # ( !A1L393 & ( A1L394 & ( minAngleCount[22] ) ) ) # ( A1L393 & ( !A1L394 & ( maxAngleCount[22] ) ) ) # ( !A1L393 & ( !A1L394 & ( A1L242 ) ) );


--A1L730 is Selector0~0
A1L730 = ( A1L393 & ( A1L394 & ( A1L374 ) ) ) # ( !A1L393 & ( !A1L394 & ( A1L246 ) ) );


--A1L731 is Selector1~0
A1L731 = ( A1L393 & ( A1L394 & ( A1L378 ) ) ) # ( !A1L393 & ( A1L394 & ( minAngleCount[30] ) ) ) # ( A1L393 & ( !A1L394 & ( maxAngleCount[30] ) ) ) # ( !A1L393 & ( !A1L394 & ( A1L250 ) ) );


--A1L732 is Selector2~0
A1L732 = ( A1L393 & ( A1L394 & ( A1L382 ) ) ) # ( !A1L393 & ( A1L394 & ( minAngleCount[29] ) ) ) # ( A1L393 & ( !A1L394 & ( maxAngleCount[29] ) ) ) # ( !A1L393 & ( !A1L394 & ( A1L254 ) ) );


--next_state.SW_RIGHT is next_state.SW_RIGHT
--register power-up is low

next_state.SW_RIGHT = DFFEAS(A1L763, clk, reset_n,  , A1L765,  ,  ,  ,  );


--reg[0][7] is reg[0][7]
--register power-up is low

reg[0][7] = DFFEAS(writedata[7], clk, reset_n,  , A1L681,  ,  ,  ,  );


--write is write
write = INPUT();


--A1L586 is maxAngleCount[0]~0
A1L586 = (reset_n & !write);


--reg[0][6] is reg[0][6]
--register power-up is low

reg[0][6] = DFFEAS(writedata[6], clk, reset_n,  , A1L681,  ,  ,  ,  );


--reg[0][5] is reg[0][5]
--register power-up is low

reg[0][5] = DFFEAS(writedata[5], clk, reset_n,  , A1L681,  ,  ,  ,  );


--reg[0][4] is reg[0][4]
--register power-up is low

reg[0][4] = DFFEAS(writedata[4], clk, reset_n,  , A1L681,  ,  ,  ,  );


--reg[0][1] is reg[0][1]
--register power-up is low

reg[0][1] = DFFEAS(writedata[1], clk, reset_n,  , A1L681,  ,  ,  ,  );


--reg[0][0] is reg[0][0]
--register power-up is low

reg[0][0] = DFFEAS(writedata[0], clk, reset_n,  , A1L681,  ,  ,  ,  );


--reg[0][3] is reg[0][3]
--register power-up is low

reg[0][3] = DFFEAS(writedata[3], clk, reset_n,  , A1L681,  ,  ,  ,  );


--reg[0][2] is reg[0][2]
--register power-up is low

reg[0][2] = DFFEAS(writedata[2], clk, reset_n,  , A1L681,  ,  ,  ,  );


--reg[0][14] is reg[0][14]
--register power-up is low

reg[0][14] = DFFEAS(writedata[14], clk, reset_n,  , A1L681,  ,  ,  ,  );


--reg[0][13] is reg[0][13]
--register power-up is low

reg[0][13] = DFFEAS(writedata[13], clk, reset_n,  , A1L681,  ,  ,  ,  );


--reg[0][12] is reg[0][12]
--register power-up is low

reg[0][12] = DFFEAS(writedata[12], clk, reset_n,  , A1L681,  ,  ,  ,  );


--reg[0][11] is reg[0][11]
--register power-up is low

reg[0][11] = DFFEAS(writedata[11], clk, reset_n,  , A1L681,  ,  ,  ,  );


--reg[0][9] is reg[0][9]
--register power-up is low

reg[0][9] = DFFEAS(writedata[9], clk, reset_n,  , A1L681,  ,  ,  ,  );


--reg[0][10] is reg[0][10]
--register power-up is low

reg[0][10] = DFFEAS(writedata[10], clk, reset_n,  , A1L681,  ,  ,  ,  );


--reg[0][8] is reg[0][8]
--register power-up is low

reg[0][8] = DFFEAS(writedata[8], clk, reset_n,  , A1L681,  ,  ,  ,  );


--reg[0][18] is reg[0][18]
--register power-up is low

reg[0][18] = DFFEAS(writedata[18], clk, reset_n,  , A1L681,  ,  ,  ,  );


--reg[0][21] is reg[0][21]
--register power-up is low

reg[0][21] = DFFEAS(writedata[21], clk, reset_n,  , A1L681,  ,  ,  ,  );


--reg[0][20] is reg[0][20]
--register power-up is low

reg[0][20] = DFFEAS(writedata[20], clk, reset_n,  , A1L681,  ,  ,  ,  );


--reg[0][19] is reg[0][19]
--register power-up is low

reg[0][19] = DFFEAS(writedata[19], clk, reset_n,  , A1L681,  ,  ,  ,  );


--reg[0][17] is reg[0][17]
--register power-up is low

reg[0][17] = DFFEAS(writedata[17], clk, reset_n,  , A1L681,  ,  ,  ,  );


--reg[0][16] is reg[0][16]
--register power-up is low

reg[0][16] = DFFEAS(writedata[16], clk, reset_n,  , A1L681,  ,  ,  ,  );


--reg[0][15] is reg[0][15]
--register power-up is low

reg[0][15] = DFFEAS(writedata[15], clk, reset_n,  , A1L681,  ,  ,  ,  );


--reg[0][25] is reg[0][25]
--register power-up is low

reg[0][25] = DFFEAS(writedata[25], clk, reset_n,  , A1L681,  ,  ,  ,  );


--reg[0][28] is reg[0][28]
--register power-up is low

reg[0][28] = DFFEAS(writedata[28], clk, reset_n,  , A1L681,  ,  ,  ,  );


--reg[0][27] is reg[0][27]
--register power-up is low

reg[0][27] = DFFEAS(writedata[27], clk, reset_n,  , A1L681,  ,  ,  ,  );


--reg[0][26] is reg[0][26]
--register power-up is low

reg[0][26] = DFFEAS(writedata[26], clk, reset_n,  , A1L681,  ,  ,  ,  );


--reg[0][24] is reg[0][24]
--register power-up is low

reg[0][24] = DFFEAS(writedata[24], clk, reset_n,  , A1L681,  ,  ,  ,  );


--reg[0][23] is reg[0][23]
--register power-up is low

reg[0][23] = DFFEAS(writedata[23], clk, reset_n,  , A1L681,  ,  ,  ,  );


--reg[0][22] is reg[0][22]
--register power-up is low

reg[0][22] = DFFEAS(writedata[22], clk, reset_n,  , A1L681,  ,  ,  ,  );


--reg[0][30] is reg[0][30]
--register power-up is low

reg[0][30] = DFFEAS(writedata[30], clk, reset_n,  , A1L681,  ,  ,  ,  );


--reg[0][29] is reg[0][29]
--register power-up is low

reg[0][29] = DFFEAS(writedata[29], clk, reset_n,  , A1L681,  ,  ,  ,  );


--next_state.SW_LEFT is next_state.SW_LEFT
--register power-up is low

next_state.SW_LEFT = DFFEAS(A1L658, clk, reset_n,  , A1L765,  ,  ,  ,  );


--reg[1][7] is reg[1][7]
--register power-up is low

reg[1][7] = DFFEAS(writedata[7], clk, reset_n,  , A1L728,  ,  ,  ,  );


--reg[1][6] is reg[1][6]
--register power-up is low

reg[1][6] = DFFEAS(writedata[6], clk, reset_n,  , A1L728,  ,  ,  ,  );


--reg[1][5] is reg[1][5]
--register power-up is low

reg[1][5] = DFFEAS(writedata[5], clk, reset_n,  , A1L728,  ,  ,  ,  );


--reg[1][4] is reg[1][4]
--register power-up is low

reg[1][4] = DFFEAS(writedata[4], clk, reset_n,  , A1L728,  ,  ,  ,  );


--reg[1][1] is reg[1][1]
--register power-up is low

reg[1][1] = DFFEAS(writedata[1], clk, reset_n,  , A1L728,  ,  ,  ,  );


--reg[1][0] is reg[1][0]
--register power-up is low

reg[1][0] = DFFEAS(writedata[0], clk, reset_n,  , A1L728,  ,  ,  ,  );


--reg[1][3] is reg[1][3]
--register power-up is low

reg[1][3] = DFFEAS(writedata[3], clk, reset_n,  , A1L728,  ,  ,  ,  );


--reg[1][2] is reg[1][2]
--register power-up is low

reg[1][2] = DFFEAS(writedata[2], clk, reset_n,  , A1L728,  ,  ,  ,  );


--reg[1][14] is reg[1][14]
--register power-up is low

reg[1][14] = DFFEAS(writedata[14], clk, reset_n,  , A1L728,  ,  ,  ,  );


--reg[1][13] is reg[1][13]
--register power-up is low

reg[1][13] = DFFEAS(writedata[13], clk, reset_n,  , A1L728,  ,  ,  ,  );


--reg[1][12] is reg[1][12]
--register power-up is low

reg[1][12] = DFFEAS(writedata[12], clk, reset_n,  , A1L728,  ,  ,  ,  );


--reg[1][11] is reg[1][11]
--register power-up is low

reg[1][11] = DFFEAS(writedata[11], clk, reset_n,  , A1L728,  ,  ,  ,  );


--reg[1][9] is reg[1][9]
--register power-up is low

reg[1][9] = DFFEAS(writedata[9], clk, reset_n,  , A1L728,  ,  ,  ,  );


--reg[1][10] is reg[1][10]
--register power-up is low

reg[1][10] = DFFEAS(writedata[10], clk, reset_n,  , A1L728,  ,  ,  ,  );


--reg[1][8] is reg[1][8]
--register power-up is low

reg[1][8] = DFFEAS(writedata[8], clk, reset_n,  , A1L728,  ,  ,  ,  );


--reg[1][18] is reg[1][18]
--register power-up is low

reg[1][18] = DFFEAS(writedata[18], clk, reset_n,  , A1L728,  ,  ,  ,  );


--reg[1][21] is reg[1][21]
--register power-up is low

reg[1][21] = DFFEAS(writedata[21], clk, reset_n,  , A1L728,  ,  ,  ,  );


--reg[1][20] is reg[1][20]
--register power-up is low

reg[1][20] = DFFEAS(writedata[20], clk, reset_n,  , A1L728,  ,  ,  ,  );


--reg[1][19] is reg[1][19]
--register power-up is low

reg[1][19] = DFFEAS(writedata[19], clk, reset_n,  , A1L728,  ,  ,  ,  );


--reg[1][17] is reg[1][17]
--register power-up is low

reg[1][17] = DFFEAS(writedata[17], clk, reset_n,  , A1L728,  ,  ,  ,  );


--reg[1][16] is reg[1][16]
--register power-up is low

reg[1][16] = DFFEAS(writedata[16], clk, reset_n,  , A1L728,  ,  ,  ,  );


--reg[1][15] is reg[1][15]
--register power-up is low

reg[1][15] = DFFEAS(writedata[15], clk, reset_n,  , A1L728,  ,  ,  ,  );


--reg[1][25] is reg[1][25]
--register power-up is low

reg[1][25] = DFFEAS(writedata[25], clk, reset_n,  , A1L728,  ,  ,  ,  );


--reg[1][28] is reg[1][28]
--register power-up is low

reg[1][28] = DFFEAS(writedata[28], clk, reset_n,  , A1L728,  ,  ,  ,  );


--reg[1][27] is reg[1][27]
--register power-up is low

reg[1][27] = DFFEAS(writedata[27], clk, reset_n,  , A1L728,  ,  ,  ,  );


--reg[1][26] is reg[1][26]
--register power-up is low

reg[1][26] = DFFEAS(writedata[26], clk, reset_n,  , A1L728,  ,  ,  ,  );


--reg[1][24] is reg[1][24]
--register power-up is low

reg[1][24] = DFFEAS(writedata[24], clk, reset_n,  , A1L728,  ,  ,  ,  );


--reg[1][23] is reg[1][23]
--register power-up is low

reg[1][23] = DFFEAS(writedata[23], clk, reset_n,  , A1L728,  ,  ,  ,  );


--reg[1][22] is reg[1][22]
--register power-up is low

reg[1][22] = DFFEAS(writedata[22], clk, reset_n,  , A1L728,  ,  ,  ,  );


--reg[1][30] is reg[1][30]
--register power-up is low

reg[1][30] = DFFEAS(writedata[30], clk, reset_n,  , A1L728,  ,  ,  ,  );


--reg[1][29] is reg[1][29]
--register power-up is low

reg[1][29] = DFFEAS(writedata[29], clk, reset_n,  , A1L728,  ,  ,  ,  );


--A1L764 is Selector35~0
A1L764 = ( next_state.INT_RIGHT & ( ((!current_state.SW_LEFT & !A1L545)) # (current_state.SW_RIGHT) ) ) # ( !next_state.INT_RIGHT & ( (current_state.SW_RIGHT & A1L573) ) );


--A1L766 is Selector37~0
A1L766 = ( next_state.INT_LEFT & ( (!current_state.SW_LEFT) # ((current_state.SW_RIGHT & !A1L573)) ) ) # ( !next_state.INT_LEFT & ( (!current_state.SW_LEFT & A1L545) ) );


--A1L763 is Selector34~0
A1L763 = (!current_state.INT_RIGHT & current_state.INT_LEFT);


--A1L765 is Selector36~0
A1L765 = ( A1L545 & ( (((!current_state.SW_RIGHT) # (A1L573)) # (current_state.INT_LEFT)) # (current_state.INT_RIGHT) ) ) # ( !A1L545 & ( (((current_state.SW_RIGHT & A1L573)) # (current_state.INT_LEFT)) # (current_state.INT_RIGHT) ) );


--writedata[7] is writedata[7]
writedata[7] = INPUT();


--address is address
address = INPUT();


--A1L681 is reg[0][16]~0
A1L681 = (write & !address);


--writedata[6] is writedata[6]
writedata[6] = INPUT();


--writedata[5] is writedata[5]
writedata[5] = INPUT();


--writedata[4] is writedata[4]
writedata[4] = INPUT();


--writedata[1] is writedata[1]
writedata[1] = INPUT();


--writedata[0] is writedata[0]
writedata[0] = INPUT();


--writedata[3] is writedata[3]
writedata[3] = INPUT();


--writedata[2] is writedata[2]
writedata[2] = INPUT();


--writedata[14] is writedata[14]
writedata[14] = INPUT();


--writedata[13] is writedata[13]
writedata[13] = INPUT();


--writedata[12] is writedata[12]
writedata[12] = INPUT();


--writedata[11] is writedata[11]
writedata[11] = INPUT();


--writedata[9] is writedata[9]
writedata[9] = INPUT();


--writedata[10] is writedata[10]
writedata[10] = INPUT();


--writedata[8] is writedata[8]
writedata[8] = INPUT();


--writedata[18] is writedata[18]
writedata[18] = INPUT();


--writedata[21] is writedata[21]
writedata[21] = INPUT();


--writedata[20] is writedata[20]
writedata[20] = INPUT();


--writedata[19] is writedata[19]
writedata[19] = INPUT();


--writedata[17] is writedata[17]
writedata[17] = INPUT();


--writedata[16] is writedata[16]
writedata[16] = INPUT();


--writedata[15] is writedata[15]
writedata[15] = INPUT();


--writedata[25] is writedata[25]
writedata[25] = INPUT();


--writedata[28] is writedata[28]
writedata[28] = INPUT();


--writedata[27] is writedata[27]
writedata[27] = INPUT();


--writedata[26] is writedata[26]
writedata[26] = INPUT();


--writedata[24] is writedata[24]
writedata[24] = INPUT();


--writedata[23] is writedata[23]
writedata[23] = INPUT();


--writedata[22] is writedata[22]
writedata[22] = INPUT();


--writedata[30] is writedata[30]
writedata[30] = INPUT();


--writedata[29] is writedata[29]
writedata[29] = INPUT();


--A1L728 is reg[1][31]~1
A1L728 = (write & address);


--A1L494 is LessThan1~26
A1L494 = ( angleCount[4] & ( currCount[4] & ( (!angleCount[6] & (!currCount[6] & (!angleCount[5] $ (currCount[5])))) # (angleCount[6] & (currCount[6] & (!angleCount[5] $ (currCount[5])))) ) ) ) # ( !angleCount[4] & ( !currCount[4] & ( (!angleCount[6] & (!currCount[6] & (!angleCount[5] $ (currCount[5])))) # (angleCount[6] & (currCount[6] & (!angleCount[5] $ (currCount[5])))) ) ) );


--A1L495 is LessThan1~27
A1L495 = (!angleCount[1] & (!currCount[1] & (angleCount[0] & !currCount[0]))) # (angleCount[1] & ((!currCount[1]) # ((angleCount[0] & !currCount[0]))));


--A1L496 is LessThan1~28
A1L496 = ( angleCount[15] & ( currCount[15] & ( (!angleCount[17] & (!currCount[17] & (!angleCount[16] $ (currCount[16])))) # (angleCount[17] & (currCount[17] & (!angleCount[16] $ (currCount[16])))) ) ) ) # ( !angleCount[15] & ( !currCount[15] & ( (!angleCount[17] & (!currCount[17] & (!angleCount[16] $ (currCount[16])))) # (angleCount[17] & (currCount[17] & (!angleCount[16] $ (currCount[16])))) ) ) );


--A1L497 is LessThan1~29
A1L497 = (!angleCount[20] & (!currCount[20] & (!angleCount[19] $ (currCount[19])))) # (angleCount[20] & (currCount[20] & (!angleCount[19] $ (currCount[19]))));


--A1L498 is LessThan1~30
A1L498 = ( angleCount[18] & ( currCount[18] & ( (!angleCount[16] & (!currCount[16] & (angleCount[15] & !currCount[15]))) # (angleCount[16] & ((!currCount[16]) # ((angleCount[15] & !currCount[15])))) ) ) ) # ( angleCount[18] & ( !currCount[18] ) ) # ( !angleCount[18] & ( !currCount[18] & ( (!angleCount[16] & (!currCount[16] & (angleCount[15] & !currCount[15]))) # (angleCount[16] & ((!currCount[16]) # ((angleCount[15] & !currCount[15])))) ) ) );


--A1L499 is LessThan1~31
A1L499 = (!angleCount[18] & (!currCount[18] & (angleCount[17] & !currCount[17]))) # (angleCount[18] & ((!currCount[18]) # ((angleCount[17] & !currCount[17]))));


--A1L500 is LessThan1~32
A1L500 = ( angleCount[25] & ( currCount[25] & ( (!angleCount[23] & (!currCount[23] & (angleCount[22] & !currCount[22]))) # (angleCount[23] & ((!currCount[23]) # ((angleCount[22] & !currCount[22])))) ) ) ) # ( angleCount[25] & ( !currCount[25] ) ) # ( !angleCount[25] & ( !currCount[25] & ( (!angleCount[23] & (!currCount[23] & (angleCount[22] & !currCount[22]))) # (angleCount[23] & ((!currCount[23]) # ((angleCount[22] & !currCount[22])))) ) ) );


--A1L501 is LessThan1~33
A1L501 = (!angleCount[25] & (!currCount[25] & (angleCount[24] & !currCount[24]))) # (angleCount[25] & ((!currCount[25]) # ((angleCount[24] & !currCount[24]))));


--A1L574 is LessThan3~28
A1L574 = ( currCount[4] & ( minAngleCount[4] & ( (!currCount[6] & (!minAngleCount[6] & (!currCount[5] $ (minAngleCount[5])))) # (currCount[6] & (minAngleCount[6] & (!currCount[5] $ (minAngleCount[5])))) ) ) ) # ( !currCount[4] & ( !minAngleCount[4] & ( (!currCount[6] & (!minAngleCount[6] & (!currCount[5] $ (minAngleCount[5])))) # (currCount[6] & (minAngleCount[6] & (!currCount[5] $ (minAngleCount[5])))) ) ) );


--A1L575 is LessThan3~29
A1L575 = (!currCount[1] & (currCount[0] & (!minAngleCount[1] & minAngleCount[0]))) # (currCount[1] & ((!minAngleCount[1]) # ((currCount[0] & minAngleCount[0]))));


--A1L502 is LessThan1~34
A1L502 = ( angleCount[8] & ( currCount[8] & ( (!angleCount[11] & (!currCount[11] & (!angleCount[10] $ (currCount[10])))) # (angleCount[11] & (currCount[11] & (!angleCount[10] $ (currCount[10])))) ) ) ) # ( !angleCount[8] & ( !currCount[8] & ( (!angleCount[11] & (!currCount[11] & (!angleCount[10] $ (currCount[10])))) # (angleCount[11] & (currCount[11] & (!angleCount[10] $ (currCount[10])))) ) ) );


--A1L503 is LessThan1~35
A1L503 = (!angleCount[13] & (!currCount[13] & (!angleCount[12] $ (currCount[12])))) # (angleCount[13] & (currCount[13] & (!angleCount[12] $ (currCount[12]))));


--A1L504 is LessThan1~36
A1L504 = ( angleCount[10] & ( currCount[10] & ( (!angleCount[12] & (!currCount[12] & (!angleCount[11] $ (currCount[11])))) # (angleCount[12] & (currCount[12] & (!angleCount[11] $ (currCount[11])))) ) ) ) # ( !angleCount[10] & ( !currCount[10] & ( (!angleCount[12] & (!currCount[12] & (!angleCount[11] $ (currCount[11])))) # (angleCount[12] & (currCount[12] & (!angleCount[11] $ (currCount[11])))) ) ) );


--A1L505 is LessThan1~37
A1L505 = (!angleCount[14] & (!currCount[14] & (!angleCount[13] $ (currCount[13])))) # (angleCount[14] & (currCount[14] & (!angleCount[13] $ (currCount[13]))));


--A1L576 is LessThan3~30
A1L576 = ( currCount[8] & ( minAngleCount[8] & ( (!currCount[11] & (!minAngleCount[11] & (!currCount[10] $ (minAngleCount[10])))) # (currCount[11] & (minAngleCount[11] & (!currCount[10] $ (minAngleCount[10])))) ) ) ) # ( !currCount[8] & ( !minAngleCount[8] & ( (!currCount[11] & (!minAngleCount[11] & (!currCount[10] $ (minAngleCount[10])))) # (currCount[11] & (minAngleCount[11] & (!currCount[10] $ (minAngleCount[10])))) ) ) );


--A1L577 is LessThan3~31
A1L577 = (!currCount[13] & (!minAngleCount[13] & (!currCount[12] $ (minAngleCount[12])))) # (currCount[13] & (minAngleCount[13] & (!currCount[12] $ (minAngleCount[12]))));


--A1L578 is LessThan3~32
A1L578 = ( currCount[10] & ( minAngleCount[10] & ( (!currCount[12] & (!minAngleCount[12] & (!currCount[11] $ (minAngleCount[11])))) # (currCount[12] & (minAngleCount[12] & (!currCount[11] $ (minAngleCount[11])))) ) ) ) # ( !currCount[10] & ( !minAngleCount[10] & ( (!currCount[12] & (!minAngleCount[12] & (!currCount[11] $ (minAngleCount[11])))) # (currCount[12] & (minAngleCount[12] & (!currCount[11] $ (minAngleCount[11])))) ) ) );


--A1L579 is LessThan3~33
A1L579 = (!currCount[14] & (!minAngleCount[14] & (!currCount[13] $ (minAngleCount[13])))) # (currCount[14] & (minAngleCount[14] & (!currCount[13] $ (minAngleCount[13]))));


--A1L580 is LessThan3~34
A1L580 = ( currCount[15] & ( minAngleCount[15] & ( (!currCount[17] & (!minAngleCount[17] & (!currCount[16] $ (minAngleCount[16])))) # (currCount[17] & (minAngleCount[17] & (!currCount[16] $ (minAngleCount[16])))) ) ) ) # ( !currCount[15] & ( !minAngleCount[15] & ( (!currCount[17] & (!minAngleCount[17] & (!currCount[16] $ (minAngleCount[16])))) # (currCount[17] & (minAngleCount[17] & (!currCount[16] $ (minAngleCount[16])))) ) ) );


--A1L581 is LessThan3~35
A1L581 = (!currCount[20] & (!minAngleCount[20] & (!currCount[19] $ (minAngleCount[19])))) # (currCount[20] & (minAngleCount[20] & (!currCount[19] $ (minAngleCount[19]))));


--A1L582 is LessThan3~36
A1L582 = ( currCount[18] & ( minAngleCount[18] & ( (!currCount[16] & (currCount[15] & (!minAngleCount[16] & !minAngleCount[15]))) # (currCount[16] & ((!minAngleCount[16]) # ((currCount[15] & !minAngleCount[15])))) ) ) ) # ( currCount[18] & ( !minAngleCount[18] ) ) # ( !currCount[18] & ( !minAngleCount[18] & ( (!currCount[16] & (currCount[15] & (!minAngleCount[16] & !minAngleCount[15]))) # (currCount[16] & ((!minAngleCount[16]) # ((currCount[15] & !minAngleCount[15])))) ) ) );


--A1L583 is LessThan3~37
A1L583 = (!currCount[18] & (!minAngleCount[18] & (currCount[17] & !minAngleCount[17]))) # (currCount[18] & ((!minAngleCount[18]) # ((currCount[17] & !minAngleCount[17]))));


--A1L623 is minAngleCount[0]~0
A1L623 = !reg[0][0];


--A1L626 is minAngleCount[2]~1
A1L626 = !reg[0][2];


--A1L589 is maxAngleCount[1]~1
A1L589 = !reg[1][1];


--A1L587 is maxAngleCount[0]~2
A1L587 = !reg[1][0];


--A1L593 is maxAngleCount[3]~3
A1L593 = !reg[1][3];


--A1L591 is maxAngleCount[2]~4
A1L591 = !reg[1][2];


--A1L658 is next_state.SW_LEFT~0
A1L658 = !current_state.INT_RIGHT;


