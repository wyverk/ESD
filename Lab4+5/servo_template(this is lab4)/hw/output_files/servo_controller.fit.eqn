-- Copyright (C) 2018  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details.
--currCount[25] is currCount[25] at FF_X82_Y20_N17
--register power-up is low

currCount[25] = DFFEAS(A1L2, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--currCount[28] is currCount[28] at FF_X82_Y20_N26
--register power-up is low

currCount[28] = DFFEAS(A1L6, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--currCount[27] is currCount[27] at FF_X82_Y20_N22
--register power-up is low

currCount[27] = DFFEAS(A1L10, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--currCount[26] is currCount[26] at FF_X82_Y20_N19
--register power-up is low

currCount[26] = DFFEAS(A1L14, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--currCount[23] is currCount[23] at FF_X82_Y20_N10
--register power-up is low

currCount[23] = DFFEAS(A1L18, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--currCount[24] is currCount[24] at FF_X82_Y20_N14
--register power-up is low

currCount[24] = DFFEAS(A1L22, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--currCount[22] is currCount[22] at FF_X82_Y20_N8
--register power-up is low

currCount[22] = DFFEAS(A1L26, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--currCount[11] is currCount[11] at FF_X82_Y21_N35
--register power-up is low

currCount[11] = DFFEAS(A1L30, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--currCount[14] is currCount[14] at FF_X82_Y21_N43
--register power-up is low

currCount[14] = DFFEAS(A1L34, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--currCount[13] is currCount[13] at FF_X82_Y21_N40
--register power-up is low

currCount[13] = DFFEAS(A1L38, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--currCount[12] is currCount[12] at FF_X82_Y21_N38
--register power-up is low

currCount[12] = DFFEAS(A1L42, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--currCount[10] is currCount[10] at FF_X82_Y21_N31
--register power-up is low

currCount[10] = DFFEAS(A1L46, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--currCount[9] is currCount[9] at FF_X82_Y21_N29
--register power-up is low

currCount[9] = DFFEAS(A1L50, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--currCount[8] is currCount[8] at FF_X82_Y21_N26
--register power-up is low

currCount[8] = DFFEAS(A1L54, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--currCount[3] is currCount[3] at FF_X82_Y21_N11
--register power-up is low

currCount[3] = DFFEAS(A1L58, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--currCount[2] is currCount[2] at FF_X82_Y21_N7
--register power-up is low

currCount[2] = DFFEAS(A1L62, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--currCount[1] is currCount[1] at FF_X82_Y21_N4
--register power-up is low

currCount[1] = DFFEAS(A1L66, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--currCount[0] is currCount[0] at FF_X82_Y21_N1
--register power-up is low

currCount[0] = DFFEAS(A1L70, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--currCount[5] is currCount[5] at FF_X82_Y21_N17
--register power-up is low

currCount[5] = DFFEAS(A1L74, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--currCount[7] is currCount[7] at FF_X82_Y21_N22
--register power-up is low

currCount[7] = DFFEAS(A1L78, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--currCount[6] is currCount[6] at FF_X82_Y21_N19
--register power-up is low

currCount[6] = DFFEAS(A1L82, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--currCount[4] is currCount[4] at FF_X82_Y21_N14
--register power-up is low

currCount[4] = DFFEAS(A1L86, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--currCount[21] is currCount[21] at FF_X82_Y20_N4
--register power-up is low

currCount[21] = DFFEAS(A1L90, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--currCount[20] is currCount[20] at FF_X82_Y20_N2
--register power-up is low

currCount[20] = DFFEAS(A1L94, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--currCount[19] is currCount[19] at FF_X82_Y21_N59
--register power-up is low

currCount[19] = DFFEAS(A1L98, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--currCount[18] is currCount[18] at FF_X82_Y21_N55
--register power-up is low

currCount[18] = DFFEAS(A1L102, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--currCount[16] is currCount[16] at FF_X82_Y21_N50
--register power-up is low

currCount[16] = DFFEAS(A1L106, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--currCount[17] is currCount[17] at FF_X82_Y21_N52
--register power-up is low

currCount[17] = DFFEAS(A1L110, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--currCount[15] is currCount[15] at FF_X82_Y21_N47
--register power-up is low

currCount[15] = DFFEAS(A1L114, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--currCount[31] is currCount[31] at FF_X82_Y20_N35
--register power-up is low

currCount[31] = DFFEAS(A1L118, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--currCount[30] is currCount[30] at FF_X82_Y20_N32
--register power-up is low

currCount[30] = DFFEAS(A1L122, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--currCount[29] is currCount[29] at FF_X82_Y20_N28
--register power-up is low

currCount[29] = DFFEAS(A1L126, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--A1L2 is Add0~1 at MLABCELL_X82_Y20_N15
A1L2_adder_eqn = ( currCount[25] ) + ( GND ) + ( A1L23 );
A1L2 = SUM(A1L2_adder_eqn);

--A1L3 is Add0~2 at MLABCELL_X82_Y20_N15
A1L3_adder_eqn = ( currCount[25] ) + ( GND ) + ( A1L23 );
A1L3 = CARRY(A1L3_adder_eqn);


--A1L6 is Add0~5 at MLABCELL_X82_Y20_N24
A1L6_adder_eqn = ( A1L535Q ) + ( GND ) + ( A1L11 );
A1L6 = SUM(A1L6_adder_eqn);

--A1L7 is Add0~6 at MLABCELL_X82_Y20_N24
A1L7_adder_eqn = ( A1L535Q ) + ( GND ) + ( A1L11 );
A1L7 = CARRY(A1L7_adder_eqn);


--A1L10 is Add0~9 at MLABCELL_X82_Y20_N21
A1L10_adder_eqn = ( A1L533Q ) + ( GND ) + ( A1L15 );
A1L10 = SUM(A1L10_adder_eqn);

--A1L11 is Add0~10 at MLABCELL_X82_Y20_N21
A1L11_adder_eqn = ( A1L533Q ) + ( GND ) + ( A1L15 );
A1L11 = CARRY(A1L11_adder_eqn);


--A1L14 is Add0~13 at MLABCELL_X82_Y20_N18
A1L14_adder_eqn = ( A1L531Q ) + ( GND ) + ( A1L3 );
A1L14 = SUM(A1L14_adder_eqn);

--A1L15 is Add0~14 at MLABCELL_X82_Y20_N18
A1L15_adder_eqn = ( A1L531Q ) + ( GND ) + ( A1L3 );
A1L15 = CARRY(A1L15_adder_eqn);


--A1L18 is Add0~17 at MLABCELL_X82_Y20_N9
A1L18_adder_eqn = ( A1L527Q ) + ( GND ) + ( A1L27 );
A1L18 = SUM(A1L18_adder_eqn);

--A1L19 is Add0~18 at MLABCELL_X82_Y20_N9
A1L19_adder_eqn = ( A1L527Q ) + ( GND ) + ( A1L27 );
A1L19 = CARRY(A1L19_adder_eqn);


--A1L22 is Add0~21 at MLABCELL_X82_Y20_N12
A1L22_adder_eqn = ( currCount[24] ) + ( GND ) + ( A1L19 );
A1L22 = SUM(A1L22_adder_eqn);

--A1L23 is Add0~22 at MLABCELL_X82_Y20_N12
A1L23_adder_eqn = ( currCount[24] ) + ( GND ) + ( A1L19 );
A1L23 = CARRY(A1L23_adder_eqn);


--A1L26 is Add0~25 at MLABCELL_X82_Y20_N6
A1L26_adder_eqn = ( currCount[22] ) + ( GND ) + ( A1L91 );
A1L26 = SUM(A1L26_adder_eqn);

--A1L27 is Add0~26 at MLABCELL_X82_Y20_N6
A1L27_adder_eqn = ( currCount[22] ) + ( GND ) + ( A1L91 );
A1L27 = CARRY(A1L27_adder_eqn);


--A1L30 is Add0~29 at MLABCELL_X82_Y21_N33
A1L30_adder_eqn = ( currCount[11] ) + ( GND ) + ( A1L47 );
A1L30 = SUM(A1L30_adder_eqn);

--A1L31 is Add0~30 at MLABCELL_X82_Y21_N33
A1L31_adder_eqn = ( currCount[11] ) + ( GND ) + ( A1L47 );
A1L31 = CARRY(A1L31_adder_eqn);


--A1L34 is Add0~33 at MLABCELL_X82_Y21_N42
A1L34_adder_eqn = ( currCount[14] ) + ( GND ) + ( A1L39 );
A1L34 = SUM(A1L34_adder_eqn);

--A1L35 is Add0~34 at MLABCELL_X82_Y21_N42
A1L35_adder_eqn = ( currCount[14] ) + ( GND ) + ( A1L39 );
A1L35 = CARRY(A1L35_adder_eqn);


--A1L38 is Add0~37 at MLABCELL_X82_Y21_N39
A1L38_adder_eqn = ( currCount[13] ) + ( GND ) + ( A1L43 );
A1L38 = SUM(A1L38_adder_eqn);

--A1L39 is Add0~38 at MLABCELL_X82_Y21_N39
A1L39_adder_eqn = ( currCount[13] ) + ( GND ) + ( A1L43 );
A1L39 = CARRY(A1L39_adder_eqn);


--A1L42 is Add0~41 at MLABCELL_X82_Y21_N36
A1L42_adder_eqn = ( currCount[12] ) + ( GND ) + ( A1L31 );
A1L42 = SUM(A1L42_adder_eqn);

--A1L43 is Add0~42 at MLABCELL_X82_Y21_N36
A1L43_adder_eqn = ( currCount[12] ) + ( GND ) + ( A1L31 );
A1L43 = CARRY(A1L43_adder_eqn);


--A1L46 is Add0~45 at MLABCELL_X82_Y21_N30
A1L46_adder_eqn = ( currCount[10] ) + ( GND ) + ( A1L51 );
A1L46 = SUM(A1L46_adder_eqn);

--A1L47 is Add0~46 at MLABCELL_X82_Y21_N30
A1L47_adder_eqn = ( currCount[10] ) + ( GND ) + ( A1L51 );
A1L47 = CARRY(A1L47_adder_eqn);


--A1L50 is Add0~49 at MLABCELL_X82_Y21_N27
A1L50_adder_eqn = ( currCount[9] ) + ( GND ) + ( A1L55 );
A1L50 = SUM(A1L50_adder_eqn);

--A1L51 is Add0~50 at MLABCELL_X82_Y21_N27
A1L51_adder_eqn = ( currCount[9] ) + ( GND ) + ( A1L55 );
A1L51 = CARRY(A1L51_adder_eqn);


--A1L54 is Add0~53 at MLABCELL_X82_Y21_N24
A1L54_adder_eqn = ( currCount[8] ) + ( GND ) + ( A1L79 );
A1L54 = SUM(A1L54_adder_eqn);

--A1L55 is Add0~54 at MLABCELL_X82_Y21_N24
A1L55_adder_eqn = ( currCount[8] ) + ( GND ) + ( A1L79 );
A1L55 = CARRY(A1L55_adder_eqn);


--A1L58 is Add0~57 at MLABCELL_X82_Y21_N9
A1L58_adder_eqn = ( currCount[3] ) + ( GND ) + ( A1L63 );
A1L58 = SUM(A1L58_adder_eqn);

--A1L59 is Add0~58 at MLABCELL_X82_Y21_N9
A1L59_adder_eqn = ( currCount[3] ) + ( GND ) + ( A1L63 );
A1L59 = CARRY(A1L59_adder_eqn);


--A1L62 is Add0~61 at MLABCELL_X82_Y21_N6
A1L62_adder_eqn = ( currCount[2] ) + ( GND ) + ( A1L67 );
A1L62 = SUM(A1L62_adder_eqn);

--A1L63 is Add0~62 at MLABCELL_X82_Y21_N6
A1L63_adder_eqn = ( currCount[2] ) + ( GND ) + ( A1L67 );
A1L63 = CARRY(A1L63_adder_eqn);


--A1L66 is Add0~65 at MLABCELL_X82_Y21_N3
A1L66_adder_eqn = ( A1L500Q ) + ( GND ) + ( A1L71 );
A1L66 = SUM(A1L66_adder_eqn);

--A1L67 is Add0~66 at MLABCELL_X82_Y21_N3
A1L67_adder_eqn = ( A1L500Q ) + ( GND ) + ( A1L71 );
A1L67 = CARRY(A1L67_adder_eqn);


--A1L70 is Add0~69 at MLABCELL_X82_Y21_N0
A1L70_adder_eqn = ( A1L498Q ) + ( VCC ) + ( !VCC );
A1L70 = SUM(A1L70_adder_eqn);

--A1L71 is Add0~70 at MLABCELL_X82_Y21_N0
A1L71_adder_eqn = ( A1L498Q ) + ( VCC ) + ( !VCC );
A1L71 = CARRY(A1L71_adder_eqn);


--A1L74 is Add0~73 at MLABCELL_X82_Y21_N15
A1L74_adder_eqn = ( currCount[5] ) + ( GND ) + ( A1L87 );
A1L74 = SUM(A1L74_adder_eqn);

--A1L75 is Add0~74 at MLABCELL_X82_Y21_N15
A1L75_adder_eqn = ( currCount[5] ) + ( GND ) + ( A1L87 );
A1L75 = CARRY(A1L75_adder_eqn);


--A1L78 is Add0~77 at MLABCELL_X82_Y21_N21
A1L78_adder_eqn = ( currCount[7] ) + ( GND ) + ( A1L83 );
A1L78 = SUM(A1L78_adder_eqn);

--A1L79 is Add0~78 at MLABCELL_X82_Y21_N21
A1L79_adder_eqn = ( currCount[7] ) + ( GND ) + ( A1L83 );
A1L79 = CARRY(A1L79_adder_eqn);


--A1L82 is Add0~81 at MLABCELL_X82_Y21_N18
A1L82_adder_eqn = ( A1L506Q ) + ( GND ) + ( A1L75 );
A1L82 = SUM(A1L82_adder_eqn);

--A1L83 is Add0~82 at MLABCELL_X82_Y21_N18
A1L83_adder_eqn = ( A1L506Q ) + ( GND ) + ( A1L75 );
A1L83 = CARRY(A1L83_adder_eqn);


--A1L86 is Add0~85 at MLABCELL_X82_Y21_N12
A1L86_adder_eqn = ( currCount[4] ) + ( GND ) + ( A1L59 );
A1L86 = SUM(A1L86_adder_eqn);

--A1L87 is Add0~86 at MLABCELL_X82_Y21_N12
A1L87_adder_eqn = ( currCount[4] ) + ( GND ) + ( A1L59 );
A1L87 = CARRY(A1L87_adder_eqn);


--A1L90 is Add0~89 at MLABCELL_X82_Y20_N3
A1L90_adder_eqn = ( A1L524Q ) + ( GND ) + ( A1L95 );
A1L90 = SUM(A1L90_adder_eqn);

--A1L91 is Add0~90 at MLABCELL_X82_Y20_N3
A1L91_adder_eqn = ( A1L524Q ) + ( GND ) + ( A1L95 );
A1L91 = CARRY(A1L91_adder_eqn);


--A1L94 is Add0~93 at MLABCELL_X82_Y20_N0
A1L94_adder_eqn = ( currCount[20] ) + ( GND ) + ( A1L99 );
A1L94 = SUM(A1L94_adder_eqn);

--A1L95 is Add0~94 at MLABCELL_X82_Y20_N0
A1L95_adder_eqn = ( currCount[20] ) + ( GND ) + ( A1L99 );
A1L95 = CARRY(A1L95_adder_eqn);


--A1L98 is Add0~97 at MLABCELL_X82_Y21_N57
A1L98_adder_eqn = ( currCount[19] ) + ( GND ) + ( A1L103 );
A1L98 = SUM(A1L98_adder_eqn);

--A1L99 is Add0~98 at MLABCELL_X82_Y21_N57
A1L99_adder_eqn = ( currCount[19] ) + ( GND ) + ( A1L103 );
A1L99 = CARRY(A1L99_adder_eqn);


--A1L102 is Add0~101 at MLABCELL_X82_Y21_N54
A1L102_adder_eqn = ( currCount[18] ) + ( GND ) + ( A1L111 );
A1L102 = SUM(A1L102_adder_eqn);

--A1L103 is Add0~102 at MLABCELL_X82_Y21_N54
A1L103_adder_eqn = ( currCount[18] ) + ( GND ) + ( A1L111 );
A1L103 = CARRY(A1L103_adder_eqn);


--A1L106 is Add0~105 at MLABCELL_X82_Y21_N48
A1L106_adder_eqn = ( currCount[16] ) + ( GND ) + ( A1L115 );
A1L106 = SUM(A1L106_adder_eqn);

--A1L107 is Add0~106 at MLABCELL_X82_Y21_N48
A1L107_adder_eqn = ( currCount[16] ) + ( GND ) + ( A1L115 );
A1L107 = CARRY(A1L107_adder_eqn);


--A1L110 is Add0~109 at MLABCELL_X82_Y21_N51
A1L110_adder_eqn = ( A1L519Q ) + ( GND ) + ( A1L107 );
A1L110 = SUM(A1L110_adder_eqn);

--A1L111 is Add0~110 at MLABCELL_X82_Y21_N51
A1L111_adder_eqn = ( A1L519Q ) + ( GND ) + ( A1L107 );
A1L111 = CARRY(A1L111_adder_eqn);


--A1L114 is Add0~113 at MLABCELL_X82_Y21_N45
A1L114_adder_eqn = ( currCount[15] ) + ( GND ) + ( A1L35 );
A1L114 = SUM(A1L114_adder_eqn);

--A1L115 is Add0~114 at MLABCELL_X82_Y21_N45
A1L115_adder_eqn = ( currCount[15] ) + ( GND ) + ( A1L35 );
A1L115 = CARRY(A1L115_adder_eqn);


--A1L246 is Add2~1 at MLABCELL_X82_Y23_N54
A1L246_adder_eqn = ( angleCount[31] ) + ( VCC ) + ( A1L355 );
A1L246 = SUM(A1L246_adder_eqn);


--A1L130 is Add1~1 at MLABCELL_X87_Y22_N54
A1L130_adder_eqn = ( angleCount[31] ) + ( GND ) + ( A1L239 );
A1L130 = SUM(A1L130_adder_eqn);


--A1L118 is Add0~117 at MLABCELL_X82_Y20_N33
A1L118_adder_eqn = ( currCount[31] ) + ( GND ) + ( A1L123 );
A1L118 = SUM(A1L118_adder_eqn);


--A1L122 is Add0~121 at MLABCELL_X82_Y20_N30
A1L122_adder_eqn = ( currCount[30] ) + ( GND ) + ( A1L127 );
A1L122 = SUM(A1L122_adder_eqn);

--A1L123 is Add0~122 at MLABCELL_X82_Y20_N30
A1L123_adder_eqn = ( currCount[30] ) + ( GND ) + ( A1L127 );
A1L123 = CARRY(A1L123_adder_eqn);


--A1L126 is Add0~125 at MLABCELL_X82_Y20_N27
A1L126_adder_eqn = ( A1L537Q ) + ( GND ) + ( A1L7 );
A1L126 = SUM(A1L126_adder_eqn);

--A1L127 is Add0~126 at MLABCELL_X82_Y20_N27
A1L127_adder_eqn = ( A1L537Q ) + ( GND ) + ( A1L7 );
A1L127 = CARRY(A1L127_adder_eqn);


--A1L134 is Add1~5 at MLABCELL_X87_Y22_N36
A1L134_adder_eqn = ( A1L468 ) + ( GND ) + ( A1L155 );
A1L134 = SUM(A1L134_adder_eqn);

--A1L135 is Add1~6 at MLABCELL_X87_Y22_N36
A1L135_adder_eqn = ( A1L468 ) + ( GND ) + ( A1L155 );
A1L135 = CARRY(A1L135_adder_eqn);


--A1L250 is Add2~5 at MLABCELL_X82_Y23_N36
A1L250_adder_eqn = ( A1L468 ) + ( VCC ) + ( A1L271 );
A1L250 = SUM(A1L250_adder_eqn);

--A1L251 is Add2~6 at MLABCELL_X82_Y23_N36
A1L251_adder_eqn = ( A1L468 ) + ( VCC ) + ( A1L271 );
A1L251 = CARRY(A1L251_adder_eqn);


--A1L138 is Add1~9 at MLABCELL_X87_Y22_N45
A1L138_adder_eqn = ( A1L480 ) + ( GND ) + ( A1L143 );
A1L138 = SUM(A1L138_adder_eqn);

--A1L139 is Add1~10 at MLABCELL_X87_Y22_N45
A1L139_adder_eqn = ( A1L480 ) + ( GND ) + ( A1L143 );
A1L139 = CARRY(A1L139_adder_eqn);


--A1L254 is Add2~9 at MLABCELL_X82_Y23_N45
A1L254_adder_eqn = ( A1L480 ) + ( VCC ) + ( A1L259 );
A1L254 = SUM(A1L254_adder_eqn);

--A1L255 is Add2~10 at MLABCELL_X82_Y23_N45
A1L255_adder_eqn = ( A1L480 ) + ( VCC ) + ( A1L259 );
A1L255 = CARRY(A1L255_adder_eqn);


--A1L142 is Add1~13 at MLABCELL_X87_Y22_N42
A1L142_adder_eqn = ( A1L476 ) + ( GND ) + ( A1L147 );
A1L142 = SUM(A1L142_adder_eqn);

--A1L143 is Add1~14 at MLABCELL_X87_Y22_N42
A1L143_adder_eqn = ( A1L476 ) + ( GND ) + ( A1L147 );
A1L143 = CARRY(A1L143_adder_eqn);


--A1L258 is Add2~13 at MLABCELL_X82_Y23_N42
A1L258_adder_eqn = ( A1L476 ) + ( VCC ) + ( A1L263 );
A1L258 = SUM(A1L258_adder_eqn);

--A1L259 is Add2~14 at MLABCELL_X82_Y23_N42
A1L259_adder_eqn = ( A1L476 ) + ( VCC ) + ( A1L263 );
A1L259 = CARRY(A1L259_adder_eqn);


--A1L146 is Add1~17 at MLABCELL_X87_Y22_N39
A1L146_adder_eqn = ( A1L472 ) + ( GND ) + ( A1L135 );
A1L146 = SUM(A1L146_adder_eqn);

--A1L147 is Add1~18 at MLABCELL_X87_Y22_N39
A1L147_adder_eqn = ( A1L472 ) + ( GND ) + ( A1L135 );
A1L147 = CARRY(A1L147_adder_eqn);


--A1L262 is Add2~17 at MLABCELL_X82_Y23_N39
A1L262_adder_eqn = ( A1L472 ) + ( VCC ) + ( A1L251 );
A1L262 = SUM(A1L262_adder_eqn);

--A1L263 is Add2~18 at MLABCELL_X82_Y23_N39
A1L263_adder_eqn = ( A1L472 ) + ( VCC ) + ( A1L251 );
A1L263 = CARRY(A1L263_adder_eqn);


--A1L150 is Add1~21 at MLABCELL_X87_Y22_N30
A1L150_adder_eqn = ( A1L460 ) + ( GND ) + ( A1L159 );
A1L150 = SUM(A1L150_adder_eqn);

--A1L151 is Add1~22 at MLABCELL_X87_Y22_N30
A1L151_adder_eqn = ( A1L460 ) + ( GND ) + ( A1L159 );
A1L151 = CARRY(A1L151_adder_eqn);


--A1L266 is Add2~21 at MLABCELL_X82_Y23_N30
A1L266_adder_eqn = ( A1L460 ) + ( VCC ) + ( A1L275 );
A1L266 = SUM(A1L266_adder_eqn);

--A1L267 is Add2~22 at MLABCELL_X82_Y23_N30
A1L267_adder_eqn = ( A1L460 ) + ( VCC ) + ( A1L275 );
A1L267 = CARRY(A1L267_adder_eqn);


--A1L154 is Add1~25 at MLABCELL_X87_Y22_N33
A1L154_adder_eqn = ( A1L464 ) + ( GND ) + ( A1L151 );
A1L154 = SUM(A1L154_adder_eqn);

--A1L155 is Add1~26 at MLABCELL_X87_Y22_N33
A1L155_adder_eqn = ( A1L464 ) + ( GND ) + ( A1L151 );
A1L155 = CARRY(A1L155_adder_eqn);


--A1L270 is Add2~25 at MLABCELL_X82_Y23_N33
A1L270_adder_eqn = ( A1L464 ) + ( VCC ) + ( A1L267 );
A1L270 = SUM(A1L270_adder_eqn);

--A1L271 is Add2~26 at MLABCELL_X82_Y23_N33
A1L271_adder_eqn = ( A1L464 ) + ( VCC ) + ( A1L267 );
A1L271 = CARRY(A1L271_adder_eqn);


--A1L158 is Add1~29 at MLABCELL_X87_Y22_N27
A1L158_adder_eqn = ( A1L456 ) + ( GND ) + ( A1L211 );
A1L158 = SUM(A1L158_adder_eqn);

--A1L159 is Add1~30 at MLABCELL_X87_Y22_N27
A1L159_adder_eqn = ( A1L456 ) + ( GND ) + ( A1L211 );
A1L159 = CARRY(A1L159_adder_eqn);


--A1L274 is Add2~29 at MLABCELL_X82_Y23_N27
A1L274_adder_eqn = ( A1L456 ) + ( VCC ) + ( A1L327 );
A1L274 = SUM(A1L274_adder_eqn);

--A1L275 is Add2~30 at MLABCELL_X82_Y23_N27
A1L275_adder_eqn = ( A1L456 ) + ( VCC ) + ( A1L327 );
A1L275 = CARRY(A1L275_adder_eqn);


--A1L162 is Add1~33 at MLABCELL_X87_Y23_N24
A1L162_adder_eqn = ( A1L412 ) + ( GND ) + ( A1L179 );
A1L162 = SUM(A1L162_adder_eqn);

--A1L163 is Add1~34 at MLABCELL_X87_Y23_N24
A1L163_adder_eqn = ( A1L412 ) + ( GND ) + ( A1L179 );
A1L163 = CARRY(A1L163_adder_eqn);


--A1L278 is Add2~33 at MLABCELL_X82_Y24_N54
A1L278_adder_eqn = ( A1L412 ) + ( VCC ) + ( A1L295 );
A1L278 = SUM(A1L278_adder_eqn);

--A1L279 is Add2~34 at MLABCELL_X82_Y24_N54
A1L279_adder_eqn = ( A1L412 ) + ( VCC ) + ( A1L295 );
A1L279 = CARRY(A1L279_adder_eqn);


--A1L166 is Add1~37 at MLABCELL_X87_Y22_N3
A1L166_adder_eqn = ( A1L424 ) + ( GND ) + ( A1L171 );
A1L166 = SUM(A1L166_adder_eqn);

--A1L167 is Add1~38 at MLABCELL_X87_Y22_N3
A1L167_adder_eqn = ( A1L424 ) + ( GND ) + ( A1L171 );
A1L167 = CARRY(A1L167_adder_eqn);


--A1L282 is Add2~37 at MLABCELL_X82_Y23_N3
A1L282_adder_eqn = ( A1L424 ) + ( VCC ) + ( A1L287 );
A1L282 = SUM(A1L282_adder_eqn);

--A1L283 is Add2~38 at MLABCELL_X82_Y23_N3
A1L283_adder_eqn = ( A1L424 ) + ( VCC ) + ( A1L287 );
A1L283 = CARRY(A1L283_adder_eqn);


--A1L170 is Add1~41 at MLABCELL_X87_Y22_N0
A1L170_adder_eqn = ( A1L420 ) + ( GND ) + ( A1L175 );
A1L170 = SUM(A1L170_adder_eqn);

--A1L171 is Add1~42 at MLABCELL_X87_Y22_N0
A1L171_adder_eqn = ( A1L420 ) + ( GND ) + ( A1L175 );
A1L171 = CARRY(A1L171_adder_eqn);


--A1L286 is Add2~41 at MLABCELL_X82_Y23_N0
A1L286_adder_eqn = ( A1L420 ) + ( VCC ) + ( A1L291 );
A1L286 = SUM(A1L286_adder_eqn);

--A1L287 is Add2~42 at MLABCELL_X82_Y23_N0
A1L287_adder_eqn = ( A1L420 ) + ( VCC ) + ( A1L291 );
A1L287 = CARRY(A1L287_adder_eqn);


--A1L174 is Add1~45 at MLABCELL_X87_Y23_N27
A1L174_adder_eqn = ( A1L416 ) + ( GND ) + ( A1L163 );
A1L174 = SUM(A1L174_adder_eqn);

--A1L175 is Add1~46 at MLABCELL_X87_Y23_N27
A1L175_adder_eqn = ( A1L416 ) + ( GND ) + ( A1L163 );
A1L175 = CARRY(A1L175_adder_eqn);


--A1L290 is Add2~45 at MLABCELL_X82_Y24_N57
A1L290_adder_eqn = ( A1L416 ) + ( VCC ) + ( A1L279 );
A1L290 = SUM(A1L290_adder_eqn);

--A1L291 is Add2~46 at MLABCELL_X82_Y24_N57
A1L291_adder_eqn = ( A1L416 ) + ( VCC ) + ( A1L279 );
A1L291 = CARRY(A1L291_adder_eqn);


--A1L178 is Add1~49 at MLABCELL_X87_Y23_N21
A1L178_adder_eqn = ( A1L408 ) + ( GND ) + ( A1L183 );
A1L178 = SUM(A1L178_adder_eqn);

--A1L179 is Add1~50 at MLABCELL_X87_Y23_N21
A1L179_adder_eqn = ( A1L408 ) + ( GND ) + ( A1L183 );
A1L179 = CARRY(A1L179_adder_eqn);


--A1L294 is Add2~49 at MLABCELL_X82_Y24_N51
A1L294_adder_eqn = ( A1L408 ) + ( VCC ) + ( A1L299 );
A1L294 = SUM(A1L294_adder_eqn);

--A1L295 is Add2~50 at MLABCELL_X82_Y24_N51
A1L295_adder_eqn = ( A1L408 ) + ( VCC ) + ( A1L299 );
A1L295 = CARRY(A1L295_adder_eqn);


--A1L182 is Add1~53 at MLABCELL_X87_Y23_N18
A1L182_adder_eqn = ( A1L401 ) + ( VCC ) + ( A1L187 );
A1L182 = SUM(A1L182_adder_eqn);

--A1L183 is Add1~54 at MLABCELL_X87_Y23_N18
A1L183_adder_eqn = ( A1L401 ) + ( VCC ) + ( A1L187 );
A1L183 = CARRY(A1L183_adder_eqn);


--A1L298 is Add2~53 at MLABCELL_X82_Y24_N48
A1L298_adder_eqn = ( A1L401 ) + ( GND ) + ( A1L303 );
A1L298 = SUM(A1L298_adder_eqn);

--A1L299 is Add2~54 at MLABCELL_X82_Y24_N48
A1L299_adder_eqn = ( A1L401 ) + ( GND ) + ( A1L303 );
A1L299 = CARRY(A1L299_adder_eqn);


--A1L186 is Add1~57 at MLABCELL_X87_Y23_N15
A1L186_adder_eqn = ( A1L397 ) + ( VCC ) + ( A1L199 );
A1L186 = SUM(A1L186_adder_eqn);

--A1L187 is Add1~58 at MLABCELL_X87_Y23_N15
A1L187_adder_eqn = ( A1L397 ) + ( VCC ) + ( A1L199 );
A1L187 = CARRY(A1L187_adder_eqn);


--A1L302 is Add2~57 at MLABCELL_X82_Y24_N45
A1L302_adder_eqn = ( A1L397 ) + ( GND ) + ( A1L315 );
A1L302 = SUM(A1L302_adder_eqn);

--A1L303 is Add2~58 at MLABCELL_X82_Y24_N45
A1L303_adder_eqn = ( A1L397 ) + ( GND ) + ( A1L315 );
A1L303 = CARRY(A1L303_adder_eqn);


--A1L190 is Add1~61 at MLABCELL_X87_Y23_N0
A1L190_adder_eqn = ( A1L377 ) + ( VCC ) + ( !VCC );
A1L190 = SUM(A1L190_adder_eqn);

--A1L191 is Add1~62 at MLABCELL_X87_Y23_N0
A1L191_adder_eqn = ( A1L377 ) + ( VCC ) + ( !VCC );
A1L191 = CARRY(A1L191_adder_eqn);


--A1L306 is Add2~61 at MLABCELL_X82_Y24_N30
A1L306_adder_eqn = ( A1L377 ) + ( VCC ) + ( !VCC );
A1L306 = SUM(A1L306_adder_eqn);

--A1L307 is Add2~62 at MLABCELL_X82_Y24_N30
A1L307_adder_eqn = ( A1L377 ) + ( VCC ) + ( !VCC );
A1L307 = CARRY(A1L307_adder_eqn);


--A1L194 is Add1~65 at MLABCELL_X87_Y23_N6
A1L194_adder_eqn = ( A1L385 ) + ( VCC ) + ( A1L207 );
A1L194 = SUM(A1L194_adder_eqn);

--A1L195 is Add1~66 at MLABCELL_X87_Y23_N6
A1L195_adder_eqn = ( A1L385 ) + ( VCC ) + ( A1L207 );
A1L195 = CARRY(A1L195_adder_eqn);


--A1L310 is Add2~65 at MLABCELL_X82_Y24_N36
A1L310_adder_eqn = ( A1L385 ) + ( GND ) + ( A1L323 );
A1L310 = SUM(A1L310_adder_eqn);

--A1L311 is Add2~66 at MLABCELL_X82_Y24_N36
A1L311_adder_eqn = ( A1L385 ) + ( GND ) + ( A1L323 );
A1L311 = CARRY(A1L311_adder_eqn);


--A1L198 is Add1~69 at MLABCELL_X87_Y23_N12
A1L198_adder_eqn = ( A1L393 ) + ( VCC ) + ( A1L203 );
A1L198 = SUM(A1L198_adder_eqn);

--A1L199 is Add1~70 at MLABCELL_X87_Y23_N12
A1L199_adder_eqn = ( A1L393 ) + ( VCC ) + ( A1L203 );
A1L199 = CARRY(A1L199_adder_eqn);


--A1L314 is Add2~69 at MLABCELL_X82_Y24_N42
A1L314_adder_eqn = ( A1L393 ) + ( GND ) + ( A1L319 );
A1L314 = SUM(A1L314_adder_eqn);

--A1L315 is Add2~70 at MLABCELL_X82_Y24_N42
A1L315_adder_eqn = ( A1L393 ) + ( GND ) + ( A1L319 );
A1L315 = CARRY(A1L315_adder_eqn);


--A1L202 is Add1~73 at MLABCELL_X87_Y23_N9
A1L202_adder_eqn = ( A1L389 ) + ( VCC ) + ( A1L195 );
A1L202 = SUM(A1L202_adder_eqn);

--A1L203 is Add1~74 at MLABCELL_X87_Y23_N9
A1L203_adder_eqn = ( A1L389 ) + ( VCC ) + ( A1L195 );
A1L203 = CARRY(A1L203_adder_eqn);


--A1L318 is Add2~73 at MLABCELL_X82_Y24_N39
A1L318_adder_eqn = ( A1L389 ) + ( GND ) + ( A1L311 );
A1L318 = SUM(A1L318_adder_eqn);

--A1L319 is Add2~74 at MLABCELL_X82_Y24_N39
A1L319_adder_eqn = ( A1L389 ) + ( GND ) + ( A1L311 );
A1L319 = CARRY(A1L319_adder_eqn);


--A1L206 is Add1~77 at MLABCELL_X87_Y23_N3
A1L206_adder_eqn = ( A1L381 ) + ( GND ) + ( A1L191 );
A1L206 = SUM(A1L206_adder_eqn);

--A1L207 is Add1~78 at MLABCELL_X87_Y23_N3
A1L207_adder_eqn = ( A1L381 ) + ( GND ) + ( A1L191 );
A1L207 = CARRY(A1L207_adder_eqn);


--A1L322 is Add2~77 at MLABCELL_X82_Y24_N33
A1L322_adder_eqn = ( A1L381 ) + ( VCC ) + ( A1L307 );
A1L322 = SUM(A1L322_adder_eqn);

--A1L323 is Add2~78 at MLABCELL_X82_Y24_N33
A1L323_adder_eqn = ( A1L381 ) + ( VCC ) + ( A1L307 );
A1L323 = CARRY(A1L323_adder_eqn);


--A1L210 is Add1~81 at MLABCELL_X87_Y22_N24
A1L210_adder_eqn = ( A1L452 ) + ( GND ) + ( A1L215 );
A1L210 = SUM(A1L210_adder_eqn);

--A1L211 is Add1~82 at MLABCELL_X87_Y22_N24
A1L211_adder_eqn = ( A1L452 ) + ( GND ) + ( A1L215 );
A1L211 = CARRY(A1L211_adder_eqn);


--A1L326 is Add2~81 at MLABCELL_X82_Y23_N24
A1L326_adder_eqn = ( A1L452 ) + ( VCC ) + ( A1L331 );
A1L326 = SUM(A1L326_adder_eqn);

--A1L327 is Add2~82 at MLABCELL_X82_Y23_N24
A1L327_adder_eqn = ( A1L452 ) + ( VCC ) + ( A1L331 );
A1L327 = CARRY(A1L327_adder_eqn);


--A1L214 is Add1~85 at MLABCELL_X87_Y22_N21
A1L214_adder_eqn = ( A1L448 ) + ( GND ) + ( A1L219 );
A1L214 = SUM(A1L214_adder_eqn);

--A1L215 is Add1~86 at MLABCELL_X87_Y22_N21
A1L215_adder_eqn = ( A1L448 ) + ( GND ) + ( A1L219 );
A1L215 = CARRY(A1L215_adder_eqn);


--A1L330 is Add2~85 at MLABCELL_X82_Y23_N21
A1L330_adder_eqn = ( A1L448 ) + ( VCC ) + ( A1L335 );
A1L330 = SUM(A1L330_adder_eqn);

--A1L331 is Add2~86 at MLABCELL_X82_Y23_N21
A1L331_adder_eqn = ( A1L448 ) + ( VCC ) + ( A1L335 );
A1L331 = CARRY(A1L331_adder_eqn);


--A1L218 is Add1~89 at MLABCELL_X87_Y22_N18
A1L218_adder_eqn = ( A1L444 ) + ( GND ) + ( A1L223 );
A1L218 = SUM(A1L218_adder_eqn);

--A1L219 is Add1~90 at MLABCELL_X87_Y22_N18
A1L219_adder_eqn = ( A1L444 ) + ( GND ) + ( A1L223 );
A1L219 = CARRY(A1L219_adder_eqn);


--A1L334 is Add2~89 at MLABCELL_X82_Y23_N18
A1L334_adder_eqn = ( A1L444 ) + ( VCC ) + ( A1L339 );
A1L334 = SUM(A1L334_adder_eqn);

--A1L335 is Add2~90 at MLABCELL_X82_Y23_N18
A1L335_adder_eqn = ( A1L444 ) + ( VCC ) + ( A1L339 );
A1L335 = CARRY(A1L335_adder_eqn);


--A1L222 is Add1~93 at MLABCELL_X87_Y22_N15
A1L222_adder_eqn = ( A1L440 ) + ( GND ) + ( A1L231 );
A1L222 = SUM(A1L222_adder_eqn);

--A1L223 is Add1~94 at MLABCELL_X87_Y22_N15
A1L223_adder_eqn = ( A1L440 ) + ( GND ) + ( A1L231 );
A1L223 = CARRY(A1L223_adder_eqn);


--A1L338 is Add2~93 at MLABCELL_X82_Y23_N15
A1L338_adder_eqn = ( A1L440 ) + ( VCC ) + ( A1L347 );
A1L338 = SUM(A1L338_adder_eqn);

--A1L339 is Add2~94 at MLABCELL_X82_Y23_N15
A1L339_adder_eqn = ( A1L440 ) + ( VCC ) + ( A1L347 );
A1L339 = CARRY(A1L339_adder_eqn);


--A1L226 is Add1~97 at MLABCELL_X87_Y22_N9
A1L226_adder_eqn = ( A1L432 ) + ( GND ) + ( A1L235 );
A1L226 = SUM(A1L226_adder_eqn);

--A1L227 is Add1~98 at MLABCELL_X87_Y22_N9
A1L227_adder_eqn = ( A1L432 ) + ( GND ) + ( A1L235 );
A1L227 = CARRY(A1L227_adder_eqn);


--A1L342 is Add2~97 at MLABCELL_X82_Y23_N9
A1L342_adder_eqn = ( A1L432 ) + ( VCC ) + ( A1L351 );
A1L342 = SUM(A1L342_adder_eqn);

--A1L343 is Add2~98 at MLABCELL_X82_Y23_N9
A1L343_adder_eqn = ( A1L432 ) + ( VCC ) + ( A1L351 );
A1L343 = CARRY(A1L343_adder_eqn);


--A1L230 is Add1~101 at MLABCELL_X87_Y22_N12
A1L230_adder_eqn = ( A1L436 ) + ( GND ) + ( A1L227 );
A1L230 = SUM(A1L230_adder_eqn);

--A1L231 is Add1~102 at MLABCELL_X87_Y22_N12
A1L231_adder_eqn = ( A1L436 ) + ( GND ) + ( A1L227 );
A1L231 = CARRY(A1L231_adder_eqn);


--A1L346 is Add2~101 at MLABCELL_X82_Y23_N12
A1L346_adder_eqn = ( A1L436 ) + ( VCC ) + ( A1L343 );
A1L346 = SUM(A1L346_adder_eqn);

--A1L347 is Add2~102 at MLABCELL_X82_Y23_N12
A1L347_adder_eqn = ( A1L436 ) + ( VCC ) + ( A1L343 );
A1L347 = CARRY(A1L347_adder_eqn);


--A1L234 is Add1~105 at MLABCELL_X87_Y22_N6
A1L234_adder_eqn = ( A1L428 ) + ( GND ) + ( A1L167 );
A1L234 = SUM(A1L234_adder_eqn);

--A1L235 is Add1~106 at MLABCELL_X87_Y22_N6
A1L235_adder_eqn = ( A1L428 ) + ( GND ) + ( A1L167 );
A1L235 = CARRY(A1L235_adder_eqn);


--A1L350 is Add2~105 at MLABCELL_X82_Y23_N6
A1L350_adder_eqn = ( A1L428 ) + ( VCC ) + ( A1L283 );
A1L350 = SUM(A1L350_adder_eqn);

--A1L351 is Add2~106 at MLABCELL_X82_Y23_N6
A1L351_adder_eqn = ( A1L428 ) + ( VCC ) + ( A1L283 );
A1L351 = CARRY(A1L351_adder_eqn);


--A1L354 is Add2~109 at MLABCELL_X82_Y23_N51
A1L354_adder_eqn = ( A1L488 ) + ( VCC ) + ( A1L359 );
A1L354 = SUM(A1L354_adder_eqn);

--A1L355 is Add2~110 at MLABCELL_X82_Y23_N51
A1L355_adder_eqn = ( A1L488 ) + ( VCC ) + ( A1L359 );
A1L355 = CARRY(A1L355_adder_eqn);


--A1L238 is Add1~109 at MLABCELL_X87_Y22_N51
A1L238_adder_eqn = ( A1L488 ) + ( GND ) + ( A1L243 );
A1L238 = SUM(A1L238_adder_eqn);

--A1L239 is Add1~110 at MLABCELL_X87_Y22_N51
A1L239_adder_eqn = ( A1L488 ) + ( GND ) + ( A1L243 );
A1L239 = CARRY(A1L239_adder_eqn);


--A1L242 is Add1~113 at MLABCELL_X87_Y22_N48
A1L242_adder_eqn = ( A1L484 ) + ( GND ) + ( A1L139 );
A1L242 = SUM(A1L242_adder_eqn);

--A1L243 is Add1~114 at MLABCELL_X87_Y22_N48
A1L243_adder_eqn = ( A1L484 ) + ( GND ) + ( A1L139 );
A1L243 = CARRY(A1L243_adder_eqn);


--A1L358 is Add2~113 at MLABCELL_X82_Y23_N48
A1L358_adder_eqn = ( A1L484 ) + ( VCC ) + ( A1L255 );
A1L358 = SUM(A1L358_adder_eqn);

--A1L359 is Add2~114 at MLABCELL_X82_Y23_N48
A1L359_adder_eqn = ( A1L484 ) + ( VCC ) + ( A1L255 );
A1L359 = CARRY(A1L359_adder_eqn);


--out_wave is out_wave at FF_X84_Y21_N13
--register power-up is low

out_wave = DFFEAS(A1L766, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  ,  ,  );


--A1L551Q is irq~reg0 at FF_X84_Y22_N52
--register power-up is low

A1L551Q = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  ,  , A1L549,  ,  , VCC);


--current_state.INT_RIGHT is current_state.INT_RIGHT at FF_X79_Y24_N16
--register power-up is low

current_state.INT_RIGHT = DFFEAS(A1L544, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  ,  ,  );


--current_state.INT_LEFT is current_state.INT_LEFT at FF_X79_Y24_N8
--register power-up is low

current_state.INT_LEFT = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  ,  , next_state.INT_LEFT,  ,  , VCC);


--A1L763 is out_wave~0 at LABCELL_X81_Y22_N48
A1L763 = ( !current_state.INT_RIGHT & ( !A1L542Q ) );


--A1L638 is LessThan3~0 at MLABCELL_X82_Y22_N51
A1L638 = ( A1L476 & ( A1L480 & ( (currCount[28] & (currCount[27] & (!currCount[26] $ (A1L472)))) ) ) ) # ( !A1L476 & ( A1L480 & ( (currCount[28] & (!currCount[27] & (!currCount[26] $ (A1L472)))) ) ) ) # ( A1L476 & ( !A1L480 & ( (!currCount[28] & (currCount[27] & (!currCount[26] $ (A1L472)))) ) ) ) # ( !A1L476 & ( !A1L480 & ( (!currCount[28] & (!currCount[27] & (!currCount[26] $ (A1L472)))) ) ) );


--A1L639 is LessThan3~1 at MLABCELL_X84_Y21_N42
A1L639 = !A1L464 $ (!currCount[24]);


--A1L640 is LessThan3~2 at MLABCELL_X84_Y21_N48
A1L640 = ( A1L638 & ( A1L468 & ( (!A1L639 & (currCount[25] & (!A1L460 $ (currCount[23])))) ) ) ) # ( A1L638 & ( !A1L468 & ( (!A1L639 & (!currCount[25] & (!A1L460 $ (currCount[23])))) ) ) );


--A1L641 is LessThan3~3 at LABCELL_X81_Y21_N48
A1L641 = !A1L456 $ (!currCount[22]);


--A1L642 is LessThan3~4 at LABCELL_X85_Y21_N24
A1L642 = ( A1L420 & ( currCount[14] & ( (A1L424 & (currCount[13] & (!currCount[12] $ (A1L416)))) ) ) ) # ( !A1L420 & ( currCount[14] & ( (A1L424 & (!currCount[13] & (!currCount[12] $ (A1L416)))) ) ) ) # ( A1L420 & ( !currCount[14] & ( (!A1L424 & (currCount[13] & (!currCount[12] $ (A1L416)))) ) ) ) # ( !A1L420 & ( !currCount[14] & ( (!A1L424 & (!currCount[13] & (!currCount[12] $ (A1L416)))) ) ) );


--A1L643 is LessThan3~5 at LABCELL_X85_Y21_N30
A1L643 = ( A1L642 & ( (!currCount[11] & (!A1L412 & (!A1L408 $ (currCount[10])))) # (currCount[11] & (A1L412 & (!A1L408 $ (currCount[10])))) ) );


--A1L644 is LessThan3~6 at MLABCELL_X87_Y21_N0
A1L644 = ( currCount[9] & ( !A1L401 ) ) # ( !currCount[9] & ( A1L401 ) );


--A1L645 is LessThan3~7 at MLABCELL_X87_Y21_N57
A1L645 = ( A1L509Q & ( !A1L397 ) ) # ( !A1L509Q & ( A1L397 ) );


--A1L646 is LessThan3~8 at LABCELL_X85_Y24_N9
A1L646 = ( A1L365 & ( (!A1L369 & (!A1L498Q & !currCount[1])) # (A1L369 & ((!A1L498Q) # (!currCount[1]))) ) ) # ( !A1L365 & ( (A1L369 & !currCount[1]) ) );


--A1L647 is LessThan3~9 at LABCELL_X85_Y24_N54
A1L647 = ( currCount[2] & ( (!A1L377 & (A1L373 & (!currCount[3] & A1L646))) # (A1L377 & ((!currCount[3]) # ((A1L373 & A1L646)))) ) ) # ( !currCount[2] & ( (!A1L377 & (!currCount[3] & ((A1L646) # (A1L373)))) # (A1L377 & (((!currCount[3]) # (A1L646)) # (A1L373))) ) );


--A1L648 is LessThan3~10 at LABCELL_X88_Y24_N0
A1L648 = ( A1L393 & ( (currCount[7] & (!A1L389 $ (currCount[6]))) ) ) # ( !A1L393 & ( (!currCount[7] & (!A1L389 $ (currCount[6]))) ) );


--A1L649 is LessThan3~11 at LABCELL_X85_Y21_N0
A1L649 = ( A1L648 & ( (!A1L381 & (!currCount[4] & (!A1L385 $ (currCount[5])))) # (A1L381 & (currCount[4] & (!A1L385 $ (currCount[5])))) ) );


--A1L650 is LessThan3~12 at LABCELL_X88_Y24_N51
A1L650 = ( A1L393 & ( (!currCount[7]) # ((!currCount[6] & A1L389)) ) ) # ( !A1L393 & ( (!currCount[6] & (!currCount[7] & A1L389)) ) );


--A1L651 is LessThan3~13 at LABCELL_X85_Y21_N54
A1L651 = ( A1L385 & ( !A1L650 & ( (!A1L648) # ((currCount[5] & ((!A1L381) # (currCount[4])))) ) ) ) # ( !A1L385 & ( !A1L650 & ( ((!A1L381) # ((!A1L648) # (currCount[5]))) # (currCount[4]) ) ) );


--A1L652 is LessThan3~14 at MLABCELL_X84_Y21_N24
A1L652 = ( !A1L645 & ( A1L643 & ( (!A1L644 & ((!A1L651) # ((A1L649 & A1L647)))) ) ) );


--A1L653 is LessThan3~15 at LABCELL_X85_Y21_N12
A1L653 = ( A1L420 & ( A1L424 & ( (!currCount[13]) # ((!currCount[14]) # ((!currCount[12] & A1L416))) ) ) ) # ( !A1L420 & ( A1L424 & ( (!currCount[14]) # ((!currCount[12] & (!currCount[13] & A1L416))) ) ) ) # ( A1L420 & ( !A1L424 & ( (!currCount[14] & ((!currCount[13]) # ((!currCount[12] & A1L416)))) ) ) ) # ( !A1L420 & ( !A1L424 & ( (!currCount[12] & (!currCount[13] & (!currCount[14] & A1L416))) ) ) );


--A1L654 is LessThan3~16 at LABCELL_X85_Y21_N6
A1L654 = ( currCount[10] & ( A1L642 & ( (!A1L653 & ((!A1L412) # (currCount[11]))) ) ) ) # ( !currCount[10] & ( A1L642 & ( (!A1L653 & ((!A1L412 & ((!A1L408) # (currCount[11]))) # (A1L412 & (!A1L408 & currCount[11])))) ) ) ) # ( currCount[10] & ( !A1L642 & ( !A1L653 ) ) ) # ( !currCount[10] & ( !A1L642 & ( !A1L653 ) ) );


--A1L655 is LessThan3~17 at LABCELL_X85_Y21_N36
A1L655 = ( currCount[9] & ( A1L643 & ( (A1L654 & ((!A1L401) # ((!A1L397) # (A1L509Q)))) ) ) ) # ( !currCount[9] & ( A1L643 & ( (!A1L401 & (A1L654 & ((!A1L397) # (A1L509Q)))) ) ) ) # ( currCount[9] & ( !A1L643 & ( A1L654 ) ) ) # ( !currCount[9] & ( !A1L643 & ( A1L654 ) ) );


--A1L656 is LessThan3~18 at LABCELL_X81_Y23_N0
A1L656 = ( A1L448 & ( A1L444 & ( (currCount[20] & (currCount[19] & (!A1L452 $ (currCount[21])))) ) ) ) # ( !A1L448 & ( A1L444 & ( (!currCount[20] & (currCount[19] & (!A1L452 $ (currCount[21])))) ) ) ) # ( A1L448 & ( !A1L444 & ( (currCount[20] & (!currCount[19] & (!A1L452 $ (currCount[21])))) ) ) ) # ( !A1L448 & ( !A1L444 & ( (!currCount[20] & (!currCount[19] & (!A1L452 $ (currCount[21])))) ) ) );


--A1L657 is LessThan3~19 at LABCELL_X81_Y21_N42
A1L657 = ( !A1L440 & ( currCount[18] ) ) # ( A1L440 & ( !currCount[18] ) );


--A1L658 is LessThan3~20 at LABCELL_X85_Y22_N27
A1L658 = ( A1L436 & ( !currCount[17] ) ) # ( !A1L436 & ( currCount[17] ) );


--A1L659 is LessThan3~21 at LABCELL_X81_Y21_N39
A1L659 = ( A1L428 & ( !currCount[15] ) ) # ( !A1L428 & ( currCount[15] ) );


--A1L660 is LessThan3~22 at MLABCELL_X84_Y21_N18
A1L660 = ( !A1L658 & ( A1L656 & ( (!A1L657 & (!A1L659 & (!A1L432 $ (currCount[16])))) ) ) );


--A1L661 is LessThan3~23 at MLABCELL_X84_Y21_N3
A1L661 = ( !A1L658 & ( A1L656 & ( !A1L657 ) ) );


--A1L662 is LessThan3~24 at LABCELL_X81_Y23_N27
A1L662 = ( A1L448 & ( A1L444 & ( (!currCount[21] & ((!currCount[20]) # ((!currCount[19]) # (A1L452)))) # (currCount[21] & (A1L452 & ((!currCount[20]) # (!currCount[19])))) ) ) ) # ( !A1L448 & ( A1L444 & ( (!currCount[21] & (((!currCount[20] & !currCount[19])) # (A1L452))) # (currCount[21] & (!currCount[20] & (!currCount[19] & A1L452))) ) ) ) # ( A1L448 & ( !A1L444 & ( (!currCount[20] & ((!currCount[21]) # (A1L452))) # (currCount[20] & (!currCount[21] & A1L452)) ) ) ) # ( !A1L448 & ( !A1L444 & ( (!currCount[21] & A1L452) ) ) );


--A1L663 is LessThan3~25 at LABCELL_X81_Y23_N12
A1L663 = ( A1L656 & ( A1L440 & ( (currCount[18] & (!A1L662 & ((!A1L436) # (A1L519Q)))) ) ) ) # ( !A1L656 & ( A1L440 & ( !A1L662 ) ) ) # ( A1L656 & ( !A1L440 & ( (!A1L662 & (((!A1L436) # (A1L519Q)) # (currCount[18]))) ) ) ) # ( !A1L656 & ( !A1L440 & ( !A1L662 ) ) );


--A1L664 is LessThan3~26 at MLABCELL_X84_Y21_N30
A1L664 = ( A1L661 & ( A1L663 & ( (!A1L432 & (((!A1L428) # (currCount[16])) # (currCount[15]))) # (A1L432 & (currCount[16] & ((!A1L428) # (currCount[15])))) ) ) ) # ( !A1L661 & ( A1L663 ) );


--A1L665 is LessThan3~27 at MLABCELL_X84_Y21_N36
A1L665 = ( A1L655 & ( A1L652 & ( (!A1L641 & (A1L640 & ((!A1L664) # (A1L660)))) ) ) ) # ( !A1L655 & ( A1L652 & ( (!A1L641 & (A1L640 & ((!A1L664) # (A1L660)))) ) ) ) # ( A1L655 & ( !A1L652 & ( (!A1L641 & (A1L640 & !A1L664)) ) ) ) # ( !A1L655 & ( !A1L652 & ( (!A1L641 & (A1L640 & ((!A1L664) # (A1L660)))) ) ) );


--A1L666 is LessThan3~28 at MLABCELL_X84_Y21_N57
A1L666 = ( !A1L639 & ( (A1L638 & (!A1L468 $ (currCount[25]))) ) );


--A1L667 is LessThan3~29 at MLABCELL_X82_Y22_N18
A1L667 = ( A1L472 & ( A1L480 & ( (!currCount[28]) # ((!currCount[27] & ((!currCount[26]) # (A1L476))) # (currCount[27] & (A1L476 & !currCount[26]))) ) ) ) # ( !A1L472 & ( A1L480 & ( (!currCount[28]) # ((!currCount[27] & A1L476)) ) ) ) # ( A1L472 & ( !A1L480 & ( (!currCount[28] & ((!currCount[27] & ((!currCount[26]) # (A1L476))) # (currCount[27] & (A1L476 & !currCount[26])))) ) ) ) # ( !A1L472 & ( !A1L480 & ( (!currCount[27] & (A1L476 & !currCount[28])) ) ) );


--A1L668 is LessThan3~30 at LABCELL_X81_Y21_N18
A1L668 = ( !A1L667 & ( A1L638 & ( (!A1L468 & (((!A1L464) # (currCount[25])) # (currCount[24]))) # (A1L468 & (currCount[25] & ((!A1L464) # (currCount[24])))) ) ) ) # ( !A1L667 & ( !A1L638 ) );


--A1L669 is LessThan3~31 at MLABCELL_X84_Y21_N6
A1L669 = ( A1L456 & ( A1L666 & ( (A1L668 & ((!A1L460 & ((currCount[22]) # (currCount[23]))) # (A1L460 & (currCount[23] & currCount[22])))) ) ) ) # ( !A1L456 & ( A1L666 & ( (A1L668 & ((!A1L460) # (currCount[23]))) ) ) ) # ( A1L456 & ( !A1L666 & ( A1L668 ) ) ) # ( !A1L456 & ( !A1L666 & ( A1L668 ) ) );


--angleCount[31] is angleCount[31] at FF_X81_Y22_N44
--register power-up is low

angleCount[31] = DFFEAS(A1L852, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  ,  ,  );


--A1L764 is out_wave~1 at MLABCELL_X84_Y20_N24
A1L764 = ( A1L484 & ( A1L540Q & ( (angleCount[31] & (currCount[29] & (!A1L488 $ (currCount[30])))) ) ) ) # ( !A1L484 & ( A1L540Q & ( (angleCount[31] & (!currCount[29] & (!A1L488 $ (currCount[30])))) ) ) ) # ( A1L484 & ( !A1L540Q & ( (!angleCount[31] & (currCount[29] & (!A1L488 $ (currCount[30])))) ) ) ) # ( !A1L484 & ( !A1L540Q & ( (!angleCount[31] & (!currCount[29] & (!A1L488 $ (currCount[30])))) ) ) );


--A1L765 is out_wave~2 at MLABCELL_X84_Y20_N30
A1L765 = ( A1L484 & ( A1L540Q & ( (!angleCount[31]) # ((!A1L488 & (!currCount[30] & !currCount[29])) # (A1L488 & ((!currCount[30]) # (!currCount[29])))) ) ) ) # ( !A1L484 & ( A1L540Q & ( (!angleCount[31]) # ((A1L488 & !currCount[30])) ) ) ) # ( A1L484 & ( !A1L540Q & ( (!angleCount[31] & ((!A1L488 & (!currCount[30] & !currCount[29])) # (A1L488 & ((!currCount[30]) # (!currCount[29]))))) ) ) ) # ( !A1L484 & ( !A1L540Q & ( (!angleCount[31] & (A1L488 & !currCount[30])) ) ) );


--A1L766 is out_wave~3 at MLABCELL_X84_Y21_N12
A1L766 = ( out_wave & ( A1L665 & ( (!A1L763) # ((A1L764) # (A1L765)) ) ) ) # ( !out_wave & ( A1L665 & ( (A1L763 & ((A1L764) # (A1L765))) ) ) ) # ( out_wave & ( !A1L665 & ( (!A1L763) # (((!A1L669 & A1L764)) # (A1L765)) ) ) ) # ( !out_wave & ( !A1L665 & ( (A1L763 & (((!A1L669 & A1L764)) # (A1L765))) ) ) );


--current_state.SW_LEFT is current_state.SW_LEFT at FF_X80_Y24_N29
--register power-up is low

current_state.SW_LEFT = DFFEAS(A1L546, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  ,  ,  );


--current_state.SW_RIGHT is current_state.SW_RIGHT at FF_X84_Y20_N2
--register power-up is low

current_state.SW_RIGHT = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  ,  , next_state.SW_RIGHT,  ,  , VCC);


--A1L549 is irq~0 at MLABCELL_X84_Y22_N27
A1L549 = ( current_state.SW_LEFT & ( !current_state.SW_RIGHT ) );


--next_state.INT_RIGHT is next_state.INT_RIGHT at FF_X83_Y24_N1
--register power-up is low

next_state.INT_RIGHT = DFFEAS(A1L849, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  ,  ,  );


--next_state.INT_LEFT is next_state.INT_LEFT at FF_X83_Y24_N20
--register power-up is low

next_state.INT_LEFT = DFFEAS(A1L851, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  ,  ,  );


--A1L552 is LessThan0~0 at LABCELL_X85_Y21_N42
A1L552 = ( currCount[1] & ( currCount[5] & ( (currCount[0] & (currCount[2] & (currCount[4] & currCount[3]))) ) ) );


--A1L553 is LessThan0~1 at LABCELL_X85_Y21_N33
A1L553 = ( !A1L509Q & ( (!currCount[6] & !currCount[7]) ) );


--A1L554 is LessThan0~2 at LABCELL_X85_Y21_N51
A1L554 = ( !currCount[13] & ( !currCount[12] & ( (!currCount[11] & !currCount[10]) ) ) );


--A1L555 is LessThan0~3 at LABCELL_X85_Y21_N18
A1L555 = ( currCount[9] & ( A1L554 & ( (!currCount[15] & ((!currCount[14]) # ((A1L553 & !A1L552)))) ) ) ) # ( !currCount[9] & ( A1L554 & ( !currCount[15] ) ) ) # ( currCount[9] & ( !A1L554 & ( (!currCount[15] & !currCount[14]) ) ) ) # ( !currCount[9] & ( !A1L554 & ( (!currCount[15] & !currCount[14]) ) ) );


--A1L556 is LessThan0~4 at LABCELL_X81_Y21_N0
A1L556 = ( currCount[19] & ( currCount[18] & ( (currCount[16] & A1L519Q) ) ) );


--A1L557 is LessThan0~5 at MLABCELL_X82_Y20_N51
A1L557 = ( !A1L533Q & ( !currCount[25] & ( (!currCount[24] & !A1L527Q) ) ) );


--A1L558 is LessThan0~6 at MLABCELL_X82_Y20_N42
A1L558 = ( !A1L524Q & ( !currCount[30] & ( (!currCount[22] & !A1L531Q) ) ) );


--A1L559 is LessThan0~7 at MLABCELL_X82_Y20_N36
A1L559 = ( !A1L537Q & ( !A1L535Q & ( (A1L557 & (A1L558 & !currCount[20])) ) ) );


--A1L560 is LessThan0~8 at MLABCELL_X84_Y20_N57
A1L560 = ( A1L556 & ( A1L555 & ( (!A1L559 & !A1L540Q) ) ) ) # ( !A1L556 & ( A1L555 & ( (!A1L559 & !A1L540Q) ) ) ) # ( A1L556 & ( !A1L555 & ( !A1L540Q ) ) ) # ( !A1L556 & ( !A1L555 & ( (!A1L559 & !A1L540Q) ) ) );


--A1L470Q is angleCount[25]~_emulated at FF_X84_Y22_N41
--register power-up is low

A1L470Q = DFFEAS(A1L469, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L405,  ,  ,  ,  );


--minAngleCount[25] is minAngleCount[25] at FF_X84_Y22_N44
--register power-up is low

minAngleCount[25] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[0][25],  ,  , VCC);


--A1L468 is angleCount[25]~22 at MLABCELL_X84_Y22_N9
A1L468 = ( minAngleCount[25] & ( (!A1L846) # (!A1L470Q $ (!A1L467)) ) ) # ( !minAngleCount[25] & ( (A1L846 & (!A1L470Q $ (!A1L467))) ) );


--A1L482Q is angleCount[28]~_emulated at FF_X83_Y22_N2
--register power-up is low

A1L482Q = DFFEAS(A1L481, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L405,  ,  ,  ,  );


--minAngleCount[28] is minAngleCount[28] at FF_X83_Y22_N32
--register power-up is low

minAngleCount[28] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[0][28],  ,  , VCC);


--A1L480 is angleCount[28]~10 at LABCELL_X83_Y22_N3
A1L480 = ( A1L479 & ( (!A1L846 & (minAngleCount[28])) # (A1L846 & ((!A1L482Q))) ) ) # ( !A1L479 & ( (!A1L846 & (minAngleCount[28])) # (A1L846 & ((A1L482Q))) ) );


--A1L478Q is angleCount[27]~_emulated at FF_X83_Y22_N58
--register power-up is low

A1L478Q = DFFEAS(A1L477, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L405,  ,  ,  ,  );


--minAngleCount[27] is minAngleCount[27] at FF_X83_Y22_N50
--register power-up is low

minAngleCount[27] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[0][27],  ,  , VCC);


--A1L476 is angleCount[27]~14 at LABCELL_X83_Y22_N54
A1L476 = ( minAngleCount[27] & ( (!A1L846) # (!A1L478Q $ (!A1L475)) ) ) # ( !minAngleCount[27] & ( (A1L846 & (!A1L478Q $ (!A1L475))) ) );


--A1L474Q is angleCount[26]~_emulated at FF_X82_Y22_N10
--register power-up is low

A1L474Q = DFFEAS(A1L473, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L405,  ,  ,  ,  );


--minAngleCount[26] is minAngleCount[26] at FF_X83_Y22_N20
--register power-up is low

minAngleCount[26] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[0][26],  ,  , VCC);


--A1L472 is angleCount[26]~18 at LABCELL_X83_Y22_N15
A1L472 = ( A1L474Q & ( (!A1L846 & (minAngleCount[26])) # (A1L846 & ((!A1L471))) ) ) # ( !A1L474Q & ( (!A1L846 & (minAngleCount[26])) # (A1L846 & ((A1L471))) ) );


--A1L462Q is angleCount[23]~_emulated at FF_X83_Y21_N37
--register power-up is low

A1L462Q = DFFEAS(A1L461, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L405,  ,  ,  ,  );


--minAngleCount[23] is minAngleCount[23] at FF_X84_Y21_N53
--register power-up is low

minAngleCount[23] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[0][23],  ,  , VCC);


--A1L460 is angleCount[23]~30 at MLABCELL_X84_Y21_N45
A1L460 = ( A1L462Q & ( (!A1L846 & (minAngleCount[23])) # (A1L846 & ((!A1L459))) ) ) # ( !A1L462Q & ( (!A1L846 & (minAngleCount[23])) # (A1L846 & ((A1L459))) ) );


--A1L466Q is angleCount[24]~_emulated at FF_X83_Y21_N7
--register power-up is low

A1L466Q = DFFEAS(A1L465, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L405,  ,  ,  ,  );


--minAngleCount[24] is minAngleCount[24] at FF_X83_Y21_N53
--register power-up is low

minAngleCount[24] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[0][24],  ,  , VCC);


--A1L464 is angleCount[24]~26 at LABCELL_X83_Y21_N57
A1L464 = ( A1L846 & ( !A1L463 $ (!A1L466Q) ) ) # ( !A1L846 & ( minAngleCount[24] ) );


--A1L458Q is angleCount[22]~_emulated at FF_X83_Y21_N56
--register power-up is low

A1L458Q = DFFEAS(A1L457, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L405,  ,  ,  ,  );


--minAngleCount[22] is minAngleCount[22] at FF_X83_Y21_N20
--register power-up is low

minAngleCount[22] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[0][22],  ,  , VCC);


--A1L456 is angleCount[22]~34 at LABCELL_X83_Y21_N21
A1L456 = ( A1L458Q & ( A1L846 & ( !A1L455 ) ) ) # ( !A1L458Q & ( A1L846 & ( A1L455 ) ) ) # ( A1L458Q & ( !A1L846 & ( minAngleCount[22] ) ) ) # ( !A1L458Q & ( !A1L846 & ( minAngleCount[22] ) ) );


--A1L414Q is angleCount[11]~_emulated at FF_X84_Y22_N37
--register power-up is low

A1L414Q = DFFEAS(A1L413, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L405,  ,  ,  ,  );


--minAngleCount[11] is minAngleCount[11] at FF_X87_Y23_N53
--register power-up is low

minAngleCount[11] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[0][11],  ,  , VCC);


--A1L412 is angleCount[11]~78 at MLABCELL_X87_Y23_N45
A1L412 = ( A1L414Q & ( (!A1L846 & ((minAngleCount[11]))) # (A1L846 & (!A1L411)) ) ) # ( !A1L414Q & ( (!A1L846 & ((minAngleCount[11]))) # (A1L846 & (A1L411)) ) );


--A1L426Q is angleCount[14]~_emulated at FF_X88_Y23_N29
--register power-up is low

A1L426Q = DFFEAS(A1L425, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L405,  ,  ,  ,  );


--minAngleCount[14] is minAngleCount[14] at FF_X88_Y23_N5
--register power-up is low

minAngleCount[14] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, A1L737,  ,  , VCC);


--A1L424 is angleCount[14]~66 at LABCELL_X88_Y23_N18
A1L424 = ( A1L423 & ( (!A1L846 & ((!minAngleCount[14]))) # (A1L846 & (!A1L426Q)) ) ) # ( !A1L423 & ( (!A1L846 & ((!minAngleCount[14]))) # (A1L846 & (A1L426Q)) ) );


--A1L422Q is angleCount[13]~_emulated at FF_X88_Y23_N47
--register power-up is low

A1L422Q = DFFEAS(A1L421, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L405,  ,  ,  ,  );


--minAngleCount[13] is minAngleCount[13] at FF_X88_Y23_N35
--register power-up is low

minAngleCount[13] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[0][13],  ,  , VCC);


--A1L420 is angleCount[13]~70 at LABCELL_X88_Y23_N12
A1L420 = ( A1L419 & ( (!A1L846 & (minAngleCount[13])) # (A1L846 & ((!A1L422Q))) ) ) # ( !A1L419 & ( (!A1L846 & (minAngleCount[13])) # (A1L846 & ((A1L422Q))) ) );


--A1L418Q is angleCount[12]~_emulated at FF_X84_Y23_N25
--register power-up is low

A1L418Q = DFFEAS(A1L417, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L405,  ,  ,  ,  );


--minAngleCount[12] is minAngleCount[12] at FF_X88_Y23_N38
--register power-up is low

minAngleCount[12] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[0][12],  ,  , VCC);


--A1L416 is angleCount[12]~74 at LABCELL_X88_Y23_N42
A1L416 = ( A1L418Q & ( (!A1L846 & (minAngleCount[12])) # (A1L846 & ((!A1L415))) ) ) # ( !A1L418Q & ( (!A1L846 & (minAngleCount[12])) # (A1L846 & ((A1L415))) ) );


--A1L410Q is angleCount[10]~_emulated at FF_X88_Y24_N8
--register power-up is low

A1L410Q = DFFEAS(A1L409, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L405,  ,  ,  ,  );


--minAngleCount[10] is minAngleCount[10] at FF_X87_Y23_N35
--register power-up is low

minAngleCount[10] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[0][10],  ,  , VCC);


--A1L408 is angleCount[10]~82 at MLABCELL_X87_Y23_N54
A1L408 = ( A1L410Q & ( (!A1L846 & (minAngleCount[10])) # (A1L846 & ((!A1L407))) ) ) # ( !A1L410Q & ( (!A1L846 & (minAngleCount[10])) # (A1L846 & ((A1L407))) ) );


--A1L406Q is angleCount[9]~_emulated at FF_X85_Y23_N2
--register power-up is low

A1L406Q = DFFEAS(A1L402, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L405,  ,  ,  ,  );


--minAngleCount[9] is minAngleCount[9] at FF_X85_Y23_N50
--register power-up is low

minAngleCount[9] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, A1L731,  ,  , VCC);


--A1L401 is angleCount[9]~86 at LABCELL_X85_Y23_N39
A1L401 = ( A1L406Q & ( minAngleCount[9] & ( (!A1L400 & A1L846) ) ) ) # ( !A1L406Q & ( minAngleCount[9] & ( (A1L400 & A1L846) ) ) ) # ( A1L406Q & ( !minAngleCount[9] & ( (!A1L400) # (!A1L846) ) ) ) # ( !A1L406Q & ( !minAngleCount[9] & ( (!A1L846) # (A1L400) ) ) );


--A1L399Q is angleCount[8]~_emulated at FF_X88_Y24_N5
--register power-up is low

A1L399Q = DFFEAS(A1L398, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L405,  ,  ,  ,  );


--minAngleCount[8] is minAngleCount[8] at FF_X88_Y24_N35
--register power-up is low

minAngleCount[8] = DFFEAS(A1L729, GLOBAL(A1L495),  ,  , A1L672,  ,  ,  ,  );


--A1L397 is angleCount[8]~90 at LABCELL_X88_Y24_N18
A1L397 = ( A1L396 & ( (!A1L846 & (!minAngleCount[8])) # (A1L846 & ((!A1L399Q))) ) ) # ( !A1L396 & ( (!A1L846 & (!minAngleCount[8])) # (A1L846 & ((A1L399Q))) ) );


--A1L379Q is angleCount[3]~_emulated at FF_X85_Y24_N44
--register power-up is low

A1L379Q = DFFEAS(A1L378, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L405,  ,  ,  ,  );


--minAngleCount[3] is minAngleCount[3] at FF_X85_Y24_N11
--register power-up is low

minAngleCount[3] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, A1L721,  ,  , VCC);


--A1L377 is angleCount[3]~110 at LABCELL_X85_Y24_N12
A1L377 = ( A1L379Q & ( (!A1L846 & (!minAngleCount[3])) # (A1L846 & ((!A1L376))) ) ) # ( !A1L379Q & ( (!A1L846 & (!minAngleCount[3])) # (A1L846 & ((A1L376))) ) );


--A1L375Q is angleCount[2]~_emulated at FF_X85_Y24_N41
--register power-up is low

A1L375Q = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L549, A1L374,  ,  , VCC);


--minAngleCount[2] is minAngleCount[2] at FF_X85_Y24_N29
--register power-up is low

minAngleCount[2] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, A1L719,  ,  , VCC);


--A1L373 is angleCount[2]~114 at LABCELL_X85_Y24_N24
A1L373 = ( A1L372 & ( (!A1L846 & ((!minAngleCount[2]))) # (A1L846 & (!A1L375Q)) ) ) # ( !A1L372 & ( (!A1L846 & ((!minAngleCount[2]))) # (A1L846 & (A1L375Q)) ) );


--A1L371Q is angleCount[1]~_emulated at FF_X87_Y24_N20
--register power-up is low

A1L371Q = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L549, A1L370,  ,  , VCC);


--minAngleCount[1] is minAngleCount[1] at FF_X87_Y24_N2
--register power-up is low

minAngleCount[1] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, A1L717,  ,  , VCC);


--A1L369 is angleCount[1]~118 at MLABCELL_X87_Y24_N30
A1L369 = ( A1L371Q & ( (!A1L846 & ((!minAngleCount[1]))) # (A1L846 & (!A1L368)) ) ) # ( !A1L371Q & ( (!A1L846 & ((!minAngleCount[1]))) # (A1L846 & (A1L368)) ) );


--A1L367Q is angleCount[0]~_emulated at FF_X85_Y24_N35
--register power-up is low

A1L367Q = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L549, A1L366,  ,  , VCC);


--minAngleCount[0] is minAngleCount[0] at FF_X85_Y24_N5
--register power-up is low

minAngleCount[0] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, A1L715,  ,  , VCC);


--A1L365 is angleCount[0]~122 at LABCELL_X85_Y24_N21
A1L365 = ( A1L367Q & ( (!A1L846 & (!minAngleCount[0])) # (A1L846 & ((!A1L364))) ) ) # ( !A1L367Q & ( (!A1L846 & (!minAngleCount[0])) # (A1L846 & ((A1L364))) ) );


--A1L387Q is angleCount[5]~_emulated at FF_X82_Y24_N11
--register power-up is low

A1L387Q = DFFEAS(A1L386, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L405,  ,  ,  ,  );


--minAngleCount[5] is minAngleCount[5] at FF_X82_Y24_N23
--register power-up is low

minAngleCount[5] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[0][5],  ,  , VCC);


--A1L385 is angleCount[5]~102 at MLABCELL_X82_Y24_N6
A1L385 = ( A1L846 & ( !A1L387Q $ (!A1L384) ) ) # ( !A1L846 & ( minAngleCount[5] ) );


--A1L395Q is angleCount[7]~_emulated at FF_X88_Y24_N50
--register power-up is low

A1L395Q = DFFEAS(A1L394, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L405,  ,  ,  ,  );


--minAngleCount[7] is minAngleCount[7] at FF_X88_Y24_N29
--register power-up is low

minAngleCount[7] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[0][7],  ,  , VCC);


--A1L393 is angleCount[7]~94 at LABCELL_X88_Y24_N12
A1L393 = ( A1L846 & ( A1L395Q & ( !A1L392 ) ) ) # ( !A1L846 & ( A1L395Q & ( minAngleCount[7] ) ) ) # ( A1L846 & ( !A1L395Q & ( A1L392 ) ) ) # ( !A1L846 & ( !A1L395Q & ( minAngleCount[7] ) ) );


--A1L391Q is angleCount[6]~_emulated at FF_X84_Y22_N59
--register power-up is low

A1L391Q = DFFEAS(A1L390, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L405,  ,  ,  ,  );


--minAngleCount[6] is minAngleCount[6] at FF_X84_Y22_N2
--register power-up is low

minAngleCount[6] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, A1L725,  ,  , VCC);


--A1L389 is angleCount[6]~98 at MLABCELL_X84_Y22_N21
A1L389 = ( A1L388 & ( (!A1L846 & ((!minAngleCount[6]))) # (A1L846 & (!A1L391Q)) ) ) # ( !A1L388 & ( (!A1L846 & ((!minAngleCount[6]))) # (A1L846 & (A1L391Q)) ) );


--A1L383Q is angleCount[4]~_emulated at FF_X85_Y22_N14
--register power-up is low

A1L383Q = DFFEAS(A1L382, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L405,  ,  ,  ,  );


--minAngleCount[4] is minAngleCount[4] at FF_X85_Y22_N8
--register power-up is low

minAngleCount[4] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[0][4],  ,  , VCC);


--A1L381 is angleCount[4]~106 at LABCELL_X85_Y22_N3
A1L381 = ( A1L846 & ( !A1L383Q $ (!A1L380) ) ) # ( !A1L846 & ( minAngleCount[4] ) );


--A1L454Q is angleCount[21]~_emulated at FF_X84_Y22_N7
--register power-up is low

A1L454Q = DFFEAS(A1L453, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L405,  ,  ,  ,  );


--minAngleCount[21] is minAngleCount[21] at FF_X84_Y23_N53
--register power-up is low

minAngleCount[21] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[0][21],  ,  , VCC);


--A1L452 is angleCount[21]~38 at MLABCELL_X84_Y23_N27
A1L452 = ( A1L454Q & ( (!A1L846 & (minAngleCount[21])) # (A1L846 & ((!A1L451))) ) ) # ( !A1L454Q & ( (!A1L846 & (minAngleCount[21])) # (A1L846 & ((A1L451))) ) );


--A1L450Q is angleCount[20]~_emulated at FF_X84_Y23_N38
--register power-up is low

A1L450Q = DFFEAS(A1L449, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L405,  ,  ,  ,  );


--minAngleCount[20] is minAngleCount[20] at FF_X84_Y23_N17
--register power-up is low

minAngleCount[20] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[0][20],  ,  , VCC);


--A1L448 is angleCount[20]~42 at MLABCELL_X84_Y23_N30
A1L448 = ( minAngleCount[20] & ( (!A1L846) # (!A1L450Q $ (!A1L447)) ) ) # ( !minAngleCount[20] & ( (A1L846 & (!A1L450Q $ (!A1L447))) ) );


--A1L446Q is angleCount[19]~_emulated at FF_X83_Y23_N19
--register power-up is low

A1L446Q = DFFEAS(A1L445, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L405,  ,  ,  ,  );


--minAngleCount[19] is minAngleCount[19] at FF_X84_Y23_N56
--register power-up is low

minAngleCount[19] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[0][19],  ,  , VCC);


--A1L444 is angleCount[19]~46 at MLABCELL_X84_Y23_N18
A1L444 = ( A1L446Q & ( (!A1L846 & (minAngleCount[19])) # (A1L846 & ((!A1L443))) ) ) # ( !A1L446Q & ( (!A1L846 & (minAngleCount[19])) # (A1L846 & ((A1L443))) ) );


--A1L442Q is angleCount[18]~_emulated at FF_X81_Y23_N56
--register power-up is low

A1L442Q = DFFEAS(A1L441, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L405,  ,  ,  ,  );


--minAngleCount[18] is minAngleCount[18] at FF_X81_Y23_N26
--register power-up is low

minAngleCount[18] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[0][18],  ,  , VCC);


--A1L440 is angleCount[18]~50 at LABCELL_X81_Y23_N42
A1L440 = ( A1L442Q & ( minAngleCount[18] & ( (!A1L439) # (!A1L846) ) ) ) # ( !A1L442Q & ( minAngleCount[18] & ( (!A1L846) # (A1L439) ) ) ) # ( A1L442Q & ( !minAngleCount[18] & ( (!A1L439 & A1L846) ) ) ) # ( !A1L442Q & ( !minAngleCount[18] & ( (A1L439 & A1L846) ) ) );


--A1L434Q is angleCount[16]~_emulated at FF_X85_Y22_N16
--register power-up is low

A1L434Q = DFFEAS(A1L433, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L405,  ,  ,  ,  );


--minAngleCount[16] is minAngleCount[16] at FF_X85_Y23_N56
--register power-up is low

minAngleCount[16] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[0][16],  ,  , VCC);


--A1L432 is angleCount[16]~58 at LABCELL_X85_Y23_N42
A1L432 = ( A1L434Q & ( (!A1L846 & ((minAngleCount[16]))) # (A1L846 & (!A1L431)) ) ) # ( !A1L434Q & ( (!A1L846 & ((minAngleCount[16]))) # (A1L846 & (A1L431)) ) );


--A1L438Q is angleCount[17]~_emulated at FF_X85_Y23_N35
--register power-up is low

A1L438Q = DFFEAS(A1L437, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L405,  ,  ,  ,  );


--minAngleCount[17] is minAngleCount[17] at FF_X85_Y23_N47
--register power-up is low

minAngleCount[17] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[0][17],  ,  , VCC);


--A1L436 is angleCount[17]~54 at LABCELL_X85_Y23_N27
A1L436 = ( A1L438Q & ( (!A1L846 & ((minAngleCount[17]))) # (A1L846 & (!A1L435)) ) ) # ( !A1L438Q & ( (!A1L846 & ((minAngleCount[17]))) # (A1L846 & (A1L435)) ) );


--A1L430Q is angleCount[15]~_emulated at FF_X83_Y23_N17
--register power-up is low

A1L430Q = DFFEAS(A1L429, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L405,  ,  ,  ,  );


--minAngleCount[15] is minAngleCount[15] at FF_X83_Y23_N50
--register power-up is low

minAngleCount[15] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, A1L739,  ,  , VCC);


--A1L428 is angleCount[15]~62 at LABCELL_X83_Y23_N12
A1L428 = ( minAngleCount[15] & ( (A1L846 & (!A1L430Q $ (!A1L427))) ) ) # ( !minAngleCount[15] & ( (!A1L846) # (!A1L430Q $ (!A1L427)) ) );


--A1L852 is Selector5~0 at LABCELL_X81_Y22_N42
A1L852 = ( angleCount[31] & ( A1L246 & ( ((!current_state.SW_LEFT & ((!A1L560) # (A1L130)))) # (current_state.SW_RIGHT) ) ) ) # ( !angleCount[31] & ( A1L246 & ( (A1L560 & (((!current_state.SW_LEFT & A1L130)) # (current_state.SW_RIGHT))) ) ) ) # ( angleCount[31] & ( !A1L246 & ( (!A1L560 & (((!current_state.SW_LEFT)) # (current_state.SW_RIGHT))) # (A1L560 & (((!current_state.SW_LEFT & A1L130)))) ) ) ) # ( !angleCount[31] & ( !A1L246 & ( (A1L560 & (!current_state.SW_LEFT & A1L130)) ) ) );


--A1L490Q is angleCount[30]~_emulated at FF_X81_Y23_N31
--register power-up is low

A1L490Q = DFFEAS(A1L489, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L405,  ,  ,  ,  );


--minAngleCount[30] is minAngleCount[30] at FF_X85_Y22_N29
--register power-up is low

minAngleCount[30] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[0][30],  ,  , VCC);


--A1L488 is angleCount[30]~2 at LABCELL_X85_Y22_N0
A1L488 = ( A1L487 & ( (!A1L846 & ((minAngleCount[30]))) # (A1L846 & (!A1L490Q)) ) ) # ( !A1L487 & ( (!A1L846 & ((minAngleCount[30]))) # (A1L846 & (A1L490Q)) ) );


--A1L486Q is angleCount[29]~_emulated at FF_X85_Y22_N55
--register power-up is low

A1L486Q = DFFEAS(A1L485, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L405,  ,  ,  ,  );


--minAngleCount[29] is minAngleCount[29] at FF_X85_Y22_N44
--register power-up is low

minAngleCount[29] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[0][29],  ,  , VCC);


--A1L484 is angleCount[29]~6 at LABCELL_X85_Y22_N6
A1L484 = ( A1L486Q & ( (!A1L846 & (minAngleCount[29])) # (A1L846 & ((!A1L483))) ) ) # ( !A1L486Q & ( (!A1L846 & (minAngleCount[29])) # (A1L846 & ((A1L483))) ) );


--next_state.SW_LEFT is next_state.SW_LEFT at FF_X83_Y24_N25
--register power-up is low

next_state.SW_LEFT = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L850, A1L758,  ,  , VCC);


--next_state.SW_RIGHT is next_state.SW_RIGHT at FF_X83_Y24_N7
--register power-up is low

next_state.SW_RIGHT = DFFEAS(A1L848, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L850,  ,  ,  ,  );


--A1L599 is LessThan2~0 at MLABCELL_X84_Y24_N12
A1L599 = ( A1L389 & ( (!minAngleCount[6] & (!minAngleCount[7] $ (A1L393))) ) ) # ( !A1L389 & ( (minAngleCount[6] & (!minAngleCount[7] $ (A1L393))) ) );


--A1L600 is LessThan2~1 at LABCELL_X85_Y24_N15
A1L600 = ( A1L373 & ( (!minAngleCount[2] & (!minAngleCount[3] $ (!A1L377))) ) ) # ( !A1L373 & ( (minAngleCount[2] & (!minAngleCount[3] $ (!A1L377))) ) );


--A1L601 is LessThan2~2 at LABCELL_X85_Y24_N45
A1L601 = ( A1L373 & ( (!minAngleCount[2] & (A1L377 & minAngleCount[3])) # (minAngleCount[2] & ((minAngleCount[3]) # (A1L377))) ) ) # ( !A1L373 & ( (A1L377 & minAngleCount[3]) ) );


--A1L602 is LessThan2~3 at LABCELL_X81_Y24_N39
A1L602 = ( minAngleCount[7] & ( A1L627 & ( (A1L393 & (((A1L628 & A1L600)) # (A1L601))) ) ) ) # ( !minAngleCount[7] & ( A1L627 & ( (!A1L393 & (((A1L628 & A1L600)) # (A1L601))) ) ) );


--A1L603 is LessThan2~4 at MLABCELL_X84_Y24_N15
A1L603 = ( A1L393 & ( (!minAngleCount[7]) # ((minAngleCount[6] & A1L389)) ) ) # ( !A1L393 & ( (!minAngleCount[7] & (minAngleCount[6] & A1L389)) ) );


--A1L604 is LessThan2~5 at MLABCELL_X84_Y24_N6
A1L604 = ( minAngleCount[5] & ( A1L599 & ( (!A1L603 & ((!A1L385) # ((!A1L381) # (minAngleCount[4])))) ) ) ) # ( !minAngleCount[5] & ( A1L599 & ( (!A1L385 & (!A1L603 & ((!A1L381) # (minAngleCount[4])))) ) ) ) # ( minAngleCount[5] & ( !A1L599 & ( !A1L603 ) ) ) # ( !minAngleCount[5] & ( !A1L599 & ( !A1L603 ) ) );


--A1L605 is LessThan2~6 at LABCELL_X88_Y23_N39
A1L605 = ( minAngleCount[12] & ( A1L420 & ( (minAngleCount[13] & (A1L416 & (!minAngleCount[14] $ (!A1L424)))) ) ) ) # ( !minAngleCount[12] & ( A1L420 & ( (minAngleCount[13] & (!A1L416 & (!minAngleCount[14] $ (!A1L424)))) ) ) ) # ( minAngleCount[12] & ( !A1L420 & ( (!minAngleCount[13] & (A1L416 & (!minAngleCount[14] $ (!A1L424)))) ) ) ) # ( !minAngleCount[12] & ( !A1L420 & ( (!minAngleCount[13] & (!A1L416 & (!minAngleCount[14] $ (!A1L424)))) ) ) );


--A1L606 is LessThan2~7 at MLABCELL_X87_Y23_N36
A1L606 = ( A1L634 & ( A1L633 & ( (!minAngleCount[14] & (A1L424 & (!A1L401 $ (!minAngleCount[9])))) # (minAngleCount[14] & (!A1L424 & (!A1L401 $ (!minAngleCount[9])))) ) ) );


--A1L607 is LessThan2~8 at LABCELL_X88_Y23_N0
A1L607 = ( minAngleCount[12] & ( A1L420 & ( (!minAngleCount[13] & ((A1L424) # (minAngleCount[14]))) # (minAngleCount[13] & (minAngleCount[14] & A1L424)) ) ) ) # ( !minAngleCount[12] & ( A1L420 & ( (!minAngleCount[14] & (A1L424 & ((!minAngleCount[13]) # (A1L416)))) # (minAngleCount[14] & ((!minAngleCount[13]) # ((A1L416) # (A1L424)))) ) ) ) # ( minAngleCount[12] & ( !A1L420 & ( (minAngleCount[14] & A1L424) ) ) ) # ( !minAngleCount[12] & ( !A1L420 & ( (!minAngleCount[14] & (!minAngleCount[13] & (A1L424 & A1L416))) # (minAngleCount[14] & (((!minAngleCount[13] & A1L416)) # (A1L424))) ) ) );


--A1L608 is LessThan2~9 at MLABCELL_X82_Y24_N0
A1L608 = ( !A1L607 & ( A1L605 & ( (!minAngleCount[11] & (!A1L412 & ((!A1L408) # (minAngleCount[10])))) # (minAngleCount[11] & ((!A1L408) # ((!A1L412) # (minAngleCount[10])))) ) ) ) # ( !A1L607 & ( !A1L605 ) );


--A1L609 is LessThan2~10 at LABCELL_X88_Y24_N36
A1L609 = ( A1L635 & ( A1L605 & ( (!A1L397 & (((A1L401 & minAngleCount[9])))) # (A1L397 & (((minAngleCount[8] & minAngleCount[9])) # (A1L401))) ) ) );


--A1L610 is LessThan2~11 at MLABCELL_X84_Y24_N48
A1L610 = ( minAngleCount[21] & ( minAngleCount[20] & ( (A1L452 & (A1L448 & (!minAngleCount[19] $ (A1L444)))) ) ) ) # ( !minAngleCount[21] & ( minAngleCount[20] & ( (!A1L452 & (A1L448 & (!minAngleCount[19] $ (A1L444)))) ) ) ) # ( minAngleCount[21] & ( !minAngleCount[20] & ( (A1L452 & (!A1L448 & (!minAngleCount[19] $ (A1L444)))) ) ) ) # ( !minAngleCount[21] & ( !minAngleCount[20] & ( (!A1L452 & (!A1L448 & (!minAngleCount[19] $ (A1L444)))) ) ) );


--A1L611 is LessThan2~12 at LABCELL_X81_Y23_N33
A1L611 = ( A1L440 & ( !minAngleCount[18] ) ) # ( !A1L440 & ( minAngleCount[18] ) );


--A1L612 is LessThan2~13 at LABCELL_X85_Y23_N3
A1L612 = ( A1L436 & ( !minAngleCount[17] ) ) # ( !A1L436 & ( minAngleCount[17] ) );


--A1L613 is LessThan2~14 at LABCELL_X83_Y23_N36
A1L613 = ( A1L452 & ( A1L637 & ( (minAngleCount[21] & (A1L636 & (!minAngleCount[16] $ (A1L432)))) ) ) ) # ( !A1L452 & ( A1L637 & ( (!minAngleCount[21] & (A1L636 & (!minAngleCount[16] $ (A1L432)))) ) ) );


--A1L614 is LessThan2~15 at MLABCELL_X82_Y24_N12
A1L614 = ( A1L608 & ( A1L602 & ( (A1L613 & ((A1L606) # (A1L609))) ) ) ) # ( !A1L608 & ( A1L602 & ( A1L613 ) ) ) # ( A1L608 & ( !A1L602 & ( (A1L613 & (((!A1L604 & A1L606)) # (A1L609))) ) ) ) # ( !A1L608 & ( !A1L602 & ( A1L613 ) ) );


--A1L615 is LessThan2~16 at LABCELL_X83_Y24_N12
A1L615 = ( minAngleCount[20] & ( minAngleCount[21] & ( (A1L448 & (!minAngleCount[19] & (A1L452 & A1L444))) ) ) ) # ( !minAngleCount[20] & ( minAngleCount[21] & ( (A1L452 & (((!minAngleCount[19] & A1L444)) # (A1L448))) ) ) ) # ( minAngleCount[20] & ( !minAngleCount[21] & ( ((A1L448 & (!minAngleCount[19] & A1L444))) # (A1L452) ) ) ) # ( !minAngleCount[20] & ( !minAngleCount[21] & ( (((!minAngleCount[19] & A1L444)) # (A1L452)) # (A1L448) ) ) );


--A1L616 is LessThan2~17 at LABCELL_X83_Y24_N30
A1L616 = ( A1L610 & ( !A1L615 & ( (!A1L630 & (((!A1L629) # (A1L612)) # (A1L611))) ) ) ) # ( !A1L610 & ( !A1L615 ) );


--A1L617 is LessThan2~18 at MLABCELL_X84_Y24_N57
A1L617 = ( A1L472 & ( A1L476 & ( (minAngleCount[27] & (minAngleCount[26] & (!minAngleCount[28] $ (A1L480)))) ) ) ) # ( !A1L472 & ( A1L476 & ( (minAngleCount[27] & (!minAngleCount[26] & (!minAngleCount[28] $ (A1L480)))) ) ) ) # ( A1L472 & ( !A1L476 & ( (!minAngleCount[27] & (minAngleCount[26] & (!minAngleCount[28] $ (A1L480)))) ) ) ) # ( !A1L472 & ( !A1L476 & ( (!minAngleCount[27] & (!minAngleCount[26] & (!minAngleCount[28] $ (A1L480)))) ) ) );


--A1L618 is LessThan2~19 at LABCELL_X83_Y24_N24
A1L618 = ( minAngleCount[25] & ( !A1L468 ) ) # ( !minAngleCount[25] & ( A1L468 ) );


--A1L619 is LessThan2~20 at LABCELL_X83_Y21_N51
A1L619 = !A1L464 $ (!minAngleCount[24]);


--A1L620 is LessThan2~21 at MLABCELL_X84_Y22_N18
A1L620 = ( A1L456 & ( !minAngleCount[22] ) ) # ( !A1L456 & ( minAngleCount[22] ) );


--A1L621 is LessThan2~22 at LABCELL_X83_Y24_N36
A1L621 = ( !A1L620 & ( !A1L618 & ( (!A1L619 & (A1L617 & (!minAngleCount[23] $ (A1L460)))) ) ) );


--A1L622 is LessThan2~23 at LABCELL_X83_Y22_N51
A1L622 = ( A1L476 & ( A1L480 & ( (!minAngleCount[27]) # ((!minAngleCount[28]) # ((A1L472 & !minAngleCount[26]))) ) ) ) # ( !A1L476 & ( A1L480 & ( (!minAngleCount[28]) # ((!minAngleCount[27] & (A1L472 & !minAngleCount[26]))) ) ) ) # ( A1L476 & ( !A1L480 & ( (!minAngleCount[28] & ((!minAngleCount[27]) # ((A1L472 & !minAngleCount[26])))) ) ) ) # ( !A1L476 & ( !A1L480 & ( (!minAngleCount[27] & (A1L472 & (!minAngleCount[28] & !minAngleCount[26]))) ) ) );


--A1L623 is LessThan2~24 at LABCELL_X83_Y24_N54
A1L623 = ( A1L619 & ( A1L618 & ( (!A1L622 & ((!A1L632) # (!A1L617))) ) ) ) # ( !A1L619 & ( A1L618 & ( (!A1L622 & ((!A1L632) # (!A1L617))) ) ) ) # ( A1L619 & ( !A1L618 & ( (!A1L622 & ((!A1L632) # (!A1L617))) ) ) ) # ( !A1L619 & ( !A1L618 & ( (!A1L622 & ((!A1L617) # ((!A1L631 & !A1L632)))) ) ) );


--A1L624 is LessThan2~25 at MLABCELL_X84_Y22_N45
A1L624 = ( A1L484 & ( A1L488 & ( (minAngleCount[30] & minAngleCount[29]) ) ) ) # ( !A1L484 & ( A1L488 & ( (minAngleCount[30] & !minAngleCount[29]) ) ) ) # ( A1L484 & ( !A1L488 & ( (!minAngleCount[30] & minAngleCount[29]) ) ) ) # ( !A1L484 & ( !A1L488 & ( (!minAngleCount[30] & !minAngleCount[29]) ) ) );


--A1L625 is LessThan2~26 at LABCELL_X85_Y22_N45
A1L625 = ( A1L488 & ( (!minAngleCount[30]) # ((!minAngleCount[29] & A1L484)) ) ) # ( !A1L488 & ( (!minAngleCount[30] & (!minAngleCount[29] & A1L484)) ) );


--A1L626 is LessThan2~27 at LABCELL_X83_Y24_N48
A1L626 = ( A1L621 & ( A1L614 & ( (!A1L625 & !A1L624) ) ) ) # ( !A1L621 & ( A1L614 & ( (!A1L625 & ((!A1L624) # (A1L623))) ) ) ) # ( A1L621 & ( !A1L614 & ( (!A1L625 & ((!A1L624) # ((A1L616 & A1L623)))) ) ) ) # ( !A1L621 & ( !A1L614 & ( (!A1L625 & ((!A1L624) # (A1L623))) ) ) );


--maxAngleCount[7] is maxAngleCount[7] at FF_X84_Y24_N38
--register power-up is low

maxAngleCount[7] = DFFEAS(A1L685, GLOBAL(A1L495),  ,  , A1L672,  ,  ,  ,  );


--maxAngleCount[6] is maxAngleCount[6] at FF_X84_Y22_N29
--register power-up is low

maxAngleCount[6] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[1][6],  ,  , VCC);


--A1L561 is LessThan1~0 at MLABCELL_X84_Y24_N39
A1L561 = ( A1L389 & ( (maxAngleCount[6] & (!maxAngleCount[7] $ (!A1L393))) ) ) # ( !A1L389 & ( (!maxAngleCount[6] & (!maxAngleCount[7] $ (!A1L393))) ) );


--maxAngleCount[5] is maxAngleCount[5] at FF_X84_Y24_N35
--register power-up is low

maxAngleCount[5] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[1][5],  ,  , VCC);


--maxAngleCount[4] is maxAngleCount[4] at FF_X85_Y23_N11
--register power-up is low

maxAngleCount[4] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, A1L681,  ,  , VCC);


--maxAngleCount[1] is maxAngleCount[1] at FF_X87_Y24_N5
--register power-up is low

maxAngleCount[1] = DFFEAS(A1L675, GLOBAL(A1L495),  ,  , A1L672,  ,  ,  ,  );


--maxAngleCount[0] is maxAngleCount[0] at FF_X87_Y24_N32
--register power-up is low

maxAngleCount[0] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, A1L673,  ,  , VCC);


--maxAngleCount[3] is maxAngleCount[3] at FF_X85_Y24_N8
--register power-up is low

maxAngleCount[3] = DFFEAS(A1L679, GLOBAL(A1L495),  ,  , A1L672,  ,  ,  ,  );


--maxAngleCount[2] is maxAngleCount[2] at FF_X85_Y24_N26
--register power-up is low

maxAngleCount[2] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, A1L677,  ,  , VCC);


--A1L562 is LessThan1~1 at LABCELL_X85_Y24_N18
A1L562 = ( A1L373 & ( (!maxAngleCount[2] & (!A1L377 $ (!maxAngleCount[3]))) ) ) # ( !A1L373 & ( (maxAngleCount[2] & (!A1L377 $ (!maxAngleCount[3]))) ) );


--A1L563 is LessThan1~2 at LABCELL_X85_Y24_N48
A1L563 = ( A1L373 & ( (!A1L377 & !maxAngleCount[3]) ) ) # ( !A1L373 & ( (!A1L377 & ((!maxAngleCount[2]) # (!maxAngleCount[3]))) # (A1L377 & (!maxAngleCount[2] & !maxAngleCount[3])) ) );


--A1L564 is LessThan1~3 at LABCELL_X85_Y24_N30
A1L564 = ( A1L595 & ( A1L562 & ( (A1L594 & (!maxAngleCount[7] $ (!A1L393))) ) ) ) # ( !A1L595 & ( A1L562 & ( (A1L563 & (A1L594 & (!maxAngleCount[7] $ (!A1L393)))) ) ) ) # ( A1L595 & ( !A1L562 & ( (A1L563 & (A1L594 & (!maxAngleCount[7] $ (!A1L393)))) ) ) ) # ( !A1L595 & ( !A1L562 & ( (A1L563 & (A1L594 & (!maxAngleCount[7] $ (!A1L393)))) ) ) );


--A1L565 is LessThan1~4 at MLABCELL_X84_Y24_N0
A1L565 = ( !A1L393 & ( A1L389 & ( !maxAngleCount[7] ) ) ) # ( A1L393 & ( !A1L389 & ( (maxAngleCount[6] & !maxAngleCount[7]) ) ) ) # ( !A1L393 & ( !A1L389 & ( (!maxAngleCount[7]) # (maxAngleCount[6]) ) ) );


--A1L566 is LessThan1~5 at MLABCELL_X84_Y24_N30
A1L566 = ( !A1L565 & ( A1L561 & ( (!maxAngleCount[5] & (((A1L381) # (maxAngleCount[4])) # (A1L385))) # (maxAngleCount[5] & (A1L385 & ((A1L381) # (maxAngleCount[4])))) ) ) ) # ( !A1L565 & ( !A1L561 ) );


--maxAngleCount[14] is maxAngleCount[14] at FF_X87_Y24_N56
--register power-up is low

maxAngleCount[14] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[1][14],  ,  , VCC);


--maxAngleCount[13] is maxAngleCount[13] at FF_X88_Y23_N50
--register power-up is low

maxAngleCount[13] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[1][13],  ,  , VCC);


--maxAngleCount[12] is maxAngleCount[12] at FF_X87_Y24_N14
--register power-up is low

maxAngleCount[12] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[1][12],  ,  , VCC);


--A1L567 is LessThan1~6 at MLABCELL_X87_Y24_N15
A1L567 = ( A1L416 & ( A1L424 & ( (maxAngleCount[12] & (maxAngleCount[14] & (!maxAngleCount[13] $ (A1L420)))) ) ) ) # ( !A1L416 & ( A1L424 & ( (!maxAngleCount[12] & (maxAngleCount[14] & (!maxAngleCount[13] $ (A1L420)))) ) ) ) # ( A1L416 & ( !A1L424 & ( (maxAngleCount[12] & (!maxAngleCount[14] & (!maxAngleCount[13] $ (A1L420)))) ) ) ) # ( !A1L416 & ( !A1L424 & ( (!maxAngleCount[12] & (!maxAngleCount[14] & (!maxAngleCount[13] $ (A1L420)))) ) ) );


--maxAngleCount[11] is maxAngleCount[11] at FF_X87_Y24_N8
--register power-up is low

maxAngleCount[11] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[1][11],  ,  , VCC);


--maxAngleCount[9] is maxAngleCount[9] at FF_X87_Y21_N53
--register power-up is low

maxAngleCount[9] = DFFEAS(A1L688, GLOBAL(A1L495),  ,  , A1L672,  ,  ,  ,  );


--maxAngleCount[10] is maxAngleCount[10] at FF_X88_Y23_N59
--register power-up is low

maxAngleCount[10] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, A1L690,  ,  , VCC);


--maxAngleCount[8] is maxAngleCount[8] at FF_X87_Y24_N44
--register power-up is low

maxAngleCount[8] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[1][8],  ,  , VCC);


--A1L568 is LessThan1~7 at MLABCELL_X87_Y24_N57
A1L568 = ( A1L596 & ( A1L597 & ( (!maxAngleCount[14] & (!A1L424 & (!maxAngleCount[9] $ (!A1L401)))) # (maxAngleCount[14] & (A1L424 & (!maxAngleCount[9] $ (!A1L401)))) ) ) );


--A1L569 is LessThan1~8 at LABCELL_X88_Y23_N51
A1L569 = ( A1L416 & ( A1L424 & ( (maxAngleCount[13] & (!A1L420 & maxAngleCount[14])) ) ) ) # ( !A1L416 & ( A1L424 & ( (maxAngleCount[14] & ((!maxAngleCount[13] & (maxAngleCount[12] & !A1L420)) # (maxAngleCount[13] & ((!A1L420) # (maxAngleCount[12]))))) ) ) ) # ( A1L416 & ( !A1L424 & ( ((maxAngleCount[13] & !A1L420)) # (maxAngleCount[14]) ) ) ) # ( !A1L416 & ( !A1L424 & ( ((!maxAngleCount[13] & (maxAngleCount[12] & !A1L420)) # (maxAngleCount[13] & ((!A1L420) # (maxAngleCount[12])))) # (maxAngleCount[14]) ) ) );


--A1L570 is LessThan1~9 at MLABCELL_X87_Y24_N48
A1L570 = ( !A1L569 & ( A1L567 & ( (!maxAngleCount[11] & (((A1L412) # (A1L408)) # (maxAngleCount[10]))) # (maxAngleCount[11] & (A1L412 & ((A1L408) # (maxAngleCount[10])))) ) ) ) # ( !A1L569 & ( !A1L567 ) );


--A1L571 is LessThan1~10 at MLABCELL_X87_Y24_N36
A1L571 = ( maxAngleCount[9] & ( A1L567 & ( (!A1L397 & (!A1L401 & A1L598)) ) ) ) # ( !maxAngleCount[9] & ( A1L567 & ( (A1L598 & ((!A1L401) # ((maxAngleCount[8] & !A1L397)))) ) ) );


--maxAngleCount[21] is maxAngleCount[21] at FF_X84_Y23_N32
--register power-up is low

maxAngleCount[21] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[1][21],  ,  , VCC);


--maxAngleCount[20] is maxAngleCount[20] at FF_X84_Y23_N47
--register power-up is low

maxAngleCount[20] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[1][20],  ,  , VCC);


--maxAngleCount[19] is maxAngleCount[19] at FF_X84_Y23_N35
--register power-up is low

maxAngleCount[19] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[1][19],  ,  , VCC);


--A1L572 is LessThan1~11 at MLABCELL_X84_Y23_N6
A1L572 = ( A1L452 & ( A1L444 & ( (maxAngleCount[19] & (maxAngleCount[21] & (!maxAngleCount[20] $ (A1L448)))) ) ) ) # ( !A1L452 & ( A1L444 & ( (maxAngleCount[19] & (!maxAngleCount[21] & (!maxAngleCount[20] $ (A1L448)))) ) ) ) # ( A1L452 & ( !A1L444 & ( (!maxAngleCount[19] & (maxAngleCount[21] & (!maxAngleCount[20] $ (A1L448)))) ) ) ) # ( !A1L452 & ( !A1L444 & ( (!maxAngleCount[19] & (!maxAngleCount[21] & (!maxAngleCount[20] $ (A1L448)))) ) ) );


--maxAngleCount[18] is maxAngleCount[18] at FF_X84_Y23_N11
--register power-up is low

maxAngleCount[18] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[1][18],  ,  , VCC);


--A1L573 is LessThan1~12 at MLABCELL_X84_Y23_N33
A1L573 = !maxAngleCount[18] $ (!A1L440);


--maxAngleCount[16] is maxAngleCount[16] at FF_X84_Y22_N14
--register power-up is low

maxAngleCount[16] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, A1L698,  ,  , VCC);


--maxAngleCount[17] is maxAngleCount[17] at FF_X85_Y23_N38
--register power-up is low

maxAngleCount[17] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[1][17],  ,  , VCC);


--A1L574 is LessThan1~13 at LABCELL_X85_Y23_N30
A1L574 = ( A1L436 & ( !maxAngleCount[17] ) ) # ( !A1L436 & ( maxAngleCount[17] ) );


--maxAngleCount[15] is maxAngleCount[15] at FF_X84_Y23_N8
--register power-up is low

maxAngleCount[15] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, A1L696,  ,  , VCC);


--A1L575 is LessThan1~14 at MLABCELL_X84_Y23_N54
A1L575 = ( A1L428 & ( maxAngleCount[15] ) ) # ( !A1L428 & ( !maxAngleCount[15] ) );


--A1L576 is LessThan1~15 at LABCELL_X85_Y23_N6
A1L576 = ( !A1L573 & ( !A1L575 & ( (!A1L574 & (A1L572 & (!maxAngleCount[16] $ (!A1L432)))) ) ) );


--A1L577 is LessThan1~16 at MLABCELL_X84_Y24_N21
A1L577 = ( A1L571 & ( A1L566 & ( A1L576 ) ) ) # ( !A1L571 & ( A1L566 & ( (A1L576 & ((!A1L570) # ((A1L568 & A1L564)))) ) ) ) # ( A1L571 & ( !A1L566 & ( A1L576 ) ) ) # ( !A1L571 & ( !A1L566 & ( (A1L576 & ((!A1L570) # (A1L568))) ) ) );


--A1L578 is LessThan1~17 at MLABCELL_X84_Y23_N39
A1L578 = ( !A1L573 & ( (!A1L574 & A1L572) ) );


--A1L579 is LessThan1~18 at MLABCELL_X84_Y23_N48
A1L579 = ( A1L452 & ( A1L448 & ( (maxAngleCount[21] & (maxAngleCount[20] & (!A1L444 & maxAngleCount[19]))) ) ) ) # ( !A1L452 & ( A1L448 & ( ((maxAngleCount[20] & (!A1L444 & maxAngleCount[19]))) # (maxAngleCount[21]) ) ) ) # ( A1L452 & ( !A1L448 & ( (maxAngleCount[21] & (((!A1L444 & maxAngleCount[19])) # (maxAngleCount[20]))) ) ) ) # ( !A1L452 & ( !A1L448 & ( (((!A1L444 & maxAngleCount[19])) # (maxAngleCount[20])) # (maxAngleCount[21]) ) ) );


--A1L580 is LessThan1~19 at MLABCELL_X84_Y23_N0
A1L580 = ( A1L436 & ( A1L572 & ( (!A1L579 & ((!maxAngleCount[18]) # (A1L440))) ) ) ) # ( !A1L436 & ( A1L572 & ( (!A1L579 & ((!maxAngleCount[17] & ((!maxAngleCount[18]) # (A1L440))) # (maxAngleCount[17] & (!maxAngleCount[18] & A1L440)))) ) ) ) # ( A1L436 & ( !A1L572 & ( !A1L579 ) ) ) # ( !A1L436 & ( !A1L572 & ( !A1L579 ) ) );


--A1L581 is LessThan1~20 at MLABCELL_X84_Y23_N42
A1L581 = ( maxAngleCount[16] & ( A1L578 & ( (A1L580 & (((maxAngleCount[15]) # (A1L428)) # (A1L432))) ) ) ) # ( !maxAngleCount[16] & ( A1L578 & ( (A1L432 & (A1L580 & ((maxAngleCount[15]) # (A1L428)))) ) ) ) # ( maxAngleCount[16] & ( !A1L578 & ( A1L580 ) ) ) # ( !maxAngleCount[16] & ( !A1L578 & ( A1L580 ) ) );


--maxAngleCount[28] is maxAngleCount[28] at FF_X83_Y22_N47
--register power-up is low

maxAngleCount[28] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[1][28],  ,  , VCC);


--maxAngleCount[27] is maxAngleCount[27] at FF_X83_Y22_N53
--register power-up is low

maxAngleCount[27] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[1][27],  ,  , VCC);


--maxAngleCount[26] is maxAngleCount[26] at FF_X83_Y22_N11
--register power-up is low

maxAngleCount[26] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[1][26],  ,  , VCC);


--A1L582 is LessThan1~21 at LABCELL_X83_Y22_N33
A1L582 = ( A1L480 & ( A1L472 & ( (maxAngleCount[28] & (maxAngleCount[26] & (!maxAngleCount[27] $ (A1L476)))) ) ) ) # ( !A1L480 & ( A1L472 & ( (!maxAngleCount[28] & (maxAngleCount[26] & (!maxAngleCount[27] $ (A1L476)))) ) ) ) # ( A1L480 & ( !A1L472 & ( (maxAngleCount[28] & (!maxAngleCount[26] & (!maxAngleCount[27] $ (A1L476)))) ) ) ) # ( !A1L480 & ( !A1L472 & ( (!maxAngleCount[28] & (!maxAngleCount[26] & (!maxAngleCount[27] $ (A1L476)))) ) ) );


--maxAngleCount[25] is maxAngleCount[25] at FF_X83_Y22_N38
--register power-up is low

maxAngleCount[25] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[1][25],  ,  , VCC);


--A1L583 is LessThan1~22 at LABCELL_X83_Y22_N27
A1L583 = ( A1L468 & ( !maxAngleCount[25] ) ) # ( !A1L468 & ( maxAngleCount[25] ) );


--maxAngleCount[23] is maxAngleCount[23] at FF_X83_Y22_N17
--register power-up is low

maxAngleCount[23] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[1][23],  ,  , VCC);


--maxAngleCount[24] is maxAngleCount[24] at FF_X83_Y21_N35
--register power-up is low

maxAngleCount[24] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[1][24],  ,  , VCC);


--A1L584 is LessThan1~23 at LABCELL_X83_Y21_N3
A1L584 = ( A1L464 & ( !maxAngleCount[24] ) ) # ( !A1L464 & ( maxAngleCount[24] ) );


--maxAngleCount[22] is maxAngleCount[22] at FF_X83_Y21_N29
--register power-up is low

maxAngleCount[22] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[1][22],  ,  , VCC);


--A1L585 is LessThan1~24 at LABCELL_X83_Y21_N0
A1L585 = ( A1L456 & ( !maxAngleCount[22] ) ) # ( !A1L456 & ( maxAngleCount[22] ) );


--A1L586 is LessThan1~25 at LABCELL_X83_Y21_N42
A1L586 = ( !A1L583 & ( A1L582 & ( (!A1L584 & (!A1L585 & (!A1L460 $ (maxAngleCount[23])))) ) ) );


--A1L587 is LessThan1~26 at MLABCELL_X82_Y22_N24
A1L587 = ( !A1L583 & ( A1L582 & ( !A1L584 ) ) );


--A1L588 is LessThan1~27 at LABCELL_X83_Y22_N39
A1L588 = ( A1L480 & ( A1L472 & ( (maxAngleCount[27] & (maxAngleCount[28] & !A1L476)) ) ) ) # ( !A1L480 & ( A1L472 & ( ((maxAngleCount[27] & !A1L476)) # (maxAngleCount[28]) ) ) ) # ( A1L480 & ( !A1L472 & ( (maxAngleCount[28] & ((!maxAngleCount[27] & (maxAngleCount[26] & !A1L476)) # (maxAngleCount[27] & ((!A1L476) # (maxAngleCount[26]))))) ) ) ) # ( !A1L480 & ( !A1L472 & ( ((!maxAngleCount[27] & (maxAngleCount[26] & !A1L476)) # (maxAngleCount[27] & ((!A1L476) # (maxAngleCount[26])))) # (maxAngleCount[28]) ) ) );


--A1L589 is LessThan1~28 at MLABCELL_X82_Y22_N36
A1L589 = ( A1L468 & ( !A1L588 & ( (!maxAngleCount[24]) # ((!maxAngleCount[25]) # ((!A1L582) # (A1L464))) ) ) ) # ( !A1L468 & ( !A1L588 & ( (!A1L582) # ((!maxAngleCount[25] & ((!maxAngleCount[24]) # (A1L464)))) ) ) );


--A1L590 is LessThan1~29 at MLABCELL_X82_Y22_N0
A1L590 = ( A1L589 & ( A1L587 & ( (!maxAngleCount[23] & ((!maxAngleCount[22]) # ((A1L460) # (A1L456)))) # (maxAngleCount[23] & (A1L460 & ((!maxAngleCount[22]) # (A1L456)))) ) ) ) # ( A1L589 & ( !A1L587 ) );


--maxAngleCount[30] is maxAngleCount[30] at FF_X85_Y22_N41
--register power-up is low

maxAngleCount[30] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[1][30],  ,  , VCC);


--maxAngleCount[29] is maxAngleCount[29] at FF_X85_Y22_N26
--register power-up is low

maxAngleCount[29] = DFFEAS( , GLOBAL(A1L495),  ,  , A1L672, reg[1][29],  ,  , VCC);


--A1L591 is LessThan1~30 at LABCELL_X85_Y22_N24
A1L591 = ( A1L484 & ( (maxAngleCount[29] & (!maxAngleCount[30] $ (A1L488))) ) ) # ( !A1L484 & ( (!maxAngleCount[29] & (!maxAngleCount[30] $ (A1L488))) ) );


--A1L592 is LessThan1~31 at LABCELL_X85_Y22_N39
A1L592 = ( A1L484 & ( (!angleCount[31] & ((!maxAngleCount[30]) # (A1L488))) ) ) # ( !A1L484 & ( (!angleCount[31] & ((!A1L488 & (!maxAngleCount[29] & !maxAngleCount[30])) # (A1L488 & ((!maxAngleCount[29]) # (!maxAngleCount[30]))))) ) );


--A1L593 is LessThan1~32 at LABCELL_X83_Y24_N42
A1L593 = ( A1L581 & ( A1L577 & ( (A1L592 & ((!A1L591) # ((!A1L586 & A1L590)))) ) ) ) # ( !A1L581 & ( A1L577 & ( (A1L592 & ((!A1L591) # ((!A1L586 & A1L590)))) ) ) ) # ( A1L581 & ( !A1L577 & ( (A1L592 & ((!A1L591) # (A1L590))) ) ) ) # ( !A1L581 & ( !A1L577 & ( (A1L592 & ((!A1L591) # ((!A1L586 & A1L590)))) ) ) );


--A1L849 is Selector1~0 at LABCELL_X83_Y24_N0
A1L849 = ( next_state.INT_RIGHT & ( current_state.SW_RIGHT ) ) # ( !next_state.INT_RIGHT & ( current_state.SW_RIGHT & ( (angleCount[31]) # (A1L626) ) ) ) # ( next_state.INT_RIGHT & ( !current_state.SW_RIGHT & ( (!A1L593 & !current_state.SW_LEFT) ) ) );


--A1L851 is Selector3~0 at LABCELL_X83_Y24_N18
A1L851 = ( next_state.INT_LEFT & ( current_state.SW_RIGHT & ( (!current_state.SW_LEFT) # ((!A1L626 & !angleCount[31])) ) ) ) # ( !next_state.INT_LEFT & ( current_state.SW_RIGHT & ( (A1L593 & !current_state.SW_LEFT) ) ) ) # ( next_state.INT_LEFT & ( !current_state.SW_RIGHT & ( !current_state.SW_LEFT ) ) ) # ( !next_state.INT_LEFT & ( !current_state.SW_RIGHT & ( (A1L593 & !current_state.SW_LEFT) ) ) );


--A1L403 is angleCount[9]~155 at LABCELL_X81_Y22_N12
A1L403 = ( current_state.SW_RIGHT & ( !A1L542Q ) ) # ( !current_state.SW_RIGHT & ( A1L542Q ) );


--A1L404 is angleCount[9]~156 at LABCELL_X81_Y22_N18
A1L404 = ( !current_state.INT_RIGHT & ( current_state.SW_RIGHT ) ) # ( current_state.INT_RIGHT & ( !current_state.SW_RIGHT ) );


--A1L858 is Selector11~0 at MLABCELL_X84_Y22_N48
A1L858 = ( A1L134 & ( A1L250 & ( (!A1L404 & (((!A1L403) # (maxAngleCount[25])))) # (A1L404 & (((A1L403)) # (minAngleCount[25]))) ) ) ) # ( !A1L134 & ( A1L250 & ( (!A1L404 & (((A1L403 & maxAngleCount[25])))) # (A1L404 & (((A1L403)) # (minAngleCount[25]))) ) ) ) # ( A1L134 & ( !A1L250 & ( (!A1L404 & (((!A1L403) # (maxAngleCount[25])))) # (A1L404 & (minAngleCount[25] & (!A1L403))) ) ) ) # ( !A1L134 & ( !A1L250 & ( (!A1L404 & (((A1L403 & maxAngleCount[25])))) # (A1L404 & (minAngleCount[25] & (!A1L403))) ) ) );


--A1L469 is angleCount[25]~23 at MLABCELL_X84_Y22_N39
A1L469 = ( A1L858 & ( !A1L467 ) ) # ( !A1L858 & ( A1L467 ) );


--A1L405 is angleCount[9]~157 at MLABCELL_X84_Y20_N39
A1L405 = ( current_state.SW_RIGHT & ( A1L555 & ( (!A1L540Q & !A1L559) ) ) ) # ( !current_state.SW_RIGHT & ( A1L555 & ( ((!A1L540Q & !A1L559)) # (current_state.SW_LEFT) ) ) ) # ( current_state.SW_RIGHT & ( !A1L555 & ( (!A1L540Q & ((!A1L559) # (A1L556))) ) ) ) # ( !current_state.SW_RIGHT & ( !A1L555 & ( ((!A1L540Q & ((!A1L559) # (A1L556)))) # (current_state.SW_LEFT) ) ) );


--reg[0][25] is reg[0][25] at FF_X85_Y21_N10
--register power-up is low

reg[0][25] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L784, A1L934,  ,  , VCC);


--A1L672 is maxAngleCount[0]~0 at MLABCELL_X87_Y21_N42
A1L672 = ( !A1L947 & ( A1L846 ) );


--A1L855 is Selector8~0 at LABCELL_X83_Y22_N42
A1L855 = ( maxAngleCount[28] & ( A1L254 & ( ((!A1L404 & (A1L138)) # (A1L404 & ((minAngleCount[28])))) # (A1L403) ) ) ) # ( !maxAngleCount[28] & ( A1L254 & ( (!A1L404 & (!A1L403 & (A1L138))) # (A1L404 & (((minAngleCount[28])) # (A1L403))) ) ) ) # ( maxAngleCount[28] & ( !A1L254 & ( (!A1L404 & (((A1L138)) # (A1L403))) # (A1L404 & (!A1L403 & ((minAngleCount[28])))) ) ) ) # ( !maxAngleCount[28] & ( !A1L254 & ( (!A1L403 & ((!A1L404 & (A1L138)) # (A1L404 & ((minAngleCount[28]))))) ) ) );


--A1L481 is angleCount[28]~11 at LABCELL_X83_Y22_N0
A1L481 = ( A1L855 & ( !A1L479 ) ) # ( !A1L855 & ( A1L479 ) );


--reg[0][28] is reg[0][28] at FF_X82_Y22_N58
--register power-up is low

reg[0][28] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L784, A1L940,  ,  , VCC);


--A1L856 is Selector9~0 at LABCELL_X83_Y22_N6
A1L856 = ( A1L404 & ( A1L258 & ( (A1L403) # (minAngleCount[27]) ) ) ) # ( !A1L404 & ( A1L258 & ( (!A1L403 & ((A1L142))) # (A1L403 & (maxAngleCount[27])) ) ) ) # ( A1L404 & ( !A1L258 & ( (minAngleCount[27] & !A1L403) ) ) ) # ( !A1L404 & ( !A1L258 & ( (!A1L403 & ((A1L142))) # (A1L403 & (maxAngleCount[27])) ) ) );


--A1L477 is angleCount[27]~15 at LABCELL_X83_Y22_N57
A1L477 = ( A1L856 & ( !A1L475 ) ) # ( !A1L856 & ( A1L475 ) );


--reg[0][27] is reg[0][27] at FF_X84_Y20_N10
--register power-up is low

reg[0][27] = DFFEAS(A1L800, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L784,  ,  ,  ,  );


--A1L857 is Selector10~0 at MLABCELL_X82_Y22_N42
A1L857 = ( A1L146 & ( A1L262 & ( (!A1L404 & (((!A1L403)) # (maxAngleCount[26]))) # (A1L404 & (((A1L403) # (minAngleCount[26])))) ) ) ) # ( !A1L146 & ( A1L262 & ( (!A1L404 & (maxAngleCount[26] & ((A1L403)))) # (A1L404 & (((A1L403) # (minAngleCount[26])))) ) ) ) # ( A1L146 & ( !A1L262 & ( (!A1L404 & (((!A1L403)) # (maxAngleCount[26]))) # (A1L404 & (((minAngleCount[26] & !A1L403)))) ) ) ) # ( !A1L146 & ( !A1L262 & ( (!A1L404 & (maxAngleCount[26] & ((A1L403)))) # (A1L404 & (((minAngleCount[26] & !A1L403)))) ) ) );


--A1L473 is angleCount[26]~19 at MLABCELL_X82_Y22_N9
A1L473 = ( A1L857 & ( !A1L471 ) ) # ( !A1L857 & ( A1L471 ) );


--reg[0][26] is reg[0][26] at FF_X80_Y22_N25
--register power-up is low

reg[0][26] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L784, A1L936,  ,  , VCC);


--A1L860 is Selector13~0 at LABCELL_X83_Y21_N30
A1L860 = ( A1L266 & ( A1L150 & ( (!A1L403 & (((!A1L404) # (minAngleCount[23])))) # (A1L403 & (((A1L404)) # (maxAngleCount[23]))) ) ) ) # ( !A1L266 & ( A1L150 & ( (!A1L403 & (((!A1L404) # (minAngleCount[23])))) # (A1L403 & (maxAngleCount[23] & ((!A1L404)))) ) ) ) # ( A1L266 & ( !A1L150 & ( (!A1L403 & (((minAngleCount[23] & A1L404)))) # (A1L403 & (((A1L404)) # (maxAngleCount[23]))) ) ) ) # ( !A1L266 & ( !A1L150 & ( (!A1L403 & (((minAngleCount[23] & A1L404)))) # (A1L403 & (maxAngleCount[23] & ((!A1L404)))) ) ) );


--A1L461 is angleCount[23]~31 at LABCELL_X83_Y21_N36
A1L461 = ( A1L860 & ( !A1L459 ) ) # ( !A1L860 & ( A1L459 ) );


--reg[0][23] is reg[0][23] at FF_X78_Y21_N25
--register power-up is low

reg[0][23] = DFFEAS(A1L795, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L784,  ,  ,  ,  );


--A1L859 is Selector12~0 at LABCELL_X83_Y21_N24
A1L859 = ( A1L270 & ( A1L154 & ( (!A1L404 & (((!A1L403)) # (maxAngleCount[24]))) # (A1L404 & (((A1L403) # (minAngleCount[24])))) ) ) ) # ( !A1L270 & ( A1L154 & ( (!A1L404 & (((!A1L403)) # (maxAngleCount[24]))) # (A1L404 & (((minAngleCount[24] & !A1L403)))) ) ) ) # ( A1L270 & ( !A1L154 & ( (!A1L404 & (maxAngleCount[24] & ((A1L403)))) # (A1L404 & (((A1L403) # (minAngleCount[24])))) ) ) ) # ( !A1L270 & ( !A1L154 & ( (!A1L404 & (maxAngleCount[24] & ((A1L403)))) # (A1L404 & (((minAngleCount[24] & !A1L403)))) ) ) );


--A1L465 is angleCount[24]~27 at LABCELL_X83_Y21_N6
A1L465 = ( A1L859 & ( !A1L463 ) ) # ( !A1L859 & ( A1L463 ) );


--reg[0][24] is reg[0][24] at FF_X84_Y21_N43
--register power-up is low

reg[0][24] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L784, A1L932,  ,  , VCC);


--A1L861 is Selector14~0 at LABCELL_X83_Y21_N12
A1L861 = ( A1L158 & ( A1L274 & ( (!A1L403 & (((!A1L404)) # (minAngleCount[22]))) # (A1L403 & (((A1L404) # (maxAngleCount[22])))) ) ) ) # ( !A1L158 & ( A1L274 & ( (!A1L403 & (minAngleCount[22] & ((A1L404)))) # (A1L403 & (((A1L404) # (maxAngleCount[22])))) ) ) ) # ( A1L158 & ( !A1L274 & ( (!A1L403 & (((!A1L404)) # (minAngleCount[22]))) # (A1L403 & (((maxAngleCount[22] & !A1L404)))) ) ) ) # ( !A1L158 & ( !A1L274 & ( (!A1L403 & (minAngleCount[22] & ((A1L404)))) # (A1L403 & (((maxAngleCount[22] & !A1L404)))) ) ) );


--A1L457 is angleCount[22]~35 at LABCELL_X83_Y21_N54
A1L457 = ( A1L861 & ( !A1L455 ) ) # ( !A1L861 & ( A1L455 ) );


--reg[0][22] is reg[0][22] at FF_X78_Y21_N10
--register power-up is low

reg[0][22] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L784, A1L928,  ,  , VCC);


--A1L872 is Selector25~0 at MLABCELL_X84_Y22_N30
A1L872 = ( maxAngleCount[11] & ( minAngleCount[11] & ( (!A1L403 & (((A1L404)) # (A1L162))) # (A1L403 & (((!A1L404) # (A1L278)))) ) ) ) # ( !maxAngleCount[11] & ( minAngleCount[11] & ( (!A1L403 & (((A1L404)) # (A1L162))) # (A1L403 & (((A1L404 & A1L278)))) ) ) ) # ( maxAngleCount[11] & ( !minAngleCount[11] & ( (!A1L403 & (A1L162 & (!A1L404))) # (A1L403 & (((!A1L404) # (A1L278)))) ) ) ) # ( !maxAngleCount[11] & ( !minAngleCount[11] & ( (!A1L403 & (A1L162 & (!A1L404))) # (A1L403 & (((A1L404 & A1L278)))) ) ) );


--A1L413 is angleCount[11]~79 at MLABCELL_X84_Y22_N36
A1L413 = ( A1L411 & ( !A1L872 ) ) # ( !A1L411 & ( A1L872 ) );


--reg[0][11] is reg[0][11] at FF_X87_Y23_N2
--register power-up is low

reg[0][11] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L784, A1L906,  ,  , VCC);


--A1L869 is Selector22~0 at LABCELL_X88_Y23_N54
A1L869 = ( minAngleCount[14] & ( A1L166 & ( (!A1L403 & (((!A1L404)))) # (A1L403 & ((!A1L404 & ((maxAngleCount[14]))) # (A1L404 & (A1L282)))) ) ) ) # ( !minAngleCount[14] & ( A1L166 & ( (!A1L403) # ((!A1L404 & ((maxAngleCount[14]))) # (A1L404 & (A1L282))) ) ) ) # ( minAngleCount[14] & ( !A1L166 & ( (A1L403 & ((!A1L404 & ((maxAngleCount[14]))) # (A1L404 & (A1L282)))) ) ) ) # ( !minAngleCount[14] & ( !A1L166 & ( (!A1L403 & (((A1L404)))) # (A1L403 & ((!A1L404 & ((maxAngleCount[14]))) # (A1L404 & (A1L282)))) ) ) );


--A1L425 is angleCount[14]~67 at LABCELL_X88_Y23_N27
A1L425 = ( A1L423 & ( !A1L869 ) ) # ( !A1L423 & ( A1L869 ) );


--reg[0][14] is reg[0][14] at FF_X83_Y23_N32
--register power-up is low

reg[0][14] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L784, A1L912,  ,  , VCC);


--A1L870 is Selector23~0 at LABCELL_X88_Y23_N6
A1L870 = ( A1L404 & ( A1L403 & ( A1L286 ) ) ) # ( !A1L404 & ( A1L403 & ( maxAngleCount[13] ) ) ) # ( A1L404 & ( !A1L403 & ( minAngleCount[13] ) ) ) # ( !A1L404 & ( !A1L403 & ( A1L170 ) ) );


--A1L421 is angleCount[13]~71 at LABCELL_X88_Y23_N45
A1L421 = !A1L870 $ (!A1L419);


--reg[0][13] is reg[0][13] at FF_X87_Y23_N22
--register power-up is low

reg[0][13] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L784, A1L910,  ,  , VCC);


--A1L871 is Selector24~0 at LABCELL_X83_Y23_N24
A1L871 = ( A1L290 & ( A1L404 & ( (A1L403) # (minAngleCount[12]) ) ) ) # ( !A1L290 & ( A1L404 & ( (minAngleCount[12] & !A1L403) ) ) ) # ( A1L290 & ( !A1L404 & ( (!A1L403 & (A1L174)) # (A1L403 & ((maxAngleCount[12]))) ) ) ) # ( !A1L290 & ( !A1L404 & ( (!A1L403 & (A1L174)) # (A1L403 & ((maxAngleCount[12]))) ) ) );


--A1L417 is angleCount[12]~75 at MLABCELL_X84_Y23_N24
A1L417 = !A1L871 $ (!A1L415);


--reg[0][12] is reg[0][12] at FF_X87_Y23_N4
--register power-up is low

reg[0][12] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L784, A1L908,  ,  , VCC);


--A1L873 is Selector26~0 at LABCELL_X88_Y24_N54
A1L873 = ( A1L403 & ( maxAngleCount[10] & ( (A1L294 & A1L404) ) ) ) # ( !A1L403 & ( maxAngleCount[10] & ( (!A1L404 & (A1L178)) # (A1L404 & ((minAngleCount[10]))) ) ) ) # ( A1L403 & ( !maxAngleCount[10] & ( (!A1L404) # (A1L294) ) ) ) # ( !A1L403 & ( !maxAngleCount[10] & ( (!A1L404 & (A1L178)) # (A1L404 & ((minAngleCount[10]))) ) ) );


--A1L409 is angleCount[10]~83 at LABCELL_X88_Y24_N6
A1L409 = !A1L407 $ (!A1L873);


--reg[0][10] is reg[0][10] at FF_X87_Y21_N55
--register power-up is low

reg[0][10] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L784, A1L904,  ,  , VCC);


--A1L874 is Selector27~0 at LABCELL_X85_Y23_N12
A1L874 = ( maxAngleCount[9] & ( A1L182 & ( (!A1L403 & (((!minAngleCount[9]) # (!A1L404)))) # (A1L403 & (A1L298 & ((A1L404)))) ) ) ) # ( !maxAngleCount[9] & ( A1L182 & ( (!A1L404) # ((!A1L403 & ((!minAngleCount[9]))) # (A1L403 & (A1L298))) ) ) ) # ( maxAngleCount[9] & ( !A1L182 & ( (A1L404 & ((!A1L403 & ((!minAngleCount[9]))) # (A1L403 & (A1L298)))) ) ) ) # ( !maxAngleCount[9] & ( !A1L182 & ( (!A1L403 & (((!minAngleCount[9] & A1L404)))) # (A1L403 & (((!A1L404)) # (A1L298))) ) ) );


--A1L402 is angleCount[9]~87 at LABCELL_X85_Y23_N0
A1L402 = !A1L400 $ (!A1L874);


--reg[0][9] is reg[0][9] at FF_X87_Y21_N26
--register power-up is low

reg[0][9] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L784, A1L902,  ,  , VCC);


--A1L875 is Selector28~0 at LABCELL_X88_Y24_N42
A1L875 = ( A1L404 & ( minAngleCount[8] & ( (A1L302 & A1L403) ) ) ) # ( !A1L404 & ( minAngleCount[8] & ( (!A1L403 & (A1L186)) # (A1L403 & ((maxAngleCount[8]))) ) ) ) # ( A1L404 & ( !minAngleCount[8] & ( (!A1L403) # (A1L302) ) ) ) # ( !A1L404 & ( !minAngleCount[8] & ( (!A1L403 & (A1L186)) # (A1L403 & ((maxAngleCount[8]))) ) ) );


--A1L398 is angleCount[8]~91 at LABCELL_X88_Y24_N3
A1L398 = ( A1L396 & ( !A1L875 ) ) # ( !A1L396 & ( A1L875 ) );


--reg[0][8] is reg[0][8] at FF_X88_Y22_N50
--register power-up is low

reg[0][8] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L784, A1L900,  ,  , VCC);


--A1L880 is Selector33~0 at MLABCELL_X84_Y24_N24
A1L880 = ( maxAngleCount[3] & ( A1L306 & ( (!A1L403 & ((!A1L404 & (A1L190)) # (A1L404 & ((!minAngleCount[3]))))) # (A1L403 & (((A1L404)))) ) ) ) # ( !maxAngleCount[3] & ( A1L306 & ( ((!A1L404 & (A1L190)) # (A1L404 & ((!minAngleCount[3])))) # (A1L403) ) ) ) # ( maxAngleCount[3] & ( !A1L306 & ( (!A1L403 & ((!A1L404 & (A1L190)) # (A1L404 & ((!minAngleCount[3]))))) ) ) ) # ( !maxAngleCount[3] & ( !A1L306 & ( (!A1L403 & ((!A1L404 & (A1L190)) # (A1L404 & ((!minAngleCount[3]))))) # (A1L403 & (((!A1L404)))) ) ) );


--A1L378 is angleCount[3]~111 at LABCELL_X85_Y24_N42
A1L378 = ( A1L376 & ( !A1L880 ) ) # ( !A1L376 & ( A1L880 ) );


--reg[0][3] is reg[0][3] at FF_X88_Y22_N11
--register power-up is low

reg[0][3] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L784, A1L890,  ,  , VCC);


--A1L374 is angleCount[2]~115 at LABCELL_X85_Y24_N3
A1L374 = ( minAngleCount[2] & ( !A1L372 $ (((current_state.INT_RIGHT) # (maxAngleCount[2]))) ) ) # ( !minAngleCount[2] & ( !A1L372 $ (((maxAngleCount[2] & !current_state.INT_RIGHT))) ) );


--reg[0][2] is reg[0][2] at FF_X81_Y24_N32
--register power-up is low

reg[0][2] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L784, A1L888,  ,  , VCC);


--A1L370 is angleCount[1]~119 at MLABCELL_X87_Y24_N0
A1L370 = !A1L368 $ (((!current_state.INT_RIGHT & (maxAngleCount[1])) # (current_state.INT_RIGHT & ((minAngleCount[1])))));


--reg[0][1] is reg[0][1] at FF_X84_Y20_N50
--register power-up is low

reg[0][1] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L784, A1L886,  ,  , VCC);


--A1L366 is angleCount[0]~123 at MLABCELL_X87_Y24_N27
A1L366 = ( minAngleCount[0] & ( !A1L364 $ (((current_state.INT_RIGHT) # (maxAngleCount[0]))) ) ) # ( !minAngleCount[0] & ( !A1L364 $ (((maxAngleCount[0] & !current_state.INT_RIGHT))) ) );


--reg[0][0] is reg[0][0] at FF_X85_Y21_N28
--register power-up is low

reg[0][0] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L784, A1L884,  ,  , VCC);


--A1L878 is Selector31~0 at LABCELL_X81_Y24_N24
A1L878 = ( A1L403 & ( A1L194 & ( (!A1L404 & ((maxAngleCount[5]))) # (A1L404 & (A1L310)) ) ) ) # ( !A1L403 & ( A1L194 & ( (!A1L404) # (minAngleCount[5]) ) ) ) # ( A1L403 & ( !A1L194 & ( (!A1L404 & ((maxAngleCount[5]))) # (A1L404 & (A1L310)) ) ) ) # ( !A1L403 & ( !A1L194 & ( (minAngleCount[5] & A1L404) ) ) );


--A1L386 is angleCount[5]~103 at MLABCELL_X82_Y24_N9
A1L386 = ( A1L384 & ( !A1L878 ) ) # ( !A1L384 & ( A1L878 ) );


--reg[0][5] is reg[0][5] at FF_X82_Y24_N16
--register power-up is low

reg[0][5] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L784, A1L894,  ,  , VCC);


--A1L876 is Selector29~0 at MLABCELL_X84_Y24_N42
A1L876 = ( A1L404 & ( A1L198 & ( (!A1L403 & ((minAngleCount[7]))) # (A1L403 & (A1L314)) ) ) ) # ( !A1L404 & ( A1L198 & ( (!maxAngleCount[7]) # (!A1L403) ) ) ) # ( A1L404 & ( !A1L198 & ( (!A1L403 & ((minAngleCount[7]))) # (A1L403 & (A1L314)) ) ) ) # ( !A1L404 & ( !A1L198 & ( (!maxAngleCount[7] & A1L403) ) ) );


--A1L394 is angleCount[7]~95 at LABCELL_X88_Y24_N48
A1L394 = ( A1L392 & ( !A1L876 ) ) # ( !A1L392 & ( A1L876 ) );


--reg[0][7] is reg[0][7] at FF_X82_Y24_N25
--register power-up is low

reg[0][7] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L784, A1L898,  ,  , VCC);


--A1L877 is Selector30~0 at LABCELL_X85_Y22_N48
A1L877 = ( A1L403 & ( minAngleCount[6] & ( (!A1L404 & ((maxAngleCount[6]))) # (A1L404 & (A1L318)) ) ) ) # ( !A1L403 & ( minAngleCount[6] & ( (A1L202 & !A1L404) ) ) ) # ( A1L403 & ( !minAngleCount[6] & ( (!A1L404 & ((maxAngleCount[6]))) # (A1L404 & (A1L318)) ) ) ) # ( !A1L403 & ( !minAngleCount[6] & ( (A1L404) # (A1L202) ) ) );


--A1L390 is angleCount[6]~99 at MLABCELL_X84_Y22_N57
A1L390 = !A1L388 $ (!A1L877);


--reg[0][6] is reg[0][6] at FF_X88_Y22_N26
--register power-up is low

reg[0][6] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L784, A1L896,  ,  , VCC);


--A1L879 is Selector32~0 at MLABCELL_X84_Y22_N3
A1L879 = ( A1L404 & ( A1L322 & ( (A1L403) # (minAngleCount[4]) ) ) ) # ( !A1L404 & ( A1L322 & ( (!A1L403 & (A1L206)) # (A1L403 & ((!maxAngleCount[4]))) ) ) ) # ( A1L404 & ( !A1L322 & ( (minAngleCount[4] & !A1L403) ) ) ) # ( !A1L404 & ( !A1L322 & ( (!A1L403 & (A1L206)) # (A1L403 & ((!maxAngleCount[4]))) ) ) );


--A1L382 is angleCount[4]~107 at LABCELL_X85_Y22_N12
A1L382 = !A1L879 $ (!A1L380);


--reg[0][4] is reg[0][4] at FF_X87_Y23_N43
--register power-up is low

reg[0][4] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L784, A1L892,  ,  , VCC);


--A1L862 is Selector15~0 at MLABCELL_X84_Y22_N15
A1L862 = ( maxAngleCount[21] & ( A1L326 & ( ((!A1L404 & (A1L210)) # (A1L404 & ((minAngleCount[21])))) # (A1L403) ) ) ) # ( !maxAngleCount[21] & ( A1L326 & ( (!A1L403 & ((!A1L404 & (A1L210)) # (A1L404 & ((minAngleCount[21]))))) # (A1L403 & (((A1L404)))) ) ) ) # ( maxAngleCount[21] & ( !A1L326 & ( (!A1L403 & ((!A1L404 & (A1L210)) # (A1L404 & ((minAngleCount[21]))))) # (A1L403 & (((!A1L404)))) ) ) ) # ( !maxAngleCount[21] & ( !A1L326 & ( (!A1L403 & ((!A1L404 & (A1L210)) # (A1L404 & ((minAngleCount[21]))))) ) ) );


--A1L453 is angleCount[21]~39 at MLABCELL_X84_Y22_N6
A1L453 = ( A1L862 & ( !A1L451 ) ) # ( !A1L862 & ( A1L451 ) );


--reg[0][21] is reg[0][21] at FF_X88_Y22_N22
--register power-up is low

reg[0][21] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L784, A1L926,  ,  , VCC);


--A1L863 is Selector16~0 at LABCELL_X83_Y23_N42
A1L863 = ( A1L403 & ( A1L214 & ( (!A1L404 & ((maxAngleCount[20]))) # (A1L404 & (A1L330)) ) ) ) # ( !A1L403 & ( A1L214 & ( (!A1L404) # (minAngleCount[20]) ) ) ) # ( A1L403 & ( !A1L214 & ( (!A1L404 & ((maxAngleCount[20]))) # (A1L404 & (A1L330)) ) ) ) # ( !A1L403 & ( !A1L214 & ( (A1L404 & minAngleCount[20]) ) ) );


--A1L449 is angleCount[20]~43 at MLABCELL_X84_Y23_N36
A1L449 = ( A1L863 & ( !A1L447 ) ) # ( !A1L863 & ( A1L447 ) );


--reg[0][20] is reg[0][20] at FF_X88_Y22_N28
--register power-up is low

reg[0][20] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L784, A1L924,  ,  , VCC);


--A1L864 is Selector17~0 at LABCELL_X83_Y23_N54
A1L864 = ( A1L404 & ( A1L218 & ( (!A1L403 & ((minAngleCount[19]))) # (A1L403 & (A1L334)) ) ) ) # ( !A1L404 & ( A1L218 & ( (!A1L403) # (maxAngleCount[19]) ) ) ) # ( A1L404 & ( !A1L218 & ( (!A1L403 & ((minAngleCount[19]))) # (A1L403 & (A1L334)) ) ) ) # ( !A1L404 & ( !A1L218 & ( (A1L403 & maxAngleCount[19]) ) ) );


--A1L445 is angleCount[19]~47 at LABCELL_X83_Y23_N18
A1L445 = !A1L864 $ (!A1L443);


--reg[0][19] is reg[0][19] at FF_X83_Y23_N58
--register power-up is low

reg[0][19] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L784, A1L922,  ,  , VCC);


--A1L865 is Selector18~0 at LABCELL_X81_Y23_N48
A1L865 = ( A1L403 & ( A1L222 & ( (!A1L404 & ((maxAngleCount[18]))) # (A1L404 & (A1L338)) ) ) ) # ( !A1L403 & ( A1L222 & ( (!A1L404) # (minAngleCount[18]) ) ) ) # ( A1L403 & ( !A1L222 & ( (!A1L404 & ((maxAngleCount[18]))) # (A1L404 & (A1L338)) ) ) ) # ( !A1L403 & ( !A1L222 & ( (minAngleCount[18] & A1L404) ) ) );


--A1L441 is angleCount[18]~51 at LABCELL_X81_Y23_N54
A1L441 = ( !A1L439 & ( A1L865 ) ) # ( A1L439 & ( !A1L865 ) );


--reg[0][18] is reg[0][18] at FF_X87_Y21_N31
--register power-up is low

reg[0][18] = DFFEAS(A1L789, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L784,  ,  ,  ,  );


--A1L867 is Selector20~0 at LABCELL_X85_Y22_N18
A1L867 = ( A1L403 & ( A1L342 & ( (!maxAngleCount[16]) # (A1L404) ) ) ) # ( !A1L403 & ( A1L342 & ( (!A1L404 & (A1L226)) # (A1L404 & ((minAngleCount[16]))) ) ) ) # ( A1L403 & ( !A1L342 & ( (!A1L404 & !maxAngleCount[16]) ) ) ) # ( !A1L403 & ( !A1L342 & ( (!A1L404 & (A1L226)) # (A1L404 & ((minAngleCount[16]))) ) ) );


--A1L433 is angleCount[16]~59 at LABCELL_X85_Y22_N15
A1L433 = ( A1L867 & ( !A1L431 ) ) # ( !A1L867 & ( A1L431 ) );


--reg[0][16] is reg[0][16] at FF_X88_Y22_N19
--register power-up is low

reg[0][16] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L784, A1L916,  ,  , VCC);


--A1L866 is Selector19~0 at LABCELL_X85_Y23_N18
A1L866 = ( maxAngleCount[17] & ( A1L230 & ( (!A1L404) # ((!A1L403 & (minAngleCount[17])) # (A1L403 & ((A1L346)))) ) ) ) # ( !maxAngleCount[17] & ( A1L230 & ( (!A1L403 & (((!A1L404)) # (minAngleCount[17]))) # (A1L403 & (((A1L346 & A1L404)))) ) ) ) # ( maxAngleCount[17] & ( !A1L230 & ( (!A1L403 & (minAngleCount[17] & ((A1L404)))) # (A1L403 & (((!A1L404) # (A1L346)))) ) ) ) # ( !maxAngleCount[17] & ( !A1L230 & ( (A1L404 & ((!A1L403 & (minAngleCount[17])) # (A1L403 & ((A1L346))))) ) ) );


--A1L437 is angleCount[17]~55 at LABCELL_X85_Y23_N33
A1L437 = ( A1L866 & ( !A1L435 ) ) # ( !A1L866 & ( A1L435 ) );


--reg[0][17] is reg[0][17] at FF_X84_Y20_N22
--register power-up is low

reg[0][17] = DFFEAS(A1L787, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L784,  ,  ,  ,  );


--A1L868 is Selector21~0 at LABCELL_X83_Y23_N6
A1L868 = ( maxAngleCount[15] & ( A1L404 & ( (!A1L403 & ((!minAngleCount[15]))) # (A1L403 & (A1L350)) ) ) ) # ( !maxAngleCount[15] & ( A1L404 & ( (!A1L403 & ((!minAngleCount[15]))) # (A1L403 & (A1L350)) ) ) ) # ( maxAngleCount[15] & ( !A1L404 & ( (!A1L403 & A1L234) ) ) ) # ( !maxAngleCount[15] & ( !A1L404 & ( (A1L234) # (A1L403) ) ) );


--A1L429 is angleCount[15]~63 at LABCELL_X83_Y23_N15
A1L429 = ( A1L868 & ( !A1L427 ) ) # ( !A1L868 & ( A1L427 ) );


--reg[0][15] is reg[0][15] at FF_X78_Y23_N38
--register power-up is low

reg[0][15] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L784, A1L914,  ,  , VCC);


--A1L853 is Selector6~0 at LABCELL_X81_Y23_N6
A1L853 = ( A1L238 & ( A1L354 & ( (!A1L403 & (((!A1L404)) # (minAngleCount[30]))) # (A1L403 & (((A1L404) # (maxAngleCount[30])))) ) ) ) # ( !A1L238 & ( A1L354 & ( (!A1L403 & (minAngleCount[30] & ((A1L404)))) # (A1L403 & (((A1L404) # (maxAngleCount[30])))) ) ) ) # ( A1L238 & ( !A1L354 & ( (!A1L403 & (((!A1L404)) # (minAngleCount[30]))) # (A1L403 & (((maxAngleCount[30] & !A1L404)))) ) ) ) # ( !A1L238 & ( !A1L354 & ( (!A1L403 & (minAngleCount[30] & ((A1L404)))) # (A1L403 & (((maxAngleCount[30] & !A1L404)))) ) ) );


--A1L489 is angleCount[30]~3 at LABCELL_X81_Y23_N30
A1L489 = ( A1L853 & ( !A1L487 ) ) # ( !A1L853 & ( A1L487 ) );


--reg[0][30] is reg[0][30] at FF_X85_Y22_N34
--register power-up is low

reg[0][30] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L784, A1L944,  ,  , VCC);


--A1L854 is Selector7~0 at LABCELL_X85_Y22_N30
A1L854 = ( A1L403 & ( A1L358 & ( (maxAngleCount[29]) # (A1L404) ) ) ) # ( !A1L403 & ( A1L358 & ( (!A1L404 & ((A1L242))) # (A1L404 & (minAngleCount[29])) ) ) ) # ( A1L403 & ( !A1L358 & ( (!A1L404 & maxAngleCount[29]) ) ) ) # ( !A1L403 & ( !A1L358 & ( (!A1L404 & ((A1L242))) # (A1L404 & (minAngleCount[29])) ) ) );


--A1L485 is angleCount[29]~7 at LABCELL_X85_Y22_N54
A1L485 = ( A1L854 & ( !A1L483 ) ) # ( !A1L854 & ( A1L483 ) );


--reg[0][29] is reg[0][29] at FF_X88_Y22_N1
--register power-up is low

reg[0][29] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L784, A1L942,  ,  , VCC);


--A1L850 is Selector2~0 at LABCELL_X83_Y24_N27
A1L850 = ( A1L626 & ( (!A1L763) # ((current_state.SW_RIGHT) # (A1L593)) ) ) # ( !A1L626 & ( (!A1L763) # ((!current_state.SW_RIGHT & ((A1L593))) # (current_state.SW_RIGHT & (angleCount[31]))) ) );


--A1L848 is Selector0~0 at LABCELL_X83_Y24_N6
A1L848 = (current_state.INT_LEFT & !current_state.INT_RIGHT);


--reg[1][7] is reg[1][7] at FF_X88_Y24_N16
--register power-up is low

reg[1][7] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L844, A1L898,  ,  , VCC);


--reg[1][6] is reg[1][6] at FF_X88_Y22_N43
--register power-up is low

reg[1][6] = DFFEAS(A1L813, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L844,  ,  ,  ,  );


--reg[1][5] is reg[1][5] at FF_X84_Y24_N5
--register power-up is low

reg[1][5] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L844, A1L894,  ,  , VCC);


--reg[1][4] is reg[1][4] at FF_X87_Y23_N40
--register power-up is low

reg[1][4] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L844, A1L892,  ,  , VCC);


--reg[1][1] is reg[1][1] at FF_X84_Y20_N13
--register power-up is low

reg[1][1] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L844, A1L886,  ,  , VCC);


--reg[1][0] is reg[1][0] at FF_X87_Y21_N16
--register power-up is low

reg[1][0] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L844, A1L884,  ,  , VCC);


--reg[1][3] is reg[1][3] at FF_X88_Y22_N13
--register power-up is low

reg[1][3] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L844, A1L890,  ,  , VCC);


--reg[1][2] is reg[1][2] at FF_X80_Y22_N7
--register power-up is low

reg[1][2] = DFFEAS(A1L808, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L844,  ,  ,  ,  );


--reg[1][14] is reg[1][14] at FF_X87_Y24_N49
--register power-up is low

reg[1][14] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L844, A1L912,  ,  , VCC);


--reg[1][13] is reg[1][13] at FF_X87_Y23_N59
--register power-up is low

reg[1][13] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L844, A1L910,  ,  , VCC);


--reg[1][12] is reg[1][12] at FF_X87_Y24_N38
--register power-up is low

reg[1][12] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L844, A1L908,  ,  , VCC);


--reg[1][11] is reg[1][11] at FF_X87_Y20_N40
--register power-up is low

reg[1][11] = DFFEAS(A1L819, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L844,  ,  ,  ,  );


--reg[1][9] is reg[1][9] at FF_X87_Y21_N5
--register power-up is low

reg[1][9] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L844, A1L902,  ,  , VCC);


--reg[1][10] is reg[1][10] at FF_X87_Y21_N23
--register power-up is low

reg[1][10] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L844, A1L904,  ,  , VCC);


--reg[1][8] is reg[1][8] at FF_X88_Y22_N34
--register power-up is low

reg[1][8] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L844, A1L900,  ,  , VCC);


--reg[1][21] is reg[1][21] at FF_X88_Y22_N38
--register power-up is low

reg[1][21] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L844, A1L926,  ,  , VCC);


--reg[1][20] is reg[1][20] at FF_X88_Y22_N46
--register power-up is low

reg[1][20] = DFFEAS(A1L832, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L844,  ,  ,  ,  );


--reg[1][19] is reg[1][19] at FF_X84_Y23_N5
--register power-up is low

reg[1][19] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L844, A1L922,  ,  , VCC);


--reg[1][18] is reg[1][18] at FF_X87_Y21_N40
--register power-up is low

reg[1][18] = DFFEAS(A1L829, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L844,  ,  ,  ,  );


--reg[1][16] is reg[1][16] at FF_X88_Y22_N40
--register power-up is low

reg[1][16] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L844, A1L916,  ,  , VCC);


--reg[1][17] is reg[1][17] at FF_X84_Y20_N46
--register power-up is low

reg[1][17] = DFFEAS(A1L827, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L844,  ,  ,  ,  );


--reg[1][15] is reg[1][15] at FF_X79_Y23_N17
--register power-up is low

reg[1][15] = DFFEAS(A1L824, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L844,  ,  ,  ,  );


--reg[1][28] is reg[1][28] at FF_X82_Y22_N13
--register power-up is low

reg[1][28] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L844, A1L940,  ,  , VCC);


--reg[1][27] is reg[1][27] at FF_X84_Y20_N43
--register power-up is low

reg[1][27] = DFFEAS(A1L840, GLOBAL(A1L495), GLOBAL(A1L847),  , A1L844,  ,  ,  ,  );


--reg[1][26] is reg[1][26] at FF_X80_Y22_N13
--register power-up is low

reg[1][26] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L844, A1L936,  ,  , VCC);


--reg[1][25] is reg[1][25] at FF_X85_Y21_N23
--register power-up is low

reg[1][25] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L844, A1L934,  ,  , VCC);


--reg[1][23] is reg[1][23] at FF_X83_Y22_N29
--register power-up is low

reg[1][23] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L844, A1L930,  ,  , VCC);


--reg[1][24] is reg[1][24] at FF_X83_Y21_N47
--register power-up is low

reg[1][24] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L844, A1L932,  ,  , VCC);


--reg[1][22] is reg[1][22] at FF_X83_Y21_N43
--register power-up is low

reg[1][22] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L844, A1L928,  ,  , VCC);


--reg[1][30] is reg[1][30] at FF_X82_Y22_N35
--register power-up is low

reg[1][30] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L844, A1L944,  ,  , VCC);


--reg[1][29] is reg[1][29] at FF_X88_Y22_N55
--register power-up is low

reg[1][29] = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  , A1L844, A1L942,  ,  , VCC);


--A1L784 is reg[0][15]~0 at LABCELL_X88_Y22_N3
A1L784 = ( !A1L362 & ( A1L947 ) );


--A1L844 is reg[1][30]~1 at LABCELL_X88_Y22_N57
A1L844 = ( A1L362 & ( A1L947 ) );


--A1L594 is LessThan1~33 at LABCELL_X85_Y24_N36
A1L594 = ( A1L389 & ( A1L381 & ( (!maxAngleCount[4] & (maxAngleCount[6] & (!A1L385 $ (maxAngleCount[5])))) ) ) ) # ( !A1L389 & ( A1L381 & ( (!maxAngleCount[4] & (!maxAngleCount[6] & (!A1L385 $ (maxAngleCount[5])))) ) ) ) # ( A1L389 & ( !A1L381 & ( (maxAngleCount[4] & (maxAngleCount[6] & (!A1L385 $ (maxAngleCount[5])))) ) ) ) # ( !A1L389 & ( !A1L381 & ( (maxAngleCount[4] & (!maxAngleCount[6] & (!A1L385 $ (maxAngleCount[5])))) ) ) );


--A1L595 is LessThan1~34 at MLABCELL_X87_Y24_N21
A1L595 = ( A1L365 & ( (!A1L369 & !maxAngleCount[1]) ) ) # ( !A1L365 & ( (!maxAngleCount[0] & ((!A1L369) # (!maxAngleCount[1]))) # (maxAngleCount[0] & (!A1L369 & !maxAngleCount[1])) ) );


--A1L627 is LessThan2~28 at MLABCELL_X82_Y24_N18
A1L627 = ( A1L389 & ( A1L385 & ( (!minAngleCount[6] & (minAngleCount[5] & (!minAngleCount[4] $ (A1L381)))) ) ) ) # ( !A1L389 & ( A1L385 & ( (minAngleCount[6] & (minAngleCount[5] & (!minAngleCount[4] $ (A1L381)))) ) ) ) # ( A1L389 & ( !A1L385 & ( (!minAngleCount[6] & (!minAngleCount[5] & (!minAngleCount[4] $ (A1L381)))) ) ) ) # ( !A1L389 & ( !A1L385 & ( (minAngleCount[6] & (!minAngleCount[5] & (!minAngleCount[4] $ (A1L381)))) ) ) );


--A1L628 is LessThan2~29 at LABCELL_X81_Y24_N57
A1L628 = ( A1L365 & ( (!minAngleCount[0] & (minAngleCount[1] & A1L369)) # (minAngleCount[0] & ((A1L369) # (minAngleCount[1]))) ) ) # ( !A1L365 & ( (minAngleCount[1] & A1L369) ) );


--A1L629 is LessThan2~30 at MLABCELL_X84_Y23_N15
A1L629 = ( A1L432 & ( (!minAngleCount[16]) # ((A1L428 & minAngleCount[15])) ) ) # ( !A1L432 & ( (A1L428 & (minAngleCount[15] & !minAngleCount[16])) ) );


--A1L630 is LessThan2~31 at LABCELL_X81_Y23_N21
A1L630 = ( A1L436 & ( A1L440 & ( (!minAngleCount[18]) # (!minAngleCount[17]) ) ) ) # ( !A1L436 & ( A1L440 & ( !minAngleCount[18] ) ) ) # ( A1L436 & ( !A1L440 & ( (!minAngleCount[18] & !minAngleCount[17]) ) ) );


--A1L631 is LessThan2~32 at LABCELL_X83_Y21_N9
A1L631 = ( A1L460 & ( (!minAngleCount[23]) # ((!minAngleCount[22] & A1L456)) ) ) # ( !A1L460 & ( (!minAngleCount[22] & (!minAngleCount[23] & A1L456)) ) );


--A1L632 is LessThan2~33 at LABCELL_X83_Y24_N9
A1L632 = ( minAngleCount[24] & ( (!minAngleCount[25] & A1L468) ) ) # ( !minAngleCount[24] & ( (!A1L464 & (!minAngleCount[25] & A1L468)) # (A1L464 & ((!minAngleCount[25]) # (A1L468))) ) );


--A1L596 is LessThan1~35 at MLABCELL_X87_Y24_N45
A1L596 = ( maxAngleCount[8] & ( A1L412 & ( (maxAngleCount[11] & (A1L397 & (!A1L408 $ (!maxAngleCount[10])))) ) ) ) # ( !maxAngleCount[8] & ( A1L412 & ( (maxAngleCount[11] & (!A1L397 & (!A1L408 $ (!maxAngleCount[10])))) ) ) ) # ( maxAngleCount[8] & ( !A1L412 & ( (!maxAngleCount[11] & (A1L397 & (!A1L408 $ (!maxAngleCount[10])))) ) ) ) # ( !maxAngleCount[8] & ( !A1L412 & ( (!maxAngleCount[11] & (!A1L397 & (!A1L408 $ (!maxAngleCount[10])))) ) ) );


--A1L597 is LessThan1~36 at MLABCELL_X87_Y24_N24
A1L597 = ( A1L420 & ( (maxAngleCount[13] & (!maxAngleCount[12] $ (A1L416))) ) ) # ( !A1L420 & ( (!maxAngleCount[13] & (!maxAngleCount[12] $ (A1L416))) ) );


--A1L598 is LessThan1~37 at MLABCELL_X87_Y24_N9
A1L598 = ( maxAngleCount[9] & ( A1L412 & ( (maxAngleCount[8] & (maxAngleCount[11] & (!maxAngleCount[10] $ (!A1L408)))) ) ) ) # ( !maxAngleCount[9] & ( A1L412 & ( (maxAngleCount[11] & (!maxAngleCount[10] $ (!A1L408))) ) ) ) # ( maxAngleCount[9] & ( !A1L412 & ( (maxAngleCount[8] & (!maxAngleCount[11] & (!maxAngleCount[10] $ (!A1L408)))) ) ) ) # ( !maxAngleCount[9] & ( !A1L412 & ( (!maxAngleCount[11] & (!maxAngleCount[10] $ (!A1L408))) ) ) );


--A1L633 is LessThan2~34 at MLABCELL_X87_Y23_N48
A1L633 = ( A1L412 & ( A1L397 & ( (!minAngleCount[8] & (minAngleCount[11] & (!minAngleCount[10] $ (A1L408)))) ) ) ) # ( !A1L412 & ( A1L397 & ( (!minAngleCount[8] & (!minAngleCount[11] & (!minAngleCount[10] $ (A1L408)))) ) ) ) # ( A1L412 & ( !A1L397 & ( (minAngleCount[8] & (minAngleCount[11] & (!minAngleCount[10] $ (A1L408)))) ) ) ) # ( !A1L412 & ( !A1L397 & ( (minAngleCount[8] & (!minAngleCount[11] & (!minAngleCount[10] $ (A1L408)))) ) ) );


--A1L634 is LessThan2~35 at LABCELL_X88_Y23_N30
A1L634 = ( minAngleCount[12] & ( A1L416 & ( !minAngleCount[13] $ (A1L420) ) ) ) # ( !minAngleCount[12] & ( !A1L416 & ( !minAngleCount[13] $ (A1L420) ) ) );


--A1L635 is LessThan2~36 at MLABCELL_X87_Y23_N30
A1L635 = ( A1L408 & ( A1L412 & ( (minAngleCount[10] & (minAngleCount[11] & ((minAngleCount[9]) # (minAngleCount[8])))) ) ) ) # ( !A1L408 & ( A1L412 & ( (!minAngleCount[10] & (minAngleCount[11] & ((minAngleCount[9]) # (minAngleCount[8])))) ) ) ) # ( A1L408 & ( !A1L412 & ( (minAngleCount[10] & (!minAngleCount[11] & ((minAngleCount[9]) # (minAngleCount[8])))) ) ) ) # ( !A1L408 & ( !A1L412 & ( (!minAngleCount[10] & (!minAngleCount[11] & ((minAngleCount[9]) # (minAngleCount[8])))) ) ) );


--A1L636 is LessThan2~37 at LABCELL_X83_Y23_N0
A1L636 = ( A1L436 & ( A1L440 & ( (minAngleCount[18] & (minAngleCount[17] & (!minAngleCount[15] $ (!A1L428)))) ) ) ) # ( !A1L436 & ( A1L440 & ( (minAngleCount[18] & (!minAngleCount[17] & (!minAngleCount[15] $ (!A1L428)))) ) ) ) # ( A1L436 & ( !A1L440 & ( (!minAngleCount[18] & (minAngleCount[17] & (!minAngleCount[15] $ (!A1L428)))) ) ) ) # ( !A1L436 & ( !A1L440 & ( (!minAngleCount[18] & (!minAngleCount[17] & (!minAngleCount[15] $ (!A1L428)))) ) ) );


--A1L637 is LessThan2~38 at LABCELL_X83_Y23_N33
A1L637 = ( A1L444 & ( (minAngleCount[19] & (!minAngleCount[20] $ (A1L448))) ) ) # ( !A1L444 & ( (!minAngleCount[19] & (!minAngleCount[20] $ (A1L448))) ) );


--A1L737 is minAngleCount[14]~0 at LABCELL_X83_Y23_N30
A1L737 = !reg[0][14];


--A1L731 is minAngleCount[9]~1 at MLABCELL_X87_Y21_N24
A1L731 = ( !reg[0][9] );


--A1L728 is minAngleCount[8]~2 at LABCELL_X88_Y22_N48
A1L728 = ( !reg[0][8] );


--A1L721 is minAngleCount[3]~3 at LABCELL_X88_Y22_N9
A1L721 = ( !reg[0][3] );


--A1L719 is minAngleCount[2]~4 at LABCELL_X81_Y24_N30
A1L719 = ( !reg[0][2] );


--A1L717 is minAngleCount[1]~5 at MLABCELL_X84_Y20_N48
A1L717 = ( !reg[0][1] );


--A1L715 is minAngleCount[0]~6 at LABCELL_X88_Y21_N12
A1L715 = ( !reg[0][0] );


--A1L725 is minAngleCount[6]~7 at LABCELL_X88_Y22_N24
A1L725 = ( !reg[0][6] );


--A1L739 is minAngleCount[15]~8 at MLABCELL_X78_Y23_N36
A1L739 = ( !reg[0][15] );


--A1L758 is next_state.SW_LEFT~0 at LABCELL_X79_Y24_N0
A1L758 = ( !current_state.INT_RIGHT );


--A1L685 is maxAngleCount[7]~1 at MLABCELL_X84_Y24_N36
A1L685 = ( !reg[1][7] );


--A1L681 is maxAngleCount[4]~2 at LABCELL_X85_Y23_N45
A1L681 = !reg[1][4];


--A1L675 is maxAngleCount[1]~3 at MLABCELL_X87_Y24_N3
A1L675 = ( !reg[1][1] );


--A1L673 is maxAngleCount[0]~4 at MLABCELL_X87_Y24_N18
A1L673 = ( !reg[1][0] );


--A1L679 is maxAngleCount[3]~5 at LABCELL_X85_Y24_N6
A1L679 = !reg[1][3];


--A1L677 is maxAngleCount[2]~6 at LABCELL_X85_Y24_N27
A1L677 = !reg[1][2];


--A1L688 is maxAngleCount[9]~7 at MLABCELL_X87_Y21_N51
A1L688 = ( !reg[1][9] );


--A1L690 is maxAngleCount[10]~8 at MLABCELL_X87_Y21_N21
A1L690 = ( !reg[1][10] );


--A1L698 is maxAngleCount[16]~9 at LABCELL_X85_Y22_N42
A1L698 = !reg[1][16];


--A1L696 is maxAngleCount[15]~10 at LABCELL_X79_Y23_N42
A1L696 = ( !reg[1][15] );


--A1L467 is angleCount[25]~21 at MLABCELL_X84_Y22_N54
A1L467 = ( minAngleCount[25] & ( (!A1L846) # (A1L467) ) ) # ( !minAngleCount[25] & ( (A1L846 & A1L467) ) );


--A1L479 is angleCount[28]~9 at LABCELL_X83_Y22_N24
A1L479 = ( minAngleCount[28] & ( (!A1L846) # (A1L479) ) ) # ( !minAngleCount[28] & ( (A1L479 & A1L846) ) );


--A1L475 is angleCount[27]~13 at LABCELL_X83_Y22_N21
A1L475 = ( A1L475 & ( minAngleCount[27] ) ) # ( !A1L475 & ( minAngleCount[27] & ( !A1L846 ) ) ) # ( A1L475 & ( !minAngleCount[27] & ( A1L846 ) ) );


--A1L471 is angleCount[26]~17 at LABCELL_X83_Y22_N12
A1L471 = ( minAngleCount[26] & ( (!A1L846) # (A1L471) ) ) # ( !minAngleCount[26] & ( (A1L471 & A1L846) ) );


--A1L459 is angleCount[23]~29 at MLABCELL_X84_Y21_N54
A1L459 = ( minAngleCount[23] & ( (!A1L846) # (A1L459) ) ) # ( !minAngleCount[23] & ( (A1L846 & A1L459) ) );


--A1L463 is angleCount[24]~25 at LABCELL_X83_Y21_N39
A1L463 = ( minAngleCount[24] & ( (!A1L846) # (A1L463) ) ) # ( !minAngleCount[24] & ( (A1L463 & A1L846) ) );


--A1L455 is angleCount[22]~33 at LABCELL_X83_Y21_N48
A1L455 = ( minAngleCount[22] & ( (!A1L846) # (A1L455) ) ) # ( !minAngleCount[22] & ( (A1L455 & A1L846) ) );


--A1L411 is angleCount[11]~77 at MLABCELL_X87_Y23_N42
A1L411 = ( A1L411 & ( (minAngleCount[11]) # (A1L846) ) ) # ( !A1L411 & ( (!A1L846 & minAngleCount[11]) ) );


--A1L423 is angleCount[14]~65 at LABCELL_X88_Y23_N21
A1L423 = ( minAngleCount[14] & ( (A1L846 & A1L423) ) ) # ( !minAngleCount[14] & ( (!A1L846) # (A1L423) ) );


--A1L419 is angleCount[13]~69 at LABCELL_X88_Y23_N24
A1L419 = ( minAngleCount[13] & ( (!A1L846) # (A1L419) ) ) # ( !minAngleCount[13] & ( (A1L846 & A1L419) ) );


--A1L415 is angleCount[12]~73 at LABCELL_X88_Y23_N15
A1L415 = ( A1L415 & ( (A1L846) # (minAngleCount[12]) ) ) # ( !A1L415 & ( (minAngleCount[12] & !A1L846) ) );


--A1L407 is angleCount[10]~81 at MLABCELL_X87_Y23_N57
A1L407 = ( A1L407 & ( (A1L846) # (minAngleCount[10]) ) ) # ( !A1L407 & ( (minAngleCount[10] & !A1L846) ) );


--A1L400 is angleCount[9]~85 at LABCELL_X85_Y23_N57
A1L400 = ( A1L400 & ( minAngleCount[9] & ( A1L846 ) ) ) # ( A1L400 & ( !minAngleCount[9] ) ) # ( !A1L400 & ( !minAngleCount[9] & ( !A1L846 ) ) );


--A1L396 is angleCount[8]~89 at LABCELL_X88_Y24_N24
A1L396 = ( minAngleCount[8] & ( (A1L846 & A1L396) ) ) # ( !minAngleCount[8] & ( (!A1L846) # (A1L396) ) );


--A1L376 is angleCount[3]~109 at LABCELL_X85_Y24_N57
A1L376 = ( minAngleCount[3] & ( (A1L376 & A1L846) ) ) # ( !minAngleCount[3] & ( (!A1L846) # (A1L376) ) );


--A1L372 is angleCount[2]~113 at LABCELL_X85_Y24_N51
A1L372 = ( minAngleCount[2] & ( (A1L372 & A1L846) ) ) # ( !minAngleCount[2] & ( (!A1L846) # (A1L372) ) );


--A1L368 is angleCount[1]~117 at MLABCELL_X87_Y24_N33
A1L368 = ( minAngleCount[1] & ( (A1L368 & A1L846) ) ) # ( !minAngleCount[1] & ( (!A1L846) # (A1L368) ) );


--A1L364 is angleCount[0]~121 at LABCELL_X85_Y24_N0
A1L364 = ( minAngleCount[0] & ( (A1L846 & A1L364) ) ) # ( !minAngleCount[0] & ( (!A1L846) # (A1L364) ) );


--A1L384 is angleCount[5]~101 at MLABCELL_X82_Y24_N27
A1L384 = ( A1L384 & ( minAngleCount[5] ) ) # ( !A1L384 & ( minAngleCount[5] & ( !A1L846 ) ) ) # ( A1L384 & ( !minAngleCount[5] & ( A1L846 ) ) );


--A1L392 is angleCount[7]~93 at LABCELL_X88_Y24_N21
A1L392 = ( minAngleCount[7] & ( (!A1L846) # (A1L392) ) ) # ( !minAngleCount[7] & ( (A1L846 & A1L392) ) );


--A1L388 is angleCount[6]~97 at MLABCELL_X84_Y22_N24
A1L388 = ( minAngleCount[6] & ( (A1L846 & A1L388) ) ) # ( !minAngleCount[6] & ( (!A1L846) # (A1L388) ) );


--A1L380 is angleCount[4]~105 at LABCELL_X85_Y22_N57
A1L380 = ( minAngleCount[4] & ( (!A1L846) # (A1L380) ) ) # ( !minAngleCount[4] & ( (A1L380 & A1L846) ) );


--A1L451 is angleCount[21]~37 at MLABCELL_X84_Y23_N12
A1L451 = ( minAngleCount[21] & ( (!A1L846) # (A1L451) ) ) # ( !minAngleCount[21] & ( (A1L846 & A1L451) ) );


--A1L447 is angleCount[20]~41 at MLABCELL_X84_Y23_N57
A1L447 = ( minAngleCount[20] & ( (!A1L846) # (A1L447) ) ) # ( !minAngleCount[20] & ( (A1L846 & A1L447) ) );


--A1L443 is angleCount[19]~45 at MLABCELL_X84_Y23_N21
A1L443 = ( minAngleCount[19] & ( (!A1L846) # (A1L443) ) ) # ( !minAngleCount[19] & ( (A1L846 & A1L443) ) );


--A1L439 is angleCount[18]~49 at LABCELL_X81_Y23_N36
A1L439 = ( A1L439 & ( minAngleCount[18] ) ) # ( !A1L439 & ( minAngleCount[18] & ( !A1L846 ) ) ) # ( A1L439 & ( !minAngleCount[18] & ( A1L846 ) ) );


--A1L431 is angleCount[16]~57 at LABCELL_X85_Y23_N24
A1L431 = ( minAngleCount[16] & ( (!A1L846) # (A1L431) ) ) # ( !minAngleCount[16] & ( (A1L846 & A1L431) ) );


--A1L435 is angleCount[17]~53 at LABCELL_X85_Y23_N51
A1L435 = ( minAngleCount[17] & ( (!A1L846) # (A1L435) ) ) # ( !minAngleCount[17] & ( (A1L846 & A1L435) ) );


--A1L427 is angleCount[15]~61 at LABCELL_X83_Y23_N21
A1L427 = ( minAngleCount[15] & ( (A1L846 & A1L427) ) ) # ( !minAngleCount[15] & ( (!A1L846) # (A1L427) ) );


--A1L487 is angleCount[30]~1 at LABCELL_X85_Y22_N9
A1L487 = ( minAngleCount[30] & ( (!A1L846) # (A1L487) ) ) # ( !minAngleCount[30] & ( (A1L487 & A1L846) ) );


--A1L483 is angleCount[29]~5 at LABCELL_X85_Y22_N36
A1L483 = ( minAngleCount[29] & ( (!A1L846) # (A1L483) ) ) # ( !minAngleCount[29] & ( (A1L483 & A1L846) ) );



--writedata[31] is writedata[31] at PIN_AG6
writedata[31] = INPUT();


--A1L762 is out_wave_export~output at IOOBUF_X89_Y21_N39
A1L762 = OUTPUT_BUFFER.O(.I(out_wave), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--out_wave_export is out_wave_export at PIN_AB28
out_wave_export = OUTPUT();


--A1L550 is irq~output at IOOBUF_X89_Y9_N56
A1L550 = OUTPUT_BUFFER.O(.I(A1L551Q), , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , );


--irq is irq at PIN_AB26
irq = OUTPUT();


--A1L494 is clk~input at IOIBUF_X89_Y25_N21
A1L494 = INPUT_BUFFER(.I(clk), );


--clk is clk at PIN_Y27
clk = INPUT();


--A1L846 is reset_n~input at IOIBUF_X89_Y23_N4
A1L846 = INPUT_BUFFER(.I(reset_n), );


--reset_n is reset_n at PIN_AA26
reset_n = INPUT();


--A1L947 is write~input at IOIBUF_X89_Y21_N4
A1L947 = INPUT_BUFFER(.I(write), );


--write is write at PIN_AB30
write = INPUT();


--A1L934 is writedata[25]~input at IOIBUF_X89_Y15_N4
A1L934 = INPUT_BUFFER(.I(writedata[25]), );


--writedata[25] is writedata[25] at PIN_V23
writedata[25] = INPUT();


--A1L362 is address~input at IOIBUF_X89_Y16_N21
A1L362 = INPUT_BUFFER(.I(address), );


--address is address at PIN_AC27
address = INPUT();


--A1L940 is writedata[28]~input at IOIBUF_X89_Y13_N21
A1L940 = INPUT_BUFFER(.I(writedata[28]), );


--writedata[28] is writedata[28] at PIN_Y24
writedata[28] = INPUT();


--A1L938 is writedata[27]~input at IOIBUF_X89_Y16_N38
A1L938 = INPUT_BUFFER(.I(writedata[27]), );


--writedata[27] is writedata[27] at PIN_AH30
writedata[27] = INPUT();


--A1L936 is writedata[26]~input at IOIBUF_X89_Y13_N38
A1L936 = INPUT_BUFFER(.I(writedata[26]), );


--writedata[26] is writedata[26] at PIN_AG28
writedata[26] = INPUT();


--A1L930 is writedata[23]~input at IOIBUF_X89_Y15_N21
A1L930 = INPUT_BUFFER(.I(writedata[23]), );


--writedata[23] is writedata[23] at PIN_W24
writedata[23] = INPUT();


--A1L932 is writedata[24]~input at IOIBUF_X89_Y13_N55
A1L932 = INPUT_BUFFER(.I(writedata[24]), );


--writedata[24] is writedata[24] at PIN_AF28
writedata[24] = INPUT();


--A1L928 is writedata[22]~input at IOIBUF_X89_Y13_N4
A1L928 = INPUT_BUFFER(.I(writedata[22]), );


--writedata[22] is writedata[22] at PIN_Y23
writedata[22] = INPUT();


--A1L906 is writedata[11]~input at IOIBUF_X89_Y11_N44
A1L906 = INPUT_BUFFER(.I(writedata[11]), );


--writedata[11] is writedata[11] at PIN_AA24
writedata[11] = INPUT();


--A1L912 is writedata[14]~input at IOIBUF_X89_Y25_N4
A1L912 = INPUT_BUFFER(.I(writedata[14]), );


--writedata[14] is writedata[14] at PIN_Y26
writedata[14] = INPUT();


--A1L910 is writedata[13]~input at IOIBUF_X89_Y23_N38
A1L910 = INPUT_BUFFER(.I(writedata[13]), );


--writedata[13] is writedata[13] at PIN_AE29
writedata[13] = INPUT();


--A1L908 is writedata[12]~input at IOIBUF_X89_Y25_N55
A1L908 = INPUT_BUFFER(.I(writedata[12]), );


--writedata[12] is writedata[12] at PIN_AC30
writedata[12] = INPUT();


--A1L904 is writedata[10]~input at IOIBUF_X89_Y21_N21
A1L904 = INPUT_BUFFER(.I(writedata[10]), );


--writedata[10] is writedata[10] at PIN_AA30
writedata[10] = INPUT();


--A1L902 is writedata[9]~input at IOIBUF_X89_Y11_N95
A1L902 = INPUT_BUFFER(.I(writedata[9]), );


--writedata[9] is writedata[9] at PIN_AE28
writedata[9] = INPUT();


--A1L900 is writedata[8]~input at IOIBUF_X89_Y11_N78
A1L900 = INPUT_BUFFER(.I(writedata[8]), );


--writedata[8] is writedata[8] at PIN_AE27
writedata[8] = INPUT();


--A1L890 is writedata[3]~input at IOIBUF_X89_Y20_N95
A1L890 = INPUT_BUFFER(.I(writedata[3]), );


--writedata[3] is writedata[3] at PIN_AC29
writedata[3] = INPUT();


--A1L888 is writedata[2]~input at IOIBUF_X89_Y11_N61
A1L888 = INPUT_BUFFER(.I(writedata[2]), );


--writedata[2] is writedata[2] at PIN_AB25
writedata[2] = INPUT();


--A1L886 is writedata[1]~input at IOIBUF_X89_Y20_N61
A1L886 = INPUT_BUFFER(.I(writedata[1]), );


--writedata[1] is writedata[1] at PIN_V25
writedata[1] = INPUT();


--A1L884 is writedata[0]~input at IOIBUF_X89_Y15_N55
A1L884 = INPUT_BUFFER(.I(writedata[0]), );


--writedata[0] is writedata[0] at PIN_AF30
writedata[0] = INPUT();


--A1L894 is writedata[5]~input at IOIBUF_X89_Y16_N4
A1L894 = INPUT_BUFFER(.I(writedata[5]), );


--writedata[5] is writedata[5] at PIN_AD26
writedata[5] = INPUT();


--A1L898 is writedata[7]~input at IOIBUF_X89_Y25_N38
A1L898 = INPUT_BUFFER(.I(writedata[7]), );


--writedata[7] is writedata[7] at PIN_AD30
writedata[7] = INPUT();


--A1L896 is writedata[6]~input at IOIBUF_X89_Y6_N55
A1L896 = INPUT_BUFFER(.I(writedata[6]), );


--writedata[6] is writedata[6] at PIN_AH29
writedata[6] = INPUT();


--A1L892 is writedata[4]~input at IOIBUF_X89_Y23_N21
A1L892 = INPUT_BUFFER(.I(writedata[4]), );


--writedata[4] is writedata[4] at PIN_AB27
writedata[4] = INPUT();


--A1L926 is writedata[21]~input at IOIBUF_X89_Y6_N38
A1L926 = INPUT_BUFFER(.I(writedata[21]), );


--writedata[21] is writedata[21] at PIN_AJ29
writedata[21] = INPUT();


--A1L924 is writedata[20]~input at IOIBUF_X89_Y15_N38
A1L924 = INPUT_BUFFER(.I(writedata[20]), );


--writedata[20] is writedata[20] at PIN_AF29
writedata[20] = INPUT();


--A1L922 is writedata[19]~input at IOIBUF_X89_Y23_N55
A1L922 = INPUT_BUFFER(.I(writedata[19]), );


--writedata[19] is writedata[19] at PIN_AD29
writedata[19] = INPUT();


--A1L920 is writedata[18]~input at IOIBUF_X89_Y21_N55
A1L920 = INPUT_BUFFER(.I(writedata[18]), );


--writedata[18] is writedata[18] at PIN_AA28
writedata[18] = INPUT();


--A1L916 is writedata[16]~input at IOIBUF_X89_Y20_N44
A1L916 = INPUT_BUFFER(.I(writedata[16]), );


--writedata[16] is writedata[16] at PIN_W25
writedata[16] = INPUT();


--A1L918 is writedata[17]~input at IOIBUF_X84_Y0_N35
A1L918 = INPUT_BUFFER(.I(writedata[17]), );


--writedata[17] is writedata[17] at PIN_AG26
writedata[17] = INPUT();


--A1L914 is writedata[15]~input at IOIBUF_X78_Y0_N18
A1L914 = INPUT_BUFFER(.I(writedata[15]), );


--writedata[15] is writedata[15] at PIN_AE23
writedata[15] = INPUT();


--A1L944 is writedata[30]~input at IOIBUF_X89_Y16_N55
A1L944 = INPUT_BUFFER(.I(writedata[30]), );


--writedata[30] is writedata[30] at PIN_AG30
writedata[30] = INPUT();


--A1L942 is writedata[29]~input at IOIBUF_X89_Y20_N78
A1L942 = INPUT_BUFFER(.I(writedata[29]), );


--writedata[29] is writedata[29] at PIN_AC28
writedata[29] = INPUT();



--A1L495 is clk~inputCLKENA0 at CLKCTRL_G10
A1L495 = cyclonev_clkena(.INCLK = A1L494) WITH (clock_type = "Global Clock", ena_register_mode = "always enabled");


--A1L847 is reset_n~inputCLKENA0 at CLKCTRL_G8
A1L847 = cyclonev_clkena(.INCLK = A1L846) WITH (clock_type = "Global Clock", ena_register_mode = "always enabled");


--A1L544 is current_state.INT_RIGHT~feeder at LABCELL_X79_Y24_N15
A1L544 = ( next_state.INT_RIGHT );


--A1L546 is current_state.SW_LEFT~feeder at LABCELL_X80_Y24_N27
A1L546 = ( next_state.SW_LEFT );


--A1L729 is minAngleCount[8]~feeder at LABCELL_X88_Y24_N33
A1L729 = ( A1L728 );


--A1L800 is reg[0][27]~feeder at MLABCELL_X84_Y20_N9
A1L800 = ( A1L938 );


--A1L840 is reg[1][27]~feeder at MLABCELL_X84_Y20_N42
A1L840 = ( A1L938 );


--A1L795 is reg[0][23]~feeder at MLABCELL_X78_Y21_N24
A1L795 = ( A1L930 );


--A1L819 is reg[1][11]~feeder at MLABCELL_X87_Y20_N39
A1L819 = ( A1L906 );


--A1L808 is reg[1][2]~feeder at LABCELL_X80_Y22_N6
A1L808 = ( A1L888 );


--A1L813 is reg[1][6]~feeder at LABCELL_X88_Y22_N42
A1L813 = ( A1L896 );


--A1L832 is reg[1][20]~feeder at LABCELL_X88_Y22_N45
A1L832 = ( A1L924 );


--A1L789 is reg[0][18]~feeder at MLABCELL_X87_Y21_N30
A1L789 = ( A1L920 );


--A1L829 is reg[1][18]~feeder at MLABCELL_X87_Y21_N39
A1L829 = ( A1L920 );


--A1L787 is reg[0][17]~feeder at MLABCELL_X84_Y20_N21
A1L787 = ( A1L918 );


--A1L827 is reg[1][17]~feeder at MLABCELL_X84_Y20_N45
A1L827 = ( A1L918 );


--A1L824 is reg[1][15]~feeder at LABCELL_X79_Y23_N15
A1L824 = ( A1L914 );


--A1L535Q is currCount[28]~DUPLICATE at FF_X82_Y20_N25
--register power-up is low

A1L535Q = DFFEAS(A1L6, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--A1L533Q is currCount[27]~DUPLICATE at FF_X82_Y20_N23
--register power-up is low

A1L533Q = DFFEAS(A1L10, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--A1L531Q is currCount[26]~DUPLICATE at FF_X82_Y20_N20
--register power-up is low

A1L531Q = DFFEAS(A1L14, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--A1L527Q is currCount[23]~DUPLICATE at FF_X82_Y20_N11
--register power-up is low

A1L527Q = DFFEAS(A1L18, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--A1L509Q is currCount[8]~DUPLICATE at FF_X82_Y21_N25
--register power-up is low

A1L509Q = DFFEAS(A1L54, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--A1L500Q is currCount[1]~DUPLICATE at FF_X82_Y21_N5
--register power-up is low

A1L500Q = DFFEAS(A1L66, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--A1L498Q is currCount[0]~DUPLICATE at FF_X82_Y21_N2
--register power-up is low

A1L498Q = DFFEAS(A1L70, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--A1L506Q is currCount[6]~DUPLICATE at FF_X82_Y21_N20
--register power-up is low

A1L506Q = DFFEAS(A1L82, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--A1L524Q is currCount[21]~DUPLICATE at FF_X82_Y20_N5
--register power-up is low

A1L524Q = DFFEAS(A1L90, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--A1L519Q is currCount[17]~DUPLICATE at FF_X82_Y21_N53
--register power-up is low

A1L519Q = DFFEAS(A1L110, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--A1L540Q is currCount[31]~DUPLICATE at FF_X82_Y20_N34
--register power-up is low

A1L540Q = DFFEAS(A1L118, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--A1L537Q is currCount[29]~DUPLICATE at FF_X82_Y20_N29
--register power-up is low

A1L537Q = DFFEAS(A1L126, GLOBAL(A1L495), GLOBAL(A1L847),  ,  ,  ,  , A1L560,  );


--A1L542Q is current_state.INT_LEFT~DUPLICATE at FF_X79_Y24_N7
--register power-up is low

A1L542Q = DFFEAS( , GLOBAL(A1L495), GLOBAL(A1L847),  ,  , next_state.INT_LEFT,  ,  , VCC);


