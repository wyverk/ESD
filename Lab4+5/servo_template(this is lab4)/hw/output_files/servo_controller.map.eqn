-- Copyright (C) 2018  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details.
--currCount[25] is currCount[25]
--register power-up is low

currCount[25] = DFFEAS(A1L2, clk, reset_n,  ,  ,  ,  , A1L540,  );


--currCount[28] is currCount[28]
--register power-up is low

currCount[28] = DFFEAS(A1L6, clk, reset_n,  ,  ,  ,  , A1L540,  );


--currCount[27] is currCount[27]
--register power-up is low

currCount[27] = DFFEAS(A1L10, clk, reset_n,  ,  ,  ,  , A1L540,  );


--currCount[26] is currCount[26]
--register power-up is low

currCount[26] = DFFEAS(A1L14, clk, reset_n,  ,  ,  ,  , A1L540,  );


--currCount[23] is currCount[23]
--register power-up is low

currCount[23] = DFFEAS(A1L18, clk, reset_n,  ,  ,  ,  , A1L540,  );


--currCount[24] is currCount[24]
--register power-up is low

currCount[24] = DFFEAS(A1L22, clk, reset_n,  ,  ,  ,  , A1L540,  );


--currCount[22] is currCount[22]
--register power-up is low

currCount[22] = DFFEAS(A1L26, clk, reset_n,  ,  ,  ,  , A1L540,  );


--currCount[11] is currCount[11]
--register power-up is low

currCount[11] = DFFEAS(A1L30, clk, reset_n,  ,  ,  ,  , A1L540,  );


--currCount[14] is currCount[14]
--register power-up is low

currCount[14] = DFFEAS(A1L34, clk, reset_n,  ,  ,  ,  , A1L540,  );


--currCount[13] is currCount[13]
--register power-up is low

currCount[13] = DFFEAS(A1L38, clk, reset_n,  ,  ,  ,  , A1L540,  );


--currCount[12] is currCount[12]
--register power-up is low

currCount[12] = DFFEAS(A1L42, clk, reset_n,  ,  ,  ,  , A1L540,  );


--currCount[10] is currCount[10]
--register power-up is low

currCount[10] = DFFEAS(A1L46, clk, reset_n,  ,  ,  ,  , A1L540,  );


--currCount[9] is currCount[9]
--register power-up is low

currCount[9] = DFFEAS(A1L50, clk, reset_n,  ,  ,  ,  , A1L540,  );


--currCount[8] is currCount[8]
--register power-up is low

currCount[8] = DFFEAS(A1L54, clk, reset_n,  ,  ,  ,  , A1L540,  );


--currCount[3] is currCount[3]
--register power-up is low

currCount[3] = DFFEAS(A1L58, clk, reset_n,  ,  ,  ,  , A1L540,  );


--currCount[2] is currCount[2]
--register power-up is low

currCount[2] = DFFEAS(A1L62, clk, reset_n,  ,  ,  ,  , A1L540,  );


--currCount[1] is currCount[1]
--register power-up is low

currCount[1] = DFFEAS(A1L66, clk, reset_n,  ,  ,  ,  , A1L540,  );


--currCount[0] is currCount[0]
--register power-up is low

currCount[0] = DFFEAS(A1L70, clk, reset_n,  ,  ,  ,  , A1L540,  );


--currCount[5] is currCount[5]
--register power-up is low

currCount[5] = DFFEAS(A1L74, clk, reset_n,  ,  ,  ,  , A1L540,  );


--currCount[7] is currCount[7]
--register power-up is low

currCount[7] = DFFEAS(A1L78, clk, reset_n,  ,  ,  ,  , A1L540,  );


--currCount[6] is currCount[6]
--register power-up is low

currCount[6] = DFFEAS(A1L82, clk, reset_n,  ,  ,  ,  , A1L540,  );


--currCount[4] is currCount[4]
--register power-up is low

currCount[4] = DFFEAS(A1L86, clk, reset_n,  ,  ,  ,  , A1L540,  );


--currCount[21] is currCount[21]
--register power-up is low

currCount[21] = DFFEAS(A1L90, clk, reset_n,  ,  ,  ,  , A1L540,  );


--currCount[20] is currCount[20]
--register power-up is low

currCount[20] = DFFEAS(A1L94, clk, reset_n,  ,  ,  ,  , A1L540,  );


--currCount[19] is currCount[19]
--register power-up is low

currCount[19] = DFFEAS(A1L98, clk, reset_n,  ,  ,  ,  , A1L540,  );


--currCount[18] is currCount[18]
--register power-up is low

currCount[18] = DFFEAS(A1L102, clk, reset_n,  ,  ,  ,  , A1L540,  );


--currCount[16] is currCount[16]
--register power-up is low

currCount[16] = DFFEAS(A1L106, clk, reset_n,  ,  ,  ,  , A1L540,  );


--currCount[17] is currCount[17]
--register power-up is low

currCount[17] = DFFEAS(A1L110, clk, reset_n,  ,  ,  ,  , A1L540,  );


--currCount[15] is currCount[15]
--register power-up is low

currCount[15] = DFFEAS(A1L114, clk, reset_n,  ,  ,  ,  , A1L540,  );


--currCount[31] is currCount[31]
--register power-up is low

currCount[31] = DFFEAS(A1L118, clk, reset_n,  ,  ,  ,  , A1L540,  );


--currCount[30] is currCount[30]
--register power-up is low

currCount[30] = DFFEAS(A1L122, clk, reset_n,  ,  ,  ,  , A1L540,  );


--currCount[29] is currCount[29]
--register power-up is low

currCount[29] = DFFEAS(A1L126, clk, reset_n,  ,  ,  ,  , A1L540,  );


--A1L2 is Add0~1
A1L2_adder_eqn = ( currCount[25] ) + ( GND ) + ( A1L23 );
A1L2 = SUM(A1L2_adder_eqn);

--A1L3 is Add0~2
A1L3_adder_eqn = ( currCount[25] ) + ( GND ) + ( A1L23 );
A1L3 = CARRY(A1L3_adder_eqn);


--A1L6 is Add0~5
A1L6_adder_eqn = ( currCount[28] ) + ( GND ) + ( A1L11 );
A1L6 = SUM(A1L6_adder_eqn);

--A1L7 is Add0~6
A1L7_adder_eqn = ( currCount[28] ) + ( GND ) + ( A1L11 );
A1L7 = CARRY(A1L7_adder_eqn);


--A1L10 is Add0~9
A1L10_adder_eqn = ( currCount[27] ) + ( GND ) + ( A1L15 );
A1L10 = SUM(A1L10_adder_eqn);

--A1L11 is Add0~10
A1L11_adder_eqn = ( currCount[27] ) + ( GND ) + ( A1L15 );
A1L11 = CARRY(A1L11_adder_eqn);


--A1L14 is Add0~13
A1L14_adder_eqn = ( currCount[26] ) + ( GND ) + ( A1L3 );
A1L14 = SUM(A1L14_adder_eqn);

--A1L15 is Add0~14
A1L15_adder_eqn = ( currCount[26] ) + ( GND ) + ( A1L3 );
A1L15 = CARRY(A1L15_adder_eqn);


--A1L18 is Add0~17
A1L18_adder_eqn = ( currCount[23] ) + ( GND ) + ( A1L27 );
A1L18 = SUM(A1L18_adder_eqn);

--A1L19 is Add0~18
A1L19_adder_eqn = ( currCount[23] ) + ( GND ) + ( A1L27 );
A1L19 = CARRY(A1L19_adder_eqn);


--A1L22 is Add0~21
A1L22_adder_eqn = ( currCount[24] ) + ( GND ) + ( A1L19 );
A1L22 = SUM(A1L22_adder_eqn);

--A1L23 is Add0~22
A1L23_adder_eqn = ( currCount[24] ) + ( GND ) + ( A1L19 );
A1L23 = CARRY(A1L23_adder_eqn);


--A1L26 is Add0~25
A1L26_adder_eqn = ( currCount[22] ) + ( GND ) + ( A1L91 );
A1L26 = SUM(A1L26_adder_eqn);

--A1L27 is Add0~26
A1L27_adder_eqn = ( currCount[22] ) + ( GND ) + ( A1L91 );
A1L27 = CARRY(A1L27_adder_eqn);


--A1L30 is Add0~29
A1L30_adder_eqn = ( currCount[11] ) + ( GND ) + ( A1L47 );
A1L30 = SUM(A1L30_adder_eqn);

--A1L31 is Add0~30
A1L31_adder_eqn = ( currCount[11] ) + ( GND ) + ( A1L47 );
A1L31 = CARRY(A1L31_adder_eqn);


--A1L34 is Add0~33
A1L34_adder_eqn = ( currCount[14] ) + ( GND ) + ( A1L39 );
A1L34 = SUM(A1L34_adder_eqn);

--A1L35 is Add0~34
A1L35_adder_eqn = ( currCount[14] ) + ( GND ) + ( A1L39 );
A1L35 = CARRY(A1L35_adder_eqn);


--A1L38 is Add0~37
A1L38_adder_eqn = ( currCount[13] ) + ( GND ) + ( A1L43 );
A1L38 = SUM(A1L38_adder_eqn);

--A1L39 is Add0~38
A1L39_adder_eqn = ( currCount[13] ) + ( GND ) + ( A1L43 );
A1L39 = CARRY(A1L39_adder_eqn);


--A1L42 is Add0~41
A1L42_adder_eqn = ( currCount[12] ) + ( GND ) + ( A1L31 );
A1L42 = SUM(A1L42_adder_eqn);

--A1L43 is Add0~42
A1L43_adder_eqn = ( currCount[12] ) + ( GND ) + ( A1L31 );
A1L43 = CARRY(A1L43_adder_eqn);


--A1L46 is Add0~45
A1L46_adder_eqn = ( currCount[10] ) + ( GND ) + ( A1L51 );
A1L46 = SUM(A1L46_adder_eqn);

--A1L47 is Add0~46
A1L47_adder_eqn = ( currCount[10] ) + ( GND ) + ( A1L51 );
A1L47 = CARRY(A1L47_adder_eqn);


--A1L50 is Add0~49
A1L50_adder_eqn = ( currCount[9] ) + ( GND ) + ( A1L55 );
A1L50 = SUM(A1L50_adder_eqn);

--A1L51 is Add0~50
A1L51_adder_eqn = ( currCount[9] ) + ( GND ) + ( A1L55 );
A1L51 = CARRY(A1L51_adder_eqn);


--A1L54 is Add0~53
A1L54_adder_eqn = ( currCount[8] ) + ( GND ) + ( A1L79 );
A1L54 = SUM(A1L54_adder_eqn);

--A1L55 is Add0~54
A1L55_adder_eqn = ( currCount[8] ) + ( GND ) + ( A1L79 );
A1L55 = CARRY(A1L55_adder_eqn);


--A1L58 is Add0~57
A1L58_adder_eqn = ( currCount[3] ) + ( GND ) + ( A1L63 );
A1L58 = SUM(A1L58_adder_eqn);

--A1L59 is Add0~58
A1L59_adder_eqn = ( currCount[3] ) + ( GND ) + ( A1L63 );
A1L59 = CARRY(A1L59_adder_eqn);


--A1L62 is Add0~61
A1L62_adder_eqn = ( currCount[2] ) + ( GND ) + ( A1L67 );
A1L62 = SUM(A1L62_adder_eqn);

--A1L63 is Add0~62
A1L63_adder_eqn = ( currCount[2] ) + ( GND ) + ( A1L67 );
A1L63 = CARRY(A1L63_adder_eqn);


--A1L66 is Add0~65
A1L66_adder_eqn = ( currCount[1] ) + ( GND ) + ( A1L71 );
A1L66 = SUM(A1L66_adder_eqn);

--A1L67 is Add0~66
A1L67_adder_eqn = ( currCount[1] ) + ( GND ) + ( A1L71 );
A1L67 = CARRY(A1L67_adder_eqn);


--A1L70 is Add0~69
A1L70_adder_eqn = ( currCount[0] ) + ( VCC ) + ( !VCC );
A1L70 = SUM(A1L70_adder_eqn);

--A1L71 is Add0~70
A1L71_adder_eqn = ( currCount[0] ) + ( VCC ) + ( !VCC );
A1L71 = CARRY(A1L71_adder_eqn);


--A1L74 is Add0~73
A1L74_adder_eqn = ( currCount[5] ) + ( GND ) + ( A1L87 );
A1L74 = SUM(A1L74_adder_eqn);

--A1L75 is Add0~74
A1L75_adder_eqn = ( currCount[5] ) + ( GND ) + ( A1L87 );
A1L75 = CARRY(A1L75_adder_eqn);


--A1L78 is Add0~77
A1L78_adder_eqn = ( currCount[7] ) + ( GND ) + ( A1L83 );
A1L78 = SUM(A1L78_adder_eqn);

--A1L79 is Add0~78
A1L79_adder_eqn = ( currCount[7] ) + ( GND ) + ( A1L83 );
A1L79 = CARRY(A1L79_adder_eqn);


--A1L82 is Add0~81
A1L82_adder_eqn = ( currCount[6] ) + ( GND ) + ( A1L75 );
A1L82 = SUM(A1L82_adder_eqn);

--A1L83 is Add0~82
A1L83_adder_eqn = ( currCount[6] ) + ( GND ) + ( A1L75 );
A1L83 = CARRY(A1L83_adder_eqn);


--A1L86 is Add0~85
A1L86_adder_eqn = ( currCount[4] ) + ( GND ) + ( A1L59 );
A1L86 = SUM(A1L86_adder_eqn);

--A1L87 is Add0~86
A1L87_adder_eqn = ( currCount[4] ) + ( GND ) + ( A1L59 );
A1L87 = CARRY(A1L87_adder_eqn);


--A1L90 is Add0~89
A1L90_adder_eqn = ( currCount[21] ) + ( GND ) + ( A1L95 );
A1L90 = SUM(A1L90_adder_eqn);

--A1L91 is Add0~90
A1L91_adder_eqn = ( currCount[21] ) + ( GND ) + ( A1L95 );
A1L91 = CARRY(A1L91_adder_eqn);


--A1L94 is Add0~93
A1L94_adder_eqn = ( currCount[20] ) + ( GND ) + ( A1L99 );
A1L94 = SUM(A1L94_adder_eqn);

--A1L95 is Add0~94
A1L95_adder_eqn = ( currCount[20] ) + ( GND ) + ( A1L99 );
A1L95 = CARRY(A1L95_adder_eqn);


--A1L98 is Add0~97
A1L98_adder_eqn = ( currCount[19] ) + ( GND ) + ( A1L103 );
A1L98 = SUM(A1L98_adder_eqn);

--A1L99 is Add0~98
A1L99_adder_eqn = ( currCount[19] ) + ( GND ) + ( A1L103 );
A1L99 = CARRY(A1L99_adder_eqn);


--A1L102 is Add0~101
A1L102_adder_eqn = ( currCount[18] ) + ( GND ) + ( A1L111 );
A1L102 = SUM(A1L102_adder_eqn);

--A1L103 is Add0~102
A1L103_adder_eqn = ( currCount[18] ) + ( GND ) + ( A1L111 );
A1L103 = CARRY(A1L103_adder_eqn);


--A1L106 is Add0~105
A1L106_adder_eqn = ( currCount[16] ) + ( GND ) + ( A1L115 );
A1L106 = SUM(A1L106_adder_eqn);

--A1L107 is Add0~106
A1L107_adder_eqn = ( currCount[16] ) + ( GND ) + ( A1L115 );
A1L107 = CARRY(A1L107_adder_eqn);


--A1L110 is Add0~109
A1L110_adder_eqn = ( currCount[17] ) + ( GND ) + ( A1L107 );
A1L110 = SUM(A1L110_adder_eqn);

--A1L111 is Add0~110
A1L111_adder_eqn = ( currCount[17] ) + ( GND ) + ( A1L107 );
A1L111 = CARRY(A1L111_adder_eqn);


--A1L114 is Add0~113
A1L114_adder_eqn = ( currCount[15] ) + ( GND ) + ( A1L35 );
A1L114 = SUM(A1L114_adder_eqn);

--A1L115 is Add0~114
A1L115_adder_eqn = ( currCount[15] ) + ( GND ) + ( A1L35 );
A1L115 = CARRY(A1L115_adder_eqn);


--A1L246 is Add2~1
A1L246_adder_eqn = ( angleCount[31] ) + ( VCC ) + ( A1L355 );
A1L246 = SUM(A1L246_adder_eqn);


--A1L130 is Add1~1
A1L130_adder_eqn = ( angleCount[31] ) + ( GND ) + ( A1L239 );
A1L130 = SUM(A1L130_adder_eqn);


--A1L118 is Add0~117
A1L118_adder_eqn = ( currCount[31] ) + ( GND ) + ( A1L123 );
A1L118 = SUM(A1L118_adder_eqn);


--A1L122 is Add0~121
A1L122_adder_eqn = ( currCount[30] ) + ( GND ) + ( A1L127 );
A1L122 = SUM(A1L122_adder_eqn);

--A1L123 is Add0~122
A1L123_adder_eqn = ( currCount[30] ) + ( GND ) + ( A1L127 );
A1L123 = CARRY(A1L123_adder_eqn);


--A1L126 is Add0~125
A1L126_adder_eqn = ( currCount[29] ) + ( GND ) + ( A1L7 );
A1L126 = SUM(A1L126_adder_eqn);

--A1L127 is Add0~126
A1L127_adder_eqn = ( currCount[29] ) + ( GND ) + ( A1L7 );
A1L127 = CARRY(A1L127_adder_eqn);


--A1L134 is Add1~5
A1L134_adder_eqn = ( A1L467 ) + ( GND ) + ( A1L155 );
A1L134 = SUM(A1L134_adder_eqn);

--A1L135 is Add1~6
A1L135_adder_eqn = ( A1L467 ) + ( GND ) + ( A1L155 );
A1L135 = CARRY(A1L135_adder_eqn);


--A1L250 is Add2~5
A1L250_adder_eqn = ( A1L467 ) + ( VCC ) + ( A1L271 );
A1L250 = SUM(A1L250_adder_eqn);

--A1L251 is Add2~6
A1L251_adder_eqn = ( A1L467 ) + ( VCC ) + ( A1L271 );
A1L251 = CARRY(A1L251_adder_eqn);


--A1L138 is Add1~9
A1L138_adder_eqn = ( A1L479 ) + ( GND ) + ( A1L143 );
A1L138 = SUM(A1L138_adder_eqn);

--A1L139 is Add1~10
A1L139_adder_eqn = ( A1L479 ) + ( GND ) + ( A1L143 );
A1L139 = CARRY(A1L139_adder_eqn);


--A1L254 is Add2~9
A1L254_adder_eqn = ( A1L479 ) + ( VCC ) + ( A1L259 );
A1L254 = SUM(A1L254_adder_eqn);

--A1L255 is Add2~10
A1L255_adder_eqn = ( A1L479 ) + ( VCC ) + ( A1L259 );
A1L255 = CARRY(A1L255_adder_eqn);


--A1L142 is Add1~13
A1L142_adder_eqn = ( A1L475 ) + ( GND ) + ( A1L147 );
A1L142 = SUM(A1L142_adder_eqn);

--A1L143 is Add1~14
A1L143_adder_eqn = ( A1L475 ) + ( GND ) + ( A1L147 );
A1L143 = CARRY(A1L143_adder_eqn);


--A1L258 is Add2~13
A1L258_adder_eqn = ( A1L475 ) + ( VCC ) + ( A1L263 );
A1L258 = SUM(A1L258_adder_eqn);

--A1L259 is Add2~14
A1L259_adder_eqn = ( A1L475 ) + ( VCC ) + ( A1L263 );
A1L259 = CARRY(A1L259_adder_eqn);


--A1L146 is Add1~17
A1L146_adder_eqn = ( A1L471 ) + ( GND ) + ( A1L135 );
A1L146 = SUM(A1L146_adder_eqn);

--A1L147 is Add1~18
A1L147_adder_eqn = ( A1L471 ) + ( GND ) + ( A1L135 );
A1L147 = CARRY(A1L147_adder_eqn);


--A1L262 is Add2~17
A1L262_adder_eqn = ( A1L471 ) + ( VCC ) + ( A1L251 );
A1L262 = SUM(A1L262_adder_eqn);

--A1L263 is Add2~18
A1L263_adder_eqn = ( A1L471 ) + ( VCC ) + ( A1L251 );
A1L263 = CARRY(A1L263_adder_eqn);


--A1L150 is Add1~21
A1L150_adder_eqn = ( A1L459 ) + ( GND ) + ( A1L159 );
A1L150 = SUM(A1L150_adder_eqn);

--A1L151 is Add1~22
A1L151_adder_eqn = ( A1L459 ) + ( GND ) + ( A1L159 );
A1L151 = CARRY(A1L151_adder_eqn);


--A1L266 is Add2~21
A1L266_adder_eqn = ( A1L459 ) + ( VCC ) + ( A1L275 );
A1L266 = SUM(A1L266_adder_eqn);

--A1L267 is Add2~22
A1L267_adder_eqn = ( A1L459 ) + ( VCC ) + ( A1L275 );
A1L267 = CARRY(A1L267_adder_eqn);


--A1L154 is Add1~25
A1L154_adder_eqn = ( A1L463 ) + ( GND ) + ( A1L151 );
A1L154 = SUM(A1L154_adder_eqn);

--A1L155 is Add1~26
A1L155_adder_eqn = ( A1L463 ) + ( GND ) + ( A1L151 );
A1L155 = CARRY(A1L155_adder_eqn);


--A1L270 is Add2~25
A1L270_adder_eqn = ( A1L463 ) + ( VCC ) + ( A1L267 );
A1L270 = SUM(A1L270_adder_eqn);

--A1L271 is Add2~26
A1L271_adder_eqn = ( A1L463 ) + ( VCC ) + ( A1L267 );
A1L271 = CARRY(A1L271_adder_eqn);


--A1L158 is Add1~29
A1L158_adder_eqn = ( A1L455 ) + ( GND ) + ( A1L211 );
A1L158 = SUM(A1L158_adder_eqn);

--A1L159 is Add1~30
A1L159_adder_eqn = ( A1L455 ) + ( GND ) + ( A1L211 );
A1L159 = CARRY(A1L159_adder_eqn);


--A1L274 is Add2~29
A1L274_adder_eqn = ( A1L455 ) + ( VCC ) + ( A1L327 );
A1L274 = SUM(A1L274_adder_eqn);

--A1L275 is Add2~30
A1L275_adder_eqn = ( A1L455 ) + ( VCC ) + ( A1L327 );
A1L275 = CARRY(A1L275_adder_eqn);


--A1L162 is Add1~33
A1L162_adder_eqn = ( A1L411 ) + ( GND ) + ( A1L179 );
A1L162 = SUM(A1L162_adder_eqn);

--A1L163 is Add1~34
A1L163_adder_eqn = ( A1L411 ) + ( GND ) + ( A1L179 );
A1L163 = CARRY(A1L163_adder_eqn);


--A1L278 is Add2~33
A1L278_adder_eqn = ( A1L411 ) + ( VCC ) + ( A1L295 );
A1L278 = SUM(A1L278_adder_eqn);

--A1L279 is Add2~34
A1L279_adder_eqn = ( A1L411 ) + ( VCC ) + ( A1L295 );
A1L279 = CARRY(A1L279_adder_eqn);


--A1L166 is Add1~37
A1L166_adder_eqn = ( A1L423 ) + ( GND ) + ( A1L171 );
A1L166 = SUM(A1L166_adder_eqn);

--A1L167 is Add1~38
A1L167_adder_eqn = ( A1L423 ) + ( GND ) + ( A1L171 );
A1L167 = CARRY(A1L167_adder_eqn);


--A1L282 is Add2~37
A1L282_adder_eqn = ( A1L423 ) + ( VCC ) + ( A1L287 );
A1L282 = SUM(A1L282_adder_eqn);

--A1L283 is Add2~38
A1L283_adder_eqn = ( A1L423 ) + ( VCC ) + ( A1L287 );
A1L283 = CARRY(A1L283_adder_eqn);


--A1L170 is Add1~41
A1L170_adder_eqn = ( A1L419 ) + ( GND ) + ( A1L175 );
A1L170 = SUM(A1L170_adder_eqn);

--A1L171 is Add1~42
A1L171_adder_eqn = ( A1L419 ) + ( GND ) + ( A1L175 );
A1L171 = CARRY(A1L171_adder_eqn);


--A1L286 is Add2~41
A1L286_adder_eqn = ( A1L419 ) + ( VCC ) + ( A1L291 );
A1L286 = SUM(A1L286_adder_eqn);

--A1L287 is Add2~42
A1L287_adder_eqn = ( A1L419 ) + ( VCC ) + ( A1L291 );
A1L287 = CARRY(A1L287_adder_eqn);


--A1L174 is Add1~45
A1L174_adder_eqn = ( A1L415 ) + ( GND ) + ( A1L163 );
A1L174 = SUM(A1L174_adder_eqn);

--A1L175 is Add1~46
A1L175_adder_eqn = ( A1L415 ) + ( GND ) + ( A1L163 );
A1L175 = CARRY(A1L175_adder_eqn);


--A1L290 is Add2~45
A1L290_adder_eqn = ( A1L415 ) + ( VCC ) + ( A1L279 );
A1L290 = SUM(A1L290_adder_eqn);

--A1L291 is Add2~46
A1L291_adder_eqn = ( A1L415 ) + ( VCC ) + ( A1L279 );
A1L291 = CARRY(A1L291_adder_eqn);


--A1L178 is Add1~49
A1L178_adder_eqn = ( A1L407 ) + ( GND ) + ( A1L183 );
A1L178 = SUM(A1L178_adder_eqn);

--A1L179 is Add1~50
A1L179_adder_eqn = ( A1L407 ) + ( GND ) + ( A1L183 );
A1L179 = CARRY(A1L179_adder_eqn);


--A1L294 is Add2~49
A1L294_adder_eqn = ( A1L407 ) + ( VCC ) + ( A1L299 );
A1L294 = SUM(A1L294_adder_eqn);

--A1L295 is Add2~50
A1L295_adder_eqn = ( A1L407 ) + ( VCC ) + ( A1L299 );
A1L295 = CARRY(A1L295_adder_eqn);


--A1L182 is Add1~53
A1L182_adder_eqn = ( A1L400 ) + ( VCC ) + ( A1L187 );
A1L182 = SUM(A1L182_adder_eqn);

--A1L183 is Add1~54
A1L183_adder_eqn = ( A1L400 ) + ( VCC ) + ( A1L187 );
A1L183 = CARRY(A1L183_adder_eqn);


--A1L298 is Add2~53
A1L298_adder_eqn = ( A1L400 ) + ( GND ) + ( A1L303 );
A1L298 = SUM(A1L298_adder_eqn);

--A1L299 is Add2~54
A1L299_adder_eqn = ( A1L400 ) + ( GND ) + ( A1L303 );
A1L299 = CARRY(A1L299_adder_eqn);


--A1L186 is Add1~57
A1L186_adder_eqn = ( A1L396 ) + ( VCC ) + ( A1L199 );
A1L186 = SUM(A1L186_adder_eqn);

--A1L187 is Add1~58
A1L187_adder_eqn = ( A1L396 ) + ( VCC ) + ( A1L199 );
A1L187 = CARRY(A1L187_adder_eqn);


--A1L302 is Add2~57
A1L302_adder_eqn = ( A1L396 ) + ( GND ) + ( A1L315 );
A1L302 = SUM(A1L302_adder_eqn);

--A1L303 is Add2~58
A1L303_adder_eqn = ( A1L396 ) + ( GND ) + ( A1L315 );
A1L303 = CARRY(A1L303_adder_eqn);


--A1L190 is Add1~61
A1L190_adder_eqn = ( A1L376 ) + ( VCC ) + ( !VCC );
A1L190 = SUM(A1L190_adder_eqn);

--A1L191 is Add1~62
A1L191_adder_eqn = ( A1L376 ) + ( VCC ) + ( !VCC );
A1L191 = CARRY(A1L191_adder_eqn);


--A1L306 is Add2~61
A1L306_adder_eqn = ( A1L376 ) + ( VCC ) + ( !VCC );
A1L306 = SUM(A1L306_adder_eqn);

--A1L307 is Add2~62
A1L307_adder_eqn = ( A1L376 ) + ( VCC ) + ( !VCC );
A1L307 = CARRY(A1L307_adder_eqn);


--A1L194 is Add1~65
A1L194_adder_eqn = ( A1L384 ) + ( VCC ) + ( A1L207 );
A1L194 = SUM(A1L194_adder_eqn);

--A1L195 is Add1~66
A1L195_adder_eqn = ( A1L384 ) + ( VCC ) + ( A1L207 );
A1L195 = CARRY(A1L195_adder_eqn);


--A1L310 is Add2~65
A1L310_adder_eqn = ( A1L384 ) + ( GND ) + ( A1L323 );
A1L310 = SUM(A1L310_adder_eqn);

--A1L311 is Add2~66
A1L311_adder_eqn = ( A1L384 ) + ( GND ) + ( A1L323 );
A1L311 = CARRY(A1L311_adder_eqn);


--A1L198 is Add1~69
A1L198_adder_eqn = ( A1L392 ) + ( VCC ) + ( A1L203 );
A1L198 = SUM(A1L198_adder_eqn);

--A1L199 is Add1~70
A1L199_adder_eqn = ( A1L392 ) + ( VCC ) + ( A1L203 );
A1L199 = CARRY(A1L199_adder_eqn);


--A1L314 is Add2~69
A1L314_adder_eqn = ( A1L392 ) + ( GND ) + ( A1L319 );
A1L314 = SUM(A1L314_adder_eqn);

--A1L315 is Add2~70
A1L315_adder_eqn = ( A1L392 ) + ( GND ) + ( A1L319 );
A1L315 = CARRY(A1L315_adder_eqn);


--A1L202 is Add1~73
A1L202_adder_eqn = ( A1L388 ) + ( VCC ) + ( A1L195 );
A1L202 = SUM(A1L202_adder_eqn);

--A1L203 is Add1~74
A1L203_adder_eqn = ( A1L388 ) + ( VCC ) + ( A1L195 );
A1L203 = CARRY(A1L203_adder_eqn);


--A1L318 is Add2~73
A1L318_adder_eqn = ( A1L388 ) + ( GND ) + ( A1L311 );
A1L318 = SUM(A1L318_adder_eqn);

--A1L319 is Add2~74
A1L319_adder_eqn = ( A1L388 ) + ( GND ) + ( A1L311 );
A1L319 = CARRY(A1L319_adder_eqn);


--A1L206 is Add1~77
A1L206_adder_eqn = ( A1L380 ) + ( GND ) + ( A1L191 );
A1L206 = SUM(A1L206_adder_eqn);

--A1L207 is Add1~78
A1L207_adder_eqn = ( A1L380 ) + ( GND ) + ( A1L191 );
A1L207 = CARRY(A1L207_adder_eqn);


--A1L322 is Add2~77
A1L322_adder_eqn = ( A1L380 ) + ( VCC ) + ( A1L307 );
A1L322 = SUM(A1L322_adder_eqn);

--A1L323 is Add2~78
A1L323_adder_eqn = ( A1L380 ) + ( VCC ) + ( A1L307 );
A1L323 = CARRY(A1L323_adder_eqn);


--A1L210 is Add1~81
A1L210_adder_eqn = ( A1L451 ) + ( GND ) + ( A1L215 );
A1L210 = SUM(A1L210_adder_eqn);

--A1L211 is Add1~82
A1L211_adder_eqn = ( A1L451 ) + ( GND ) + ( A1L215 );
A1L211 = CARRY(A1L211_adder_eqn);


--A1L326 is Add2~81
A1L326_adder_eqn = ( A1L451 ) + ( VCC ) + ( A1L331 );
A1L326 = SUM(A1L326_adder_eqn);

--A1L327 is Add2~82
A1L327_adder_eqn = ( A1L451 ) + ( VCC ) + ( A1L331 );
A1L327 = CARRY(A1L327_adder_eqn);


--A1L214 is Add1~85
A1L214_adder_eqn = ( A1L447 ) + ( GND ) + ( A1L219 );
A1L214 = SUM(A1L214_adder_eqn);

--A1L215 is Add1~86
A1L215_adder_eqn = ( A1L447 ) + ( GND ) + ( A1L219 );
A1L215 = CARRY(A1L215_adder_eqn);


--A1L330 is Add2~85
A1L330_adder_eqn = ( A1L447 ) + ( VCC ) + ( A1L335 );
A1L330 = SUM(A1L330_adder_eqn);

--A1L331 is Add2~86
A1L331_adder_eqn = ( A1L447 ) + ( VCC ) + ( A1L335 );
A1L331 = CARRY(A1L331_adder_eqn);


--A1L218 is Add1~89
A1L218_adder_eqn = ( A1L443 ) + ( GND ) + ( A1L223 );
A1L218 = SUM(A1L218_adder_eqn);

--A1L219 is Add1~90
A1L219_adder_eqn = ( A1L443 ) + ( GND ) + ( A1L223 );
A1L219 = CARRY(A1L219_adder_eqn);


--A1L334 is Add2~89
A1L334_adder_eqn = ( A1L443 ) + ( VCC ) + ( A1L339 );
A1L334 = SUM(A1L334_adder_eqn);

--A1L335 is Add2~90
A1L335_adder_eqn = ( A1L443 ) + ( VCC ) + ( A1L339 );
A1L335 = CARRY(A1L335_adder_eqn);


--A1L222 is Add1~93
A1L222_adder_eqn = ( A1L439 ) + ( GND ) + ( A1L231 );
A1L222 = SUM(A1L222_adder_eqn);

--A1L223 is Add1~94
A1L223_adder_eqn = ( A1L439 ) + ( GND ) + ( A1L231 );
A1L223 = CARRY(A1L223_adder_eqn);


--A1L338 is Add2~93
A1L338_adder_eqn = ( A1L439 ) + ( VCC ) + ( A1L347 );
A1L338 = SUM(A1L338_adder_eqn);

--A1L339 is Add2~94
A1L339_adder_eqn = ( A1L439 ) + ( VCC ) + ( A1L347 );
A1L339 = CARRY(A1L339_adder_eqn);


--A1L226 is Add1~97
A1L226_adder_eqn = ( A1L431 ) + ( GND ) + ( A1L235 );
A1L226 = SUM(A1L226_adder_eqn);

--A1L227 is Add1~98
A1L227_adder_eqn = ( A1L431 ) + ( GND ) + ( A1L235 );
A1L227 = CARRY(A1L227_adder_eqn);


--A1L342 is Add2~97
A1L342_adder_eqn = ( A1L431 ) + ( VCC ) + ( A1L351 );
A1L342 = SUM(A1L342_adder_eqn);

--A1L343 is Add2~98
A1L343_adder_eqn = ( A1L431 ) + ( VCC ) + ( A1L351 );
A1L343 = CARRY(A1L343_adder_eqn);


--A1L230 is Add1~101
A1L230_adder_eqn = ( A1L435 ) + ( GND ) + ( A1L227 );
A1L230 = SUM(A1L230_adder_eqn);

--A1L231 is Add1~102
A1L231_adder_eqn = ( A1L435 ) + ( GND ) + ( A1L227 );
A1L231 = CARRY(A1L231_adder_eqn);


--A1L346 is Add2~101
A1L346_adder_eqn = ( A1L435 ) + ( VCC ) + ( A1L343 );
A1L346 = SUM(A1L346_adder_eqn);

--A1L347 is Add2~102
A1L347_adder_eqn = ( A1L435 ) + ( VCC ) + ( A1L343 );
A1L347 = CARRY(A1L347_adder_eqn);


--A1L234 is Add1~105
A1L234_adder_eqn = ( A1L427 ) + ( GND ) + ( A1L167 );
A1L234 = SUM(A1L234_adder_eqn);

--A1L235 is Add1~106
A1L235_adder_eqn = ( A1L427 ) + ( GND ) + ( A1L167 );
A1L235 = CARRY(A1L235_adder_eqn);


--A1L350 is Add2~105
A1L350_adder_eqn = ( A1L427 ) + ( VCC ) + ( A1L283 );
A1L350 = SUM(A1L350_adder_eqn);

--A1L351 is Add2~106
A1L351_adder_eqn = ( A1L427 ) + ( VCC ) + ( A1L283 );
A1L351 = CARRY(A1L351_adder_eqn);


--A1L354 is Add2~109
A1L354_adder_eqn = ( A1L487 ) + ( VCC ) + ( A1L359 );
A1L354 = SUM(A1L354_adder_eqn);

--A1L355 is Add2~110
A1L355_adder_eqn = ( A1L487 ) + ( VCC ) + ( A1L359 );
A1L355 = CARRY(A1L355_adder_eqn);


--A1L238 is Add1~109
A1L238_adder_eqn = ( A1L487 ) + ( GND ) + ( A1L243 );
A1L238 = SUM(A1L238_adder_eqn);

--A1L239 is Add1~110
A1L239_adder_eqn = ( A1L487 ) + ( GND ) + ( A1L243 );
A1L239 = CARRY(A1L239_adder_eqn);


--A1L242 is Add1~113
A1L242_adder_eqn = ( A1L483 ) + ( GND ) + ( A1L139 );
A1L242 = SUM(A1L242_adder_eqn);

--A1L243 is Add1~114
A1L243_adder_eqn = ( A1L483 ) + ( GND ) + ( A1L139 );
A1L243 = CARRY(A1L243_adder_eqn);


--A1L358 is Add2~113
A1L358_adder_eqn = ( A1L483 ) + ( VCC ) + ( A1L255 );
A1L358 = SUM(A1L358_adder_eqn);

--A1L359 is Add2~114
A1L359_adder_eqn = ( A1L483 ) + ( VCC ) + ( A1L255 );
A1L359 = CARRY(A1L359_adder_eqn);


--writedata[31] is writedata[31]
writedata[31] = INPUT();


--out_wave_export is out_wave_export
out_wave_export = OUTPUT(out_wave);


--irq is irq
irq = OUTPUT(A1L531Q);


--out_wave is out_wave
--register power-up is low

out_wave = DFFEAS(A1L744, clk, reset_n,  ,  ,  ,  ,  ,  );


--A1L531Q is irq~reg0
--register power-up is low

A1L531Q = DFFEAS(A1L530, clk, reset_n,  ,  ,  ,  ,  ,  );


--current_state.INT_RIGHT is current_state.INT_RIGHT
--register power-up is low

current_state.INT_RIGHT = DFFEAS(next_state.INT_RIGHT, clk, reset_n,  ,  ,  ,  ,  ,  );


--current_state.INT_LEFT is current_state.INT_LEFT
--register power-up is low

current_state.INT_LEFT = DFFEAS(next_state.INT_LEFT, clk, reset_n,  ,  ,  ,  ,  ,  );


--A1L741 is out_wave~0
A1L741 = (!current_state.INT_RIGHT & !current_state.INT_LEFT);


--A1L618 is LessThan3~0
A1L618 = ( currCount[26] & ( A1L471 & ( (!currCount[28] & (!A1L479 & (!currCount[27] $ (A1L475)))) # (currCount[28] & (A1L479 & (!currCount[27] $ (A1L475)))) ) ) ) # ( !currCount[26] & ( !A1L471 & ( (!currCount[28] & (!A1L479 & (!currCount[27] $ (A1L475)))) # (currCount[28] & (A1L479 & (!currCount[27] $ (A1L475)))) ) ) );


--A1L619 is LessThan3~1
A1L619 = !currCount[24] $ (!A1L463);


--A1L620 is LessThan3~2
A1L620 = ( A1L459 & ( !A1L619 & ( (A1L618 & (currCount[23] & (!currCount[25] $ (A1L467)))) ) ) ) # ( !A1L459 & ( !A1L619 & ( (A1L618 & (!currCount[23] & (!currCount[25] $ (A1L467)))) ) ) );


--A1L621 is LessThan3~3
A1L621 = !currCount[22] $ (!A1L455);


--A1L622 is LessThan3~4
A1L622 = ( currCount[12] & ( A1L415 & ( (!currCount[14] & (!A1L423 & (!currCount[13] $ (A1L419)))) # (currCount[14] & (A1L423 & (!currCount[13] $ (A1L419)))) ) ) ) # ( !currCount[12] & ( !A1L415 & ( (!currCount[14] & (!A1L423 & (!currCount[13] $ (A1L419)))) # (currCount[14] & (A1L423 & (!currCount[13] $ (A1L419)))) ) ) );


--A1L623 is LessThan3~5
A1L623 = ( A1L407 & ( (A1L622 & (currCount[10] & (!currCount[11] $ (A1L411)))) ) ) # ( !A1L407 & ( (A1L622 & (!currCount[10] & (!currCount[11] $ (A1L411)))) ) );


--A1L624 is LessThan3~6
A1L624 = !currCount[9] $ (!A1L400);


--A1L625 is LessThan3~7
A1L625 = !currCount[8] $ (!A1L396);


--A1L626 is LessThan3~8
A1L626 = (!currCount[1] & (((!currCount[0] & A1L364)) # (A1L368))) # (currCount[1] & (A1L368 & (!currCount[0] & A1L364)));


--A1L627 is LessThan3~9
A1L627 = ( A1L626 & ( (!currCount[3] & (((!currCount[2]) # (A1L372)) # (A1L376))) # (currCount[3] & (A1L376 & ((!currCount[2]) # (A1L372)))) ) ) # ( !A1L626 & ( (!currCount[3] & (((!currCount[2] & A1L372)) # (A1L376))) # (currCount[3] & (A1L376 & (!currCount[2] & A1L372))) ) );


--A1L628 is LessThan3~10
A1L628 = (!currCount[7] & (!A1L392 & (!currCount[6] $ (A1L388)))) # (currCount[7] & (A1L392 & (!currCount[6] $ (A1L388))));


--A1L629 is LessThan3~11
A1L629 = ( A1L380 & ( (A1L628 & (currCount[4] & (!currCount[5] $ (A1L384)))) ) ) # ( !A1L380 & ( (A1L628 & (!currCount[4] & (!currCount[5] $ (A1L384)))) ) );


--A1L630 is LessThan3~12
A1L630 = (!currCount[7] & (((!currCount[6] & A1L388)) # (A1L392))) # (currCount[7] & (A1L392 & (!currCount[6] & A1L388)));


--A1L631 is LessThan3~13
A1L631 = ( A1L380 & ( !A1L630 & ( (!A1L628) # ((!currCount[5] & (!A1L384 & currCount[4])) # (currCount[5] & ((!A1L384) # (currCount[4])))) ) ) ) # ( !A1L380 & ( !A1L630 & ( ((!A1L384) # (!A1L628)) # (currCount[5]) ) ) );


--A1L632 is LessThan3~14
A1L632 = ( A1L629 & ( A1L631 & ( (A1L623 & (!A1L624 & (!A1L625 & A1L627))) ) ) ) # ( A1L629 & ( !A1L631 & ( (A1L623 & (!A1L624 & !A1L625)) ) ) ) # ( !A1L629 & ( !A1L631 & ( (A1L623 & (!A1L624 & !A1L625)) ) ) );


--A1L633 is LessThan3~15
A1L633 = ( currCount[12] & ( A1L415 & ( (!currCount[14] & (((!currCount[13] & A1L419)) # (A1L423))) # (currCount[14] & (A1L423 & (!currCount[13] & A1L419))) ) ) ) # ( !currCount[12] & ( A1L415 & ( (!currCount[14] & (((!currCount[13]) # (A1L419)) # (A1L423))) # (currCount[14] & (A1L423 & ((!currCount[13]) # (A1L419)))) ) ) ) # ( currCount[12] & ( !A1L415 & ( (!currCount[14] & (((!currCount[13] & A1L419)) # (A1L423))) # (currCount[14] & (A1L423 & (!currCount[13] & A1L419))) ) ) ) # ( !currCount[12] & ( !A1L415 & ( (!currCount[14] & (((!currCount[13] & A1L419)) # (A1L423))) # (currCount[14] & (A1L423 & (!currCount[13] & A1L419))) ) ) );


--A1L634 is LessThan3~16
A1L634 = ( A1L407 & ( !A1L633 & ( (!A1L622) # ((!currCount[11] & (!A1L411 & currCount[10])) # (currCount[11] & ((!A1L411) # (currCount[10])))) ) ) ) # ( !A1L407 & ( !A1L633 & ( ((!A1L411) # (!A1L622)) # (currCount[11]) ) ) );


--A1L635 is LessThan3~17
A1L635 = ( A1L396 & ( A1L634 & ( (!A1L623) # ((!currCount[9] & (!A1L400 & currCount[8])) # (currCount[9] & ((!A1L400) # (currCount[8])))) ) ) ) # ( !A1L396 & ( A1L634 & ( ((!A1L400) # (!A1L623)) # (currCount[9]) ) ) );


--A1L636 is LessThan3~18
A1L636 = ( currCount[19] & ( A1L443 & ( (!currCount[21] & (!A1L451 & (!currCount[20] $ (A1L447)))) # (currCount[21] & (A1L451 & (!currCount[20] $ (A1L447)))) ) ) ) # ( !currCount[19] & ( !A1L443 & ( (!currCount[21] & (!A1L451 & (!currCount[20] $ (A1L447)))) # (currCount[21] & (A1L451 & (!currCount[20] $ (A1L447)))) ) ) );


--A1L637 is LessThan3~19
A1L637 = !currCount[18] $ (!A1L439);


--A1L638 is LessThan3~20
A1L638 = !currCount[17] $ (!A1L435);


--A1L639 is LessThan3~21
A1L639 = !currCount[15] $ (!A1L427);


--A1L640 is LessThan3~22
A1L640 = ( !A1L638 & ( !A1L639 & ( (A1L636 & (!A1L637 & (!currCount[16] $ (A1L431)))) ) ) );


--A1L641 is LessThan3~23
A1L641 = (A1L636 & (!A1L637 & !A1L638));


--A1L642 is LessThan3~24
A1L642 = ( currCount[19] & ( A1L443 & ( (!currCount[21] & (((!currCount[20] & A1L447)) # (A1L451))) # (currCount[21] & (A1L451 & (!currCount[20] & A1L447))) ) ) ) # ( !currCount[19] & ( A1L443 & ( (!currCount[21] & (((!currCount[20]) # (A1L447)) # (A1L451))) # (currCount[21] & (A1L451 & ((!currCount[20]) # (A1L447)))) ) ) ) # ( currCount[19] & ( !A1L443 & ( (!currCount[21] & (((!currCount[20] & A1L447)) # (A1L451))) # (currCount[21] & (A1L451 & (!currCount[20] & A1L447))) ) ) ) # ( !currCount[19] & ( !A1L443 & ( (!currCount[21] & (((!currCount[20] & A1L447)) # (A1L451))) # (currCount[21] & (A1L451 & (!currCount[20] & A1L447))) ) ) );


--A1L643 is LessThan3~25
A1L643 = ( A1L435 & ( !A1L642 & ( (!A1L636) # ((!currCount[18] & (!A1L439 & currCount[17])) # (currCount[18] & ((!A1L439) # (currCount[17])))) ) ) ) # ( !A1L435 & ( !A1L642 & ( ((!A1L439) # (!A1L636)) # (currCount[18]) ) ) );


--A1L644 is LessThan3~26
A1L644 = ( A1L427 & ( A1L643 & ( (!A1L641) # ((!currCount[16] & (!A1L431 & currCount[15])) # (currCount[16] & ((!A1L431) # (currCount[15])))) ) ) ) # ( !A1L427 & ( A1L643 & ( ((!A1L431) # (!A1L641)) # (currCount[16]) ) ) );


--A1L645 is LessThan3~27
A1L645 = ( A1L640 & ( A1L644 & ( (A1L620 & (!A1L621 & ((!A1L635) # (A1L632)))) ) ) ) # ( A1L640 & ( !A1L644 & ( (A1L620 & !A1L621) ) ) ) # ( !A1L640 & ( !A1L644 & ( (A1L620 & !A1L621) ) ) );


--A1L646 is LessThan3~28
A1L646 = (A1L618 & (!A1L619 & (!currCount[25] $ (A1L467))));


--A1L647 is LessThan3~29
A1L647 = ( currCount[26] & ( A1L471 & ( (!currCount[28] & (((!currCount[27] & A1L475)) # (A1L479))) # (currCount[28] & (A1L479 & (!currCount[27] & A1L475))) ) ) ) # ( !currCount[26] & ( A1L471 & ( (!currCount[28] & (((!currCount[27]) # (A1L475)) # (A1L479))) # (currCount[28] & (A1L479 & ((!currCount[27]) # (A1L475)))) ) ) ) # ( currCount[26] & ( !A1L471 & ( (!currCount[28] & (((!currCount[27] & A1L475)) # (A1L479))) # (currCount[28] & (A1L479 & (!currCount[27] & A1L475))) ) ) ) # ( !currCount[26] & ( !A1L471 & ( (!currCount[28] & (((!currCount[27] & A1L475)) # (A1L479))) # (currCount[28] & (A1L479 & (!currCount[27] & A1L475))) ) ) );


--A1L648 is LessThan3~30
A1L648 = ( A1L463 & ( !A1L647 & ( (!A1L618) # ((!currCount[25] & (!A1L467 & currCount[24])) # (currCount[25] & ((!A1L467) # (currCount[24])))) ) ) ) # ( !A1L463 & ( !A1L647 & ( ((!A1L467) # (!A1L618)) # (currCount[25]) ) ) );


--A1L649 is LessThan3~31
A1L649 = ( A1L455 & ( A1L648 & ( (!A1L646) # ((!currCount[23] & (!A1L459 & currCount[22])) # (currCount[23] & ((!A1L459) # (currCount[22])))) ) ) ) # ( !A1L455 & ( A1L648 & ( ((!A1L459) # (!A1L646)) # (currCount[23]) ) ) );


--angleCount[31] is angleCount[31]
--register power-up is low

angleCount[31] = DFFEAS(A1L816, clk, reset_n,  ,  ,  ,  ,  ,  );


--A1L742 is out_wave~1
A1L742 = ( currCount[29] & ( A1L483 & ( (!angleCount[31] & (!currCount[31] & (!currCount[30] $ (A1L487)))) # (angleCount[31] & (currCount[31] & (!currCount[30] $ (A1L487)))) ) ) ) # ( !currCount[29] & ( !A1L483 & ( (!angleCount[31] & (!currCount[31] & (!currCount[30] $ (A1L487)))) # (angleCount[31] & (currCount[31] & (!currCount[30] $ (A1L487)))) ) ) );


--A1L743 is out_wave~2
A1L743 = ( currCount[29] & ( A1L483 & ( (!angleCount[31] & (((!currCount[30] & A1L487)) # (currCount[31]))) # (angleCount[31] & (currCount[31] & (!currCount[30] & A1L487))) ) ) ) # ( !currCount[29] & ( A1L483 & ( (!angleCount[31] & (((!currCount[30]) # (A1L487)) # (currCount[31]))) # (angleCount[31] & (currCount[31] & ((!currCount[30]) # (A1L487)))) ) ) ) # ( currCount[29] & ( !A1L483 & ( (!angleCount[31] & (((!currCount[30] & A1L487)) # (currCount[31]))) # (angleCount[31] & (currCount[31] & (!currCount[30] & A1L487))) ) ) ) # ( !currCount[29] & ( !A1L483 & ( (!angleCount[31] & (((!currCount[30] & A1L487)) # (currCount[31]))) # (angleCount[31] & (currCount[31] & (!currCount[30] & A1L487))) ) ) );


--A1L744 is out_wave~3
A1L744 = ( A1L742 & ( A1L743 & ( (A1L741) # (out_wave) ) ) ) # ( !A1L742 & ( A1L743 & ( (A1L741) # (out_wave) ) ) ) # ( A1L742 & ( !A1L743 & ( (!A1L741 & (out_wave)) # (A1L741 & (((!A1L649) # (A1L645)))) ) ) ) # ( !A1L742 & ( !A1L743 & ( (out_wave & !A1L741) ) ) );


--clk is clk
clk = INPUT();


--reset_n is reset_n
reset_n = INPUT();


--current_state.SW_LEFT is current_state.SW_LEFT
--register power-up is low

current_state.SW_LEFT = DFFEAS(next_state.SW_LEFT, clk, reset_n,  ,  ,  ,  ,  ,  );


--current_state.SW_RIGHT is current_state.SW_RIGHT
--register power-up is low

current_state.SW_RIGHT = DFFEAS(next_state.SW_RIGHT, clk, reset_n,  ,  ,  ,  ,  ,  );


--A1L530 is irq~0
A1L530 = (current_state.SW_LEFT & !current_state.SW_RIGHT);


--next_state.INT_RIGHT is next_state.INT_RIGHT
--register power-up is low

next_state.INT_RIGHT = DFFEAS(A1L813, clk, reset_n,  ,  ,  ,  ,  ,  );


--next_state.INT_LEFT is next_state.INT_LEFT
--register power-up is low

next_state.INT_LEFT = DFFEAS(A1L815, clk, reset_n,  ,  ,  ,  ,  ,  );


--A1L532 is LessThan0~0
A1L532 = ( currCount[1] & ( currCount[0] & ( (currCount[5] & (currCount[4] & (currCount[3] & currCount[2]))) ) ) );


--A1L533 is LessThan0~1
A1L533 = (!currCount[8] & (!currCount[7] & !currCount[6]));


--A1L534 is LessThan0~2
A1L534 = (!currCount[13] & (!currCount[12] & (!currCount[11] & !currCount[10])));


--A1L535 is LessThan0~3
A1L535 = ( A1L533 & ( A1L534 & ( (!currCount[15] & ((!currCount[14]) # ((!currCount[9]) # (!A1L532)))) ) ) ) # ( !A1L533 & ( A1L534 & ( (!currCount[15] & ((!currCount[14]) # (!currCount[9]))) ) ) ) # ( A1L533 & ( !A1L534 & ( (!currCount[15] & !currCount[14]) ) ) ) # ( !A1L533 & ( !A1L534 & ( (!currCount[15] & !currCount[14]) ) ) );


--A1L536 is LessThan0~4
A1L536 = (currCount[19] & (currCount[18] & (currCount[17] & currCount[16])));


--A1L537 is LessThan0~5
A1L537 = (!currCount[27] & (!currCount[25] & (!currCount[24] & !currCount[23])));


--A1L538 is LessThan0~6
A1L538 = (!currCount[30] & (!currCount[26] & (!currCount[22] & !currCount[21])));


--A1L539 is LessThan0~7
A1L539 = ( A1L538 & ( (!currCount[29] & (!currCount[28] & (!currCount[20] & A1L537))) ) );


--A1L540 is LessThan0~8
A1L540 = (!currCount[31] & ((!A1L539) # ((!A1L535 & A1L536))));


--A1L469Q is angleCount[25]~_emulated
--register power-up is low

A1L469Q = DFFEAS(A1L468, clk, reset_n,  , A1L404,  ,  ,  ,  );


--minAngleCount[25] is minAngleCount[25]
--register power-up is low

minAngleCount[25] = DFFEAS(reg[0][25], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L467 is angleCount[25]~22
A1L467 = (!reset_n & (((minAngleCount[25])))) # (reset_n & (!A1L469Q $ ((!A1L466))));


--A1L481Q is angleCount[28]~_emulated
--register power-up is low

A1L481Q = DFFEAS(A1L480, clk, reset_n,  , A1L404,  ,  ,  ,  );


--minAngleCount[28] is minAngleCount[28]
--register power-up is low

minAngleCount[28] = DFFEAS(reg[0][28], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L479 is angleCount[28]~10
A1L479 = (!reset_n & (((minAngleCount[28])))) # (reset_n & (!A1L481Q $ ((!A1L478))));


--A1L477Q is angleCount[27]~_emulated
--register power-up is low

A1L477Q = DFFEAS(A1L476, clk, reset_n,  , A1L404,  ,  ,  ,  );


--minAngleCount[27] is minAngleCount[27]
--register power-up is low

minAngleCount[27] = DFFEAS(reg[0][27], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L475 is angleCount[27]~14
A1L475 = (!reset_n & (((minAngleCount[27])))) # (reset_n & (!A1L477Q $ ((!A1L474))));


--A1L473Q is angleCount[26]~_emulated
--register power-up is low

A1L473Q = DFFEAS(A1L472, clk, reset_n,  , A1L404,  ,  ,  ,  );


--minAngleCount[26] is minAngleCount[26]
--register power-up is low

minAngleCount[26] = DFFEAS(reg[0][26], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L471 is angleCount[26]~18
A1L471 = (!reset_n & (((minAngleCount[26])))) # (reset_n & (!A1L473Q $ ((!A1L470))));


--A1L461Q is angleCount[23]~_emulated
--register power-up is low

A1L461Q = DFFEAS(A1L460, clk, reset_n,  , A1L404,  ,  ,  ,  );


--minAngleCount[23] is minAngleCount[23]
--register power-up is low

minAngleCount[23] = DFFEAS(reg[0][23], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L459 is angleCount[23]~30
A1L459 = (!reset_n & (((minAngleCount[23])))) # (reset_n & (!A1L461Q $ ((!A1L458))));


--A1L465Q is angleCount[24]~_emulated
--register power-up is low

A1L465Q = DFFEAS(A1L464, clk, reset_n,  , A1L404,  ,  ,  ,  );


--minAngleCount[24] is minAngleCount[24]
--register power-up is low

minAngleCount[24] = DFFEAS(reg[0][24], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L463 is angleCount[24]~26
A1L463 = (!reset_n & (((minAngleCount[24])))) # (reset_n & (!A1L465Q $ ((!A1L462))));


--A1L457Q is angleCount[22]~_emulated
--register power-up is low

A1L457Q = DFFEAS(A1L456, clk, reset_n,  , A1L404,  ,  ,  ,  );


--minAngleCount[22] is minAngleCount[22]
--register power-up is low

minAngleCount[22] = DFFEAS(reg[0][22], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L455 is angleCount[22]~34
A1L455 = (!reset_n & (((minAngleCount[22])))) # (reset_n & (!A1L457Q $ ((!A1L454))));


--A1L413Q is angleCount[11]~_emulated
--register power-up is low

A1L413Q = DFFEAS(A1L412, clk, reset_n,  , A1L404,  ,  ,  ,  );


--minAngleCount[11] is minAngleCount[11]
--register power-up is low

minAngleCount[11] = DFFEAS(reg[0][11], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L411 is angleCount[11]~78
A1L411 = (!reset_n & (((minAngleCount[11])))) # (reset_n & (!A1L413Q $ ((!A1L410))));


--A1L425Q is angleCount[14]~_emulated
--register power-up is low

A1L425Q = DFFEAS(A1L424, clk, reset_n,  , A1L404,  ,  ,  ,  );


--minAngleCount[14] is minAngleCount[14]
--register power-up is low

minAngleCount[14] = DFFEAS(A1L716, clk,  ,  , A1L652,  ,  ,  ,  );


--A1L423 is angleCount[14]~66
A1L423 = (!reset_n & (((!minAngleCount[14])))) # (reset_n & (!A1L425Q $ ((!A1L422))));


--A1L421Q is angleCount[13]~_emulated
--register power-up is low

A1L421Q = DFFEAS(A1L420, clk, reset_n,  , A1L404,  ,  ,  ,  );


--minAngleCount[13] is minAngleCount[13]
--register power-up is low

minAngleCount[13] = DFFEAS(reg[0][13], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L419 is angleCount[13]~70
A1L419 = (!reset_n & (((minAngleCount[13])))) # (reset_n & (!A1L421Q $ ((!A1L418))));


--A1L417Q is angleCount[12]~_emulated
--register power-up is low

A1L417Q = DFFEAS(A1L416, clk, reset_n,  , A1L404,  ,  ,  ,  );


--minAngleCount[12] is minAngleCount[12]
--register power-up is low

minAngleCount[12] = DFFEAS(reg[0][12], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L415 is angleCount[12]~74
A1L415 = (!reset_n & (((minAngleCount[12])))) # (reset_n & (!A1L417Q $ ((!A1L414))));


--A1L409Q is angleCount[10]~_emulated
--register power-up is low

A1L409Q = DFFEAS(A1L408, clk, reset_n,  , A1L404,  ,  ,  ,  );


--minAngleCount[10] is minAngleCount[10]
--register power-up is low

minAngleCount[10] = DFFEAS(reg[0][10], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L407 is angleCount[10]~82
A1L407 = (!reset_n & (((minAngleCount[10])))) # (reset_n & (!A1L409Q $ ((!A1L406))));


--A1L405Q is angleCount[9]~_emulated
--register power-up is low

A1L405Q = DFFEAS(A1L401, clk, reset_n,  , A1L404,  ,  ,  ,  );


--minAngleCount[9] is minAngleCount[9]
--register power-up is low

minAngleCount[9] = DFFEAS(A1L710, clk,  ,  , A1L652,  ,  ,  ,  );


--A1L400 is angleCount[9]~86
A1L400 = (!reset_n & (((!minAngleCount[9])))) # (reset_n & (!A1L405Q $ ((!A1L399))));


--A1L398Q is angleCount[8]~_emulated
--register power-up is low

A1L398Q = DFFEAS(A1L397, clk, reset_n,  , A1L404,  ,  ,  ,  );


--minAngleCount[8] is minAngleCount[8]
--register power-up is low

minAngleCount[8] = DFFEAS(A1L708, clk,  ,  , A1L652,  ,  ,  ,  );


--A1L396 is angleCount[8]~90
A1L396 = (!reset_n & (((!minAngleCount[8])))) # (reset_n & (!A1L398Q $ ((!A1L395))));


--A1L378Q is angleCount[3]~_emulated
--register power-up is low

A1L378Q = DFFEAS(A1L377, clk, reset_n,  , A1L404,  ,  ,  ,  );


--minAngleCount[3] is minAngleCount[3]
--register power-up is low

minAngleCount[3] = DFFEAS(A1L701, clk,  ,  , A1L652,  ,  ,  ,  );


--A1L376 is angleCount[3]~110
A1L376 = (!reset_n & (((!minAngleCount[3])))) # (reset_n & (!A1L378Q $ ((!A1L375))));


--A1L374Q is angleCount[2]~_emulated
--register power-up is low

A1L374Q = DFFEAS(A1L373, clk, reset_n,  , A1L530,  ,  ,  ,  );


--minAngleCount[2] is minAngleCount[2]
--register power-up is low

minAngleCount[2] = DFFEAS(A1L699, clk,  ,  , A1L652,  ,  ,  ,  );


--A1L372 is angleCount[2]~114
A1L372 = (!reset_n & (((!minAngleCount[2])))) # (reset_n & (!A1L374Q $ ((!A1L371))));


--A1L370Q is angleCount[1]~_emulated
--register power-up is low

A1L370Q = DFFEAS(A1L369, clk, reset_n,  , A1L530,  ,  ,  ,  );


--minAngleCount[1] is minAngleCount[1]
--register power-up is low

minAngleCount[1] = DFFEAS(A1L697, clk,  ,  , A1L652,  ,  ,  ,  );


--A1L368 is angleCount[1]~118
A1L368 = (!reset_n & (((!minAngleCount[1])))) # (reset_n & (!A1L370Q $ ((!A1L367))));


--A1L366Q is angleCount[0]~_emulated
--register power-up is low

A1L366Q = DFFEAS(A1L365, clk, reset_n,  , A1L530,  ,  ,  ,  );


--minAngleCount[0] is minAngleCount[0]
--register power-up is low

minAngleCount[0] = DFFEAS(A1L695, clk,  ,  , A1L652,  ,  ,  ,  );


--A1L364 is angleCount[0]~122
A1L364 = (!reset_n & (((!minAngleCount[0])))) # (reset_n & (!A1L366Q $ ((!A1L363))));


--A1L386Q is angleCount[5]~_emulated
--register power-up is low

A1L386Q = DFFEAS(A1L385, clk, reset_n,  , A1L404,  ,  ,  ,  );


--minAngleCount[5] is minAngleCount[5]
--register power-up is low

minAngleCount[5] = DFFEAS(reg[0][5], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L384 is angleCount[5]~102
A1L384 = (!reset_n & (((minAngleCount[5])))) # (reset_n & (!A1L386Q $ ((!A1L383))));


--A1L394Q is angleCount[7]~_emulated
--register power-up is low

A1L394Q = DFFEAS(A1L393, clk, reset_n,  , A1L404,  ,  ,  ,  );


--minAngleCount[7] is minAngleCount[7]
--register power-up is low

minAngleCount[7] = DFFEAS(reg[0][7], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L392 is angleCount[7]~94
A1L392 = (!reset_n & (((minAngleCount[7])))) # (reset_n & (!A1L394Q $ ((!A1L391))));


--A1L390Q is angleCount[6]~_emulated
--register power-up is low

A1L390Q = DFFEAS(A1L389, clk, reset_n,  , A1L404,  ,  ,  ,  );


--minAngleCount[6] is minAngleCount[6]
--register power-up is low

minAngleCount[6] = DFFEAS(A1L705, clk,  ,  , A1L652,  ,  ,  ,  );


--A1L388 is angleCount[6]~98
A1L388 = (!reset_n & (((!minAngleCount[6])))) # (reset_n & (!A1L390Q $ ((!A1L387))));


--A1L382Q is angleCount[4]~_emulated
--register power-up is low

A1L382Q = DFFEAS(A1L381, clk, reset_n,  , A1L404,  ,  ,  ,  );


--minAngleCount[4] is minAngleCount[4]
--register power-up is low

minAngleCount[4] = DFFEAS(reg[0][4], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L380 is angleCount[4]~106
A1L380 = (!reset_n & (((minAngleCount[4])))) # (reset_n & (!A1L382Q $ ((!A1L379))));


--A1L453Q is angleCount[21]~_emulated
--register power-up is low

A1L453Q = DFFEAS(A1L452, clk, reset_n,  , A1L404,  ,  ,  ,  );


--minAngleCount[21] is minAngleCount[21]
--register power-up is low

minAngleCount[21] = DFFEAS(reg[0][21], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L451 is angleCount[21]~38
A1L451 = (!reset_n & (((minAngleCount[21])))) # (reset_n & (!A1L453Q $ ((!A1L450))));


--A1L449Q is angleCount[20]~_emulated
--register power-up is low

A1L449Q = DFFEAS(A1L448, clk, reset_n,  , A1L404,  ,  ,  ,  );


--minAngleCount[20] is minAngleCount[20]
--register power-up is low

minAngleCount[20] = DFFEAS(reg[0][20], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L447 is angleCount[20]~42
A1L447 = (!reset_n & (((minAngleCount[20])))) # (reset_n & (!A1L449Q $ ((!A1L446))));


--A1L445Q is angleCount[19]~_emulated
--register power-up is low

A1L445Q = DFFEAS(A1L444, clk, reset_n,  , A1L404,  ,  ,  ,  );


--minAngleCount[19] is minAngleCount[19]
--register power-up is low

minAngleCount[19] = DFFEAS(reg[0][19], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L443 is angleCount[19]~46
A1L443 = (!reset_n & (((minAngleCount[19])))) # (reset_n & (!A1L445Q $ ((!A1L442))));


--A1L441Q is angleCount[18]~_emulated
--register power-up is low

A1L441Q = DFFEAS(A1L440, clk, reset_n,  , A1L404,  ,  ,  ,  );


--minAngleCount[18] is minAngleCount[18]
--register power-up is low

minAngleCount[18] = DFFEAS(reg[0][18], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L439 is angleCount[18]~50
A1L439 = (!reset_n & (((minAngleCount[18])))) # (reset_n & (!A1L441Q $ ((!A1L438))));


--A1L433Q is angleCount[16]~_emulated
--register power-up is low

A1L433Q = DFFEAS(A1L432, clk, reset_n,  , A1L404,  ,  ,  ,  );


--minAngleCount[16] is minAngleCount[16]
--register power-up is low

minAngleCount[16] = DFFEAS(reg[0][16], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L431 is angleCount[16]~58
A1L431 = (!reset_n & (((minAngleCount[16])))) # (reset_n & (!A1L433Q $ ((!A1L430))));


--A1L437Q is angleCount[17]~_emulated
--register power-up is low

A1L437Q = DFFEAS(A1L436, clk, reset_n,  , A1L404,  ,  ,  ,  );


--minAngleCount[17] is minAngleCount[17]
--register power-up is low

minAngleCount[17] = DFFEAS(reg[0][17], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L435 is angleCount[17]~54
A1L435 = (!reset_n & (((minAngleCount[17])))) # (reset_n & (!A1L437Q $ ((!A1L434))));


--A1L429Q is angleCount[15]~_emulated
--register power-up is low

A1L429Q = DFFEAS(A1L428, clk, reset_n,  , A1L404,  ,  ,  ,  );


--minAngleCount[15] is minAngleCount[15]
--register power-up is low

minAngleCount[15] = DFFEAS(A1L718, clk,  ,  , A1L652,  ,  ,  ,  );


--A1L427 is angleCount[15]~62
A1L427 = (!reset_n & (((!minAngleCount[15])))) # (reset_n & (!A1L429Q $ ((!A1L426))));


--A1L816 is Selector5~0
A1L816 = ( A1L246 & ( A1L130 & ( (!angleCount[31] & (A1L540 & ((!current_state.SW_LEFT) # (current_state.SW_RIGHT)))) # (angleCount[31] & ((!current_state.SW_LEFT) # ((current_state.SW_RIGHT)))) ) ) ) # ( !A1L246 & ( A1L130 & ( (!A1L540 & (angleCount[31] & ((!current_state.SW_LEFT) # (current_state.SW_RIGHT)))) # (A1L540 & (((!current_state.SW_LEFT)))) ) ) ) # ( A1L246 & ( !A1L130 & ( (!A1L540 & (angleCount[31] & ((!current_state.SW_LEFT) # (current_state.SW_RIGHT)))) # (A1L540 & (((current_state.SW_RIGHT)))) ) ) ) # ( !A1L246 & ( !A1L130 & ( (angleCount[31] & (!A1L540 & ((!current_state.SW_LEFT) # (current_state.SW_RIGHT)))) ) ) );


--A1L489Q is angleCount[30]~_emulated
--register power-up is low

A1L489Q = DFFEAS(A1L488, clk, reset_n,  , A1L404,  ,  ,  ,  );


--minAngleCount[30] is minAngleCount[30]
--register power-up is low

minAngleCount[30] = DFFEAS(reg[0][30], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L487 is angleCount[30]~2
A1L487 = (!reset_n & (((minAngleCount[30])))) # (reset_n & (!A1L489Q $ ((!A1L486))));


--A1L485Q is angleCount[29]~_emulated
--register power-up is low

A1L485Q = DFFEAS(A1L484, clk, reset_n,  , A1L404,  ,  ,  ,  );


--minAngleCount[29] is minAngleCount[29]
--register power-up is low

minAngleCount[29] = DFFEAS(reg[0][29], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L483 is angleCount[29]~6
A1L483 = (!reset_n & (((minAngleCount[29])))) # (reset_n & (!A1L485Q $ ((!A1L482))));


--next_state.SW_LEFT is next_state.SW_LEFT
--register power-up is low

next_state.SW_LEFT = DFFEAS(A1L737, clk, reset_n,  , A1L814,  ,  ,  ,  );


--next_state.SW_RIGHT is next_state.SW_RIGHT
--register power-up is low

next_state.SW_RIGHT = DFFEAS(A1L812, clk, reset_n,  , A1L814,  ,  ,  ,  );


--A1L579 is LessThan2~0
A1L579 = (!minAngleCount[7] & (!A1L392 & (!minAngleCount[6] $ (!A1L388)))) # (minAngleCount[7] & (A1L392 & (!minAngleCount[6] $ (!A1L388))));


--A1L580 is LessThan2~1
A1L580 = (!minAngleCount[3] & (A1L376 & (!minAngleCount[2] $ (!A1L372)))) # (minAngleCount[3] & (!A1L376 & (!minAngleCount[2] $ (!A1L372))));


--A1L581 is LessThan2~2
A1L581 = (!minAngleCount[3] & (A1L376 & (minAngleCount[2] & A1L372))) # (minAngleCount[3] & (((minAngleCount[2] & A1L372)) # (A1L376)));


--A1L582 is LessThan2~3
A1L582 = ( A1L607 & ( A1L608 & ( (!A1L580 & (A1L581 & (!minAngleCount[7] $ (A1L392)))) # (A1L580 & ((!minAngleCount[7] $ (A1L392)))) ) ) ) # ( A1L607 & ( !A1L608 & ( (A1L581 & (!minAngleCount[7] $ (A1L392))) ) ) );


--A1L583 is LessThan2~4
A1L583 = (!minAngleCount[7] & (((minAngleCount[6] & A1L388)) # (A1L392))) # (minAngleCount[7] & (A1L392 & (minAngleCount[6] & A1L388)));


--A1L584 is LessThan2~5
A1L584 = ( A1L579 & ( !A1L583 & ( (!minAngleCount[5] & (!A1L384 & ((!A1L380) # (minAngleCount[4])))) # (minAngleCount[5] & ((!A1L384) # ((!A1L380) # (minAngleCount[4])))) ) ) ) # ( !A1L579 & ( !A1L583 ) );


--A1L585 is LessThan2~6
A1L585 = ( minAngleCount[12] & ( A1L415 & ( (!minAngleCount[14] & (A1L423 & (!minAngleCount[13] $ (A1L419)))) # (minAngleCount[14] & (!A1L423 & (!minAngleCount[13] $ (A1L419)))) ) ) ) # ( !minAngleCount[12] & ( !A1L415 & ( (!minAngleCount[14] & (A1L423 & (!minAngleCount[13] $ (A1L419)))) # (minAngleCount[14] & (!A1L423 & (!minAngleCount[13] $ (A1L419)))) ) ) );


--A1L586 is LessThan2~7
A1L586 = ( A1L613 & ( A1L614 & ( (!minAngleCount[9] & (A1L400 & (!minAngleCount[14] $ (!A1L423)))) # (minAngleCount[9] & (!A1L400 & (!minAngleCount[14] $ (!A1L423)))) ) ) );


--A1L587 is LessThan2~8
A1L587 = ( minAngleCount[12] & ( A1L415 & ( (!minAngleCount[14] & (A1L423 & (!minAngleCount[13] & A1L419))) # (minAngleCount[14] & (((!minAngleCount[13] & A1L419)) # (A1L423))) ) ) ) # ( !minAngleCount[12] & ( A1L415 & ( (!minAngleCount[14] & (A1L423 & ((!minAngleCount[13]) # (A1L419)))) # (minAngleCount[14] & (((!minAngleCount[13]) # (A1L419)) # (A1L423))) ) ) ) # ( minAngleCount[12] & ( !A1L415 & ( (!minAngleCount[14] & (A1L423 & (!minAngleCount[13] & A1L419))) # (minAngleCount[14] & (((!minAngleCount[13] & A1L419)) # (A1L423))) ) ) ) # ( !minAngleCount[12] & ( !A1L415 & ( (!minAngleCount[14] & (A1L423 & (!minAngleCount[13] & A1L419))) # (minAngleCount[14] & (((!minAngleCount[13] & A1L419)) # (A1L423))) ) ) );


--A1L588 is LessThan2~9
A1L588 = ( A1L585 & ( !A1L587 & ( (!minAngleCount[11] & (!A1L411 & ((!A1L407) # (minAngleCount[10])))) # (minAngleCount[11] & ((!A1L411) # ((!A1L407) # (minAngleCount[10])))) ) ) ) # ( !A1L585 & ( !A1L587 ) );


--A1L589 is LessThan2~10
A1L589 = ( A1L615 & ( A1L585 & ( (!minAngleCount[9] & (A1L400 & ((A1L396)))) # (minAngleCount[9] & (((minAngleCount[8] & A1L396)) # (A1L400))) ) ) );


--A1L590 is LessThan2~11
A1L590 = ( minAngleCount[19] & ( A1L443 & ( (!minAngleCount[21] & (!A1L451 & (!minAngleCount[20] $ (A1L447)))) # (minAngleCount[21] & (A1L451 & (!minAngleCount[20] $ (A1L447)))) ) ) ) # ( !minAngleCount[19] & ( !A1L443 & ( (!minAngleCount[21] & (!A1L451 & (!minAngleCount[20] $ (A1L447)))) # (minAngleCount[21] & (A1L451 & (!minAngleCount[20] $ (A1L447)))) ) ) );


--A1L591 is LessThan2~12
A1L591 = !minAngleCount[18] $ (!A1L439);


--A1L592 is LessThan2~13
A1L592 = !minAngleCount[17] $ (!A1L435);


--A1L593 is LessThan2~14
A1L593 = ( A1L616 & ( A1L617 & ( (!minAngleCount[16] & (!A1L431 & (!minAngleCount[21] $ (A1L451)))) # (minAngleCount[16] & (A1L431 & (!minAngleCount[21] $ (A1L451)))) ) ) );


--A1L594 is LessThan2~15
A1L594 = ( A1L589 & ( A1L593 ) ) # ( !A1L589 & ( A1L593 & ( (!A1L588) # ((A1L586 & ((!A1L584) # (A1L582)))) ) ) );


--A1L595 is LessThan2~16
A1L595 = ( minAngleCount[19] & ( A1L443 & ( (!minAngleCount[21] & (((!minAngleCount[20] & A1L447)) # (A1L451))) # (minAngleCount[21] & (A1L451 & (!minAngleCount[20] & A1L447))) ) ) ) # ( !minAngleCount[19] & ( A1L443 & ( (!minAngleCount[21] & (((!minAngleCount[20]) # (A1L447)) # (A1L451))) # (minAngleCount[21] & (A1L451 & ((!minAngleCount[20]) # (A1L447)))) ) ) ) # ( minAngleCount[19] & ( !A1L443 & ( (!minAngleCount[21] & (((!minAngleCount[20] & A1L447)) # (A1L451))) # (minAngleCount[21] & (A1L451 & (!minAngleCount[20] & A1L447))) ) ) ) # ( !minAngleCount[19] & ( !A1L443 & ( (!minAngleCount[21] & (((!minAngleCount[20] & A1L447)) # (A1L451))) # (minAngleCount[21] & (A1L451 & (!minAngleCount[20] & A1L447))) ) ) );


--A1L596 is LessThan2~17
A1L596 = ( A1L609 & ( A1L610 & ( (!A1L590 & !A1L595) ) ) ) # ( !A1L609 & ( A1L610 & ( (!A1L590 & !A1L595) ) ) ) # ( A1L609 & ( !A1L610 & ( (!A1L595 & ((!A1L590) # ((A1L592) # (A1L591)))) ) ) ) # ( !A1L609 & ( !A1L610 & ( !A1L595 ) ) );


--A1L597 is LessThan2~18
A1L597 = ( minAngleCount[26] & ( A1L471 & ( (!minAngleCount[28] & (!A1L479 & (!minAngleCount[27] $ (A1L475)))) # (minAngleCount[28] & (A1L479 & (!minAngleCount[27] $ (A1L475)))) ) ) ) # ( !minAngleCount[26] & ( !A1L471 & ( (!minAngleCount[28] & (!A1L479 & (!minAngleCount[27] $ (A1L475)))) # (minAngleCount[28] & (A1L479 & (!minAngleCount[27] $ (A1L475)))) ) ) );


--A1L598 is LessThan2~19
A1L598 = !minAngleCount[25] $ (!A1L467);


--A1L599 is LessThan2~20
A1L599 = !minAngleCount[24] $ (!A1L463);


--A1L600 is LessThan2~21
A1L600 = !minAngleCount[22] $ (!A1L455);


--A1L601 is LessThan2~22
A1L601 = ( !A1L599 & ( !A1L600 & ( (A1L597 & (!A1L598 & (!minAngleCount[23] $ (A1L459)))) ) ) );


--A1L602 is LessThan2~23
A1L602 = ( minAngleCount[26] & ( A1L471 & ( (!minAngleCount[28] & (((!minAngleCount[27] & A1L475)) # (A1L479))) # (minAngleCount[28] & (A1L479 & (!minAngleCount[27] & A1L475))) ) ) ) # ( !minAngleCount[26] & ( A1L471 & ( (!minAngleCount[28] & (((!minAngleCount[27]) # (A1L475)) # (A1L479))) # (minAngleCount[28] & (A1L479 & ((!minAngleCount[27]) # (A1L475)))) ) ) ) # ( minAngleCount[26] & ( !A1L471 & ( (!minAngleCount[28] & (((!minAngleCount[27] & A1L475)) # (A1L479))) # (minAngleCount[28] & (A1L479 & (!minAngleCount[27] & A1L475))) ) ) ) # ( !minAngleCount[26] & ( !A1L471 & ( (!minAngleCount[28] & (((!minAngleCount[27] & A1L475)) # (A1L479))) # (minAngleCount[28] & (A1L479 & (!minAngleCount[27] & A1L475))) ) ) );


--A1L603 is LessThan2~24
A1L603 = ( A1L611 & ( A1L612 & ( (!A1L597 & !A1L602) ) ) ) # ( !A1L611 & ( A1L612 & ( (!A1L597 & !A1L602) ) ) ) # ( A1L611 & ( !A1L612 & ( (!A1L602 & ((!A1L597) # ((A1L599) # (A1L598)))) ) ) ) # ( !A1L611 & ( !A1L612 & ( !A1L602 ) ) );


--A1L604 is LessThan2~25
A1L604 = (!minAngleCount[30] & (!A1L487 & (!minAngleCount[29] $ (A1L483)))) # (minAngleCount[30] & (A1L487 & (!minAngleCount[29] $ (A1L483))));


--A1L605 is LessThan2~26
A1L605 = (!minAngleCount[30] & (((!minAngleCount[29] & A1L483)) # (A1L487))) # (minAngleCount[30] & (A1L487 & (!minAngleCount[29] & A1L483)));


--A1L606 is LessThan2~27
A1L606 = ( A1L604 & ( !A1L605 & ( (A1L603 & ((!A1L601) # ((!A1L594 & A1L596)))) ) ) ) # ( !A1L604 & ( !A1L605 ) );


--maxAngleCount[7] is maxAngleCount[7]
--register power-up is low

maxAngleCount[7] = DFFEAS(A1L665, clk,  ,  , A1L652,  ,  ,  ,  );


--maxAngleCount[6] is maxAngleCount[6]
--register power-up is low

maxAngleCount[6] = DFFEAS(reg[1][6], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L541 is LessThan1~0
A1L541 = (!A1L392 & (maxAngleCount[7] & (!A1L388 $ (maxAngleCount[6])))) # (A1L392 & (!maxAngleCount[7] & (!A1L388 $ (maxAngleCount[6]))));


--maxAngleCount[5] is maxAngleCount[5]
--register power-up is low

maxAngleCount[5] = DFFEAS(reg[1][5], clk,  ,  , A1L652,  ,  ,  ,  );


--maxAngleCount[4] is maxAngleCount[4]
--register power-up is low

maxAngleCount[4] = DFFEAS(A1L661, clk,  ,  , A1L652,  ,  ,  ,  );


--maxAngleCount[1] is maxAngleCount[1]
--register power-up is low

maxAngleCount[1] = DFFEAS(A1L655, clk,  ,  , A1L652,  ,  ,  ,  );


--maxAngleCount[0] is maxAngleCount[0]
--register power-up is low

maxAngleCount[0] = DFFEAS(A1L653, clk,  ,  , A1L652,  ,  ,  ,  );


--maxAngleCount[3] is maxAngleCount[3]
--register power-up is low

maxAngleCount[3] = DFFEAS(A1L659, clk,  ,  , A1L652,  ,  ,  ,  );


--maxAngleCount[2] is maxAngleCount[2]
--register power-up is low

maxAngleCount[2] = DFFEAS(A1L657, clk,  ,  , A1L652,  ,  ,  ,  );


--A1L542 is LessThan1~1
A1L542 = (!A1L376 & (maxAngleCount[3] & (!A1L372 $ (!maxAngleCount[2])))) # (A1L376 & (!maxAngleCount[3] & (!A1L372 $ (!maxAngleCount[2]))));


--A1L543 is LessThan1~2
A1L543 = (!A1L376 & ((!maxAngleCount[3]) # ((!A1L372 & !maxAngleCount[2])))) # (A1L376 & (!A1L372 & (!maxAngleCount[3] & !maxAngleCount[2])));


--A1L544 is LessThan1~3
A1L544 = ( A1L574 & ( A1L575 & ( (!A1L542 & (A1L543 & (!A1L392 $ (!maxAngleCount[7])))) # (A1L542 & ((!A1L392 $ (!maxAngleCount[7])))) ) ) ) # ( A1L574 & ( !A1L575 & ( (A1L543 & (!A1L392 $ (!maxAngleCount[7]))) ) ) );


--A1L545 is LessThan1~4
A1L545 = (!A1L392 & ((!maxAngleCount[7]) # ((!A1L388 & maxAngleCount[6])))) # (A1L392 & (!A1L388 & (!maxAngleCount[7] & maxAngleCount[6])));


--A1L546 is LessThan1~5
A1L546 = ( maxAngleCount[4] & ( !A1L545 & ( ((!maxAngleCount[5]) # (!A1L541)) # (A1L384) ) ) ) # ( !maxAngleCount[4] & ( !A1L545 & ( (!A1L541) # ((!A1L384 & (A1L380 & !maxAngleCount[5])) # (A1L384 & ((!maxAngleCount[5]) # (A1L380)))) ) ) );


--maxAngleCount[14] is maxAngleCount[14]
--register power-up is low

maxAngleCount[14] = DFFEAS(reg[1][14], clk,  ,  , A1L652,  ,  ,  ,  );


--maxAngleCount[13] is maxAngleCount[13]
--register power-up is low

maxAngleCount[13] = DFFEAS(reg[1][13], clk,  ,  , A1L652,  ,  ,  ,  );


--maxAngleCount[12] is maxAngleCount[12]
--register power-up is low

maxAngleCount[12] = DFFEAS(reg[1][12], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L547 is LessThan1~6
A1L547 = ( maxAngleCount[13] & ( maxAngleCount[12] & ( (A1L419 & (A1L415 & (!A1L423 $ (maxAngleCount[14])))) ) ) ) # ( !maxAngleCount[13] & ( maxAngleCount[12] & ( (!A1L419 & (A1L415 & (!A1L423 $ (maxAngleCount[14])))) ) ) ) # ( maxAngleCount[13] & ( !maxAngleCount[12] & ( (A1L419 & (!A1L415 & (!A1L423 $ (maxAngleCount[14])))) ) ) ) # ( !maxAngleCount[13] & ( !maxAngleCount[12] & ( (!A1L419 & (!A1L415 & (!A1L423 $ (maxAngleCount[14])))) ) ) );


--maxAngleCount[11] is maxAngleCount[11]
--register power-up is low

maxAngleCount[11] = DFFEAS(reg[1][11], clk,  ,  , A1L652,  ,  ,  ,  );


--maxAngleCount[9] is maxAngleCount[9]
--register power-up is low

maxAngleCount[9] = DFFEAS(A1L668, clk,  ,  , A1L652,  ,  ,  ,  );


--maxAngleCount[10] is maxAngleCount[10]
--register power-up is low

maxAngleCount[10] = DFFEAS(A1L670, clk,  ,  , A1L652,  ,  ,  ,  );


--maxAngleCount[8] is maxAngleCount[8]
--register power-up is low

maxAngleCount[8] = DFFEAS(reg[1][8], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L548 is LessThan1~7
A1L548 = ( A1L576 & ( A1L577 & ( (!A1L400 & (maxAngleCount[9] & (!A1L423 $ (maxAngleCount[14])))) # (A1L400 & (!maxAngleCount[9] & (!A1L423 $ (maxAngleCount[14])))) ) ) );


--A1L549 is LessThan1~8
A1L549 = ( maxAngleCount[13] & ( maxAngleCount[12] & ( (!A1L423 & ((!A1L419) # ((!A1L415) # (maxAngleCount[14])))) # (A1L423 & (maxAngleCount[14] & ((!A1L419) # (!A1L415)))) ) ) ) # ( !maxAngleCount[13] & ( maxAngleCount[12] & ( (!A1L423 & (((!A1L419 & !A1L415)) # (maxAngleCount[14]))) # (A1L423 & (!A1L419 & (!A1L415 & maxAngleCount[14]))) ) ) ) # ( maxAngleCount[13] & ( !maxAngleCount[12] & ( (!A1L423 & ((!A1L419) # (maxAngleCount[14]))) # (A1L423 & (!A1L419 & maxAngleCount[14])) ) ) ) # ( !maxAngleCount[13] & ( !maxAngleCount[12] & ( (!A1L423 & maxAngleCount[14]) ) ) );


--A1L550 is LessThan1~9
A1L550 = ( maxAngleCount[10] & ( !A1L549 & ( ((!maxAngleCount[11]) # (!A1L547)) # (A1L411) ) ) ) # ( !maxAngleCount[10] & ( !A1L549 & ( (!A1L547) # ((!A1L411 & (A1L407 & !maxAngleCount[11])) # (A1L411 & ((!maxAngleCount[11]) # (A1L407)))) ) ) );


--A1L551 is LessThan1~10
A1L551 = ( A1L578 & ( A1L547 & ( (!A1L400 & ((!maxAngleCount[9]) # ((!A1L396)))) # (A1L400 & (!maxAngleCount[9] & (!A1L396 & maxAngleCount[8]))) ) ) );


--maxAngleCount[21] is maxAngleCount[21]
--register power-up is low

maxAngleCount[21] = DFFEAS(reg[1][21], clk,  ,  , A1L652,  ,  ,  ,  );


--maxAngleCount[20] is maxAngleCount[20]
--register power-up is low

maxAngleCount[20] = DFFEAS(reg[1][20], clk,  ,  , A1L652,  ,  ,  ,  );


--maxAngleCount[19] is maxAngleCount[19]
--register power-up is low

maxAngleCount[19] = DFFEAS(reg[1][19], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L552 is LessThan1~11
A1L552 = ( maxAngleCount[20] & ( maxAngleCount[19] & ( (A1L447 & (A1L443 & (!A1L451 $ (maxAngleCount[21])))) ) ) ) # ( !maxAngleCount[20] & ( maxAngleCount[19] & ( (!A1L447 & (A1L443 & (!A1L451 $ (maxAngleCount[21])))) ) ) ) # ( maxAngleCount[20] & ( !maxAngleCount[19] & ( (A1L447 & (!A1L443 & (!A1L451 $ (maxAngleCount[21])))) ) ) ) # ( !maxAngleCount[20] & ( !maxAngleCount[19] & ( (!A1L447 & (!A1L443 & (!A1L451 $ (maxAngleCount[21])))) ) ) );


--maxAngleCount[18] is maxAngleCount[18]
--register power-up is low

maxAngleCount[18] = DFFEAS(reg[1][18], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L553 is LessThan1~12
A1L553 = !A1L439 $ (!maxAngleCount[18]);


--maxAngleCount[16] is maxAngleCount[16]
--register power-up is low

maxAngleCount[16] = DFFEAS(A1L678, clk,  ,  , A1L652,  ,  ,  ,  );


--maxAngleCount[17] is maxAngleCount[17]
--register power-up is low

maxAngleCount[17] = DFFEAS(reg[1][17], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L554 is LessThan1~13
A1L554 = !A1L435 $ (!maxAngleCount[17]);


--maxAngleCount[15] is maxAngleCount[15]
--register power-up is low

maxAngleCount[15] = DFFEAS(A1L676, clk,  ,  , A1L652,  ,  ,  ,  );


--A1L555 is LessThan1~14
A1L555 = !A1L427 $ (maxAngleCount[15]);


--A1L556 is LessThan1~15
A1L556 = ( !A1L554 & ( !A1L555 & ( (A1L552 & (!A1L553 & (!A1L431 $ (!maxAngleCount[16])))) ) ) );


--A1L557 is LessThan1~16
A1L557 = ( A1L551 & ( A1L556 ) ) # ( !A1L551 & ( A1L556 & ( (!A1L550) # ((A1L548 & ((!A1L546) # (A1L544)))) ) ) );


--A1L558 is LessThan1~17
A1L558 = (A1L552 & (!A1L553 & !A1L554));


--A1L559 is LessThan1~18
A1L559 = ( maxAngleCount[20] & ( maxAngleCount[19] & ( (!A1L451 & ((!A1L447) # ((!A1L443) # (maxAngleCount[21])))) # (A1L451 & (maxAngleCount[21] & ((!A1L447) # (!A1L443)))) ) ) ) # ( !maxAngleCount[20] & ( maxAngleCount[19] & ( (!A1L451 & (((!A1L447 & !A1L443)) # (maxAngleCount[21]))) # (A1L451 & (!A1L447 & (!A1L443 & maxAngleCount[21]))) ) ) ) # ( maxAngleCount[20] & ( !maxAngleCount[19] & ( (!A1L451 & ((!A1L447) # (maxAngleCount[21]))) # (A1L451 & (!A1L447 & maxAngleCount[21])) ) ) ) # ( !maxAngleCount[20] & ( !maxAngleCount[19] & ( (!A1L451 & maxAngleCount[21]) ) ) );


--A1L560 is LessThan1~19
A1L560 = ( maxAngleCount[17] & ( !A1L559 & ( (!A1L552) # ((!A1L439 & (A1L435 & !maxAngleCount[18])) # (A1L439 & ((!maxAngleCount[18]) # (A1L435)))) ) ) ) # ( !maxAngleCount[17] & ( !A1L559 & ( ((!maxAngleCount[18]) # (!A1L552)) # (A1L439) ) ) );


--A1L561 is LessThan1~20
A1L561 = ( maxAngleCount[15] & ( A1L560 & ( ((!A1L558) # (maxAngleCount[16])) # (A1L431) ) ) ) # ( !maxAngleCount[15] & ( A1L560 & ( (!A1L558) # ((!A1L431 & (A1L427 & maxAngleCount[16])) # (A1L431 & ((maxAngleCount[16]) # (A1L427)))) ) ) );


--maxAngleCount[28] is maxAngleCount[28]
--register power-up is low

maxAngleCount[28] = DFFEAS(reg[1][28], clk,  ,  , A1L652,  ,  ,  ,  );


--maxAngleCount[27] is maxAngleCount[27]
--register power-up is low

maxAngleCount[27] = DFFEAS(reg[1][27], clk,  ,  , A1L652,  ,  ,  ,  );


--maxAngleCount[26] is maxAngleCount[26]
--register power-up is low

maxAngleCount[26] = DFFEAS(reg[1][26], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L562 is LessThan1~21
A1L562 = ( maxAngleCount[27] & ( maxAngleCount[26] & ( (A1L475 & (A1L471 & (!A1L479 $ (maxAngleCount[28])))) ) ) ) # ( !maxAngleCount[27] & ( maxAngleCount[26] & ( (!A1L475 & (A1L471 & (!A1L479 $ (maxAngleCount[28])))) ) ) ) # ( maxAngleCount[27] & ( !maxAngleCount[26] & ( (A1L475 & (!A1L471 & (!A1L479 $ (maxAngleCount[28])))) ) ) ) # ( !maxAngleCount[27] & ( !maxAngleCount[26] & ( (!A1L475 & (!A1L471 & (!A1L479 $ (maxAngleCount[28])))) ) ) );


--maxAngleCount[25] is maxAngleCount[25]
--register power-up is low

maxAngleCount[25] = DFFEAS(reg[1][25], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L563 is LessThan1~22
A1L563 = !A1L467 $ (!maxAngleCount[25]);


--maxAngleCount[23] is maxAngleCount[23]
--register power-up is low

maxAngleCount[23] = DFFEAS(reg[1][23], clk,  ,  , A1L652,  ,  ,  ,  );


--maxAngleCount[24] is maxAngleCount[24]
--register power-up is low

maxAngleCount[24] = DFFEAS(reg[1][24], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L564 is LessThan1~23
A1L564 = !A1L463 $ (!maxAngleCount[24]);


--maxAngleCount[22] is maxAngleCount[22]
--register power-up is low

maxAngleCount[22] = DFFEAS(reg[1][22], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L565 is LessThan1~24
A1L565 = !A1L455 $ (!maxAngleCount[22]);


--A1L566 is LessThan1~25
A1L566 = ( !A1L564 & ( !A1L565 & ( (A1L562 & (!A1L563 & (!A1L459 $ (maxAngleCount[23])))) ) ) );


--A1L567 is LessThan1~26
A1L567 = (A1L562 & (!A1L563 & !A1L564));


--A1L568 is LessThan1~27
A1L568 = ( maxAngleCount[27] & ( maxAngleCount[26] & ( (!A1L479 & ((!A1L475) # ((!A1L471) # (maxAngleCount[28])))) # (A1L479 & (maxAngleCount[28] & ((!A1L475) # (!A1L471)))) ) ) ) # ( !maxAngleCount[27] & ( maxAngleCount[26] & ( (!A1L479 & (((!A1L475 & !A1L471)) # (maxAngleCount[28]))) # (A1L479 & (!A1L475 & (!A1L471 & maxAngleCount[28]))) ) ) ) # ( maxAngleCount[27] & ( !maxAngleCount[26] & ( (!A1L479 & ((!A1L475) # (maxAngleCount[28]))) # (A1L479 & (!A1L475 & maxAngleCount[28])) ) ) ) # ( !maxAngleCount[27] & ( !maxAngleCount[26] & ( (!A1L479 & maxAngleCount[28]) ) ) );


--A1L569 is LessThan1~28
A1L569 = ( maxAngleCount[24] & ( !A1L568 & ( (!A1L562) # ((!A1L467 & (A1L463 & !maxAngleCount[25])) # (A1L467 & ((!maxAngleCount[25]) # (A1L463)))) ) ) ) # ( !maxAngleCount[24] & ( !A1L568 & ( ((!maxAngleCount[25]) # (!A1L562)) # (A1L467) ) ) );


--A1L570 is LessThan1~29
A1L570 = ( maxAngleCount[22] & ( A1L569 & ( (!A1L567) # ((!A1L459 & (A1L455 & !maxAngleCount[23])) # (A1L459 & ((!maxAngleCount[23]) # (A1L455)))) ) ) ) # ( !maxAngleCount[22] & ( A1L569 & ( ((!maxAngleCount[23]) # (!A1L567)) # (A1L459) ) ) );


--maxAngleCount[30] is maxAngleCount[30]
--register power-up is low

maxAngleCount[30] = DFFEAS(reg[1][30], clk,  ,  , A1L652,  ,  ,  ,  );


--maxAngleCount[29] is maxAngleCount[29]
--register power-up is low

maxAngleCount[29] = DFFEAS(reg[1][29], clk,  ,  , A1L652,  ,  ,  ,  );


--A1L571 is LessThan1~30
A1L571 = (!A1L487 & (!maxAngleCount[30] & (!A1L483 $ (maxAngleCount[29])))) # (A1L487 & (maxAngleCount[30] & (!A1L483 $ (maxAngleCount[29]))));


--A1L572 is LessThan1~31
A1L572 = ( maxAngleCount[29] & ( (!angleCount[31] & ((!A1L487 & (A1L483 & !maxAngleCount[30])) # (A1L487 & ((!maxAngleCount[30]) # (A1L483))))) ) ) # ( !maxAngleCount[29] & ( (!angleCount[31] & ((!maxAngleCount[30]) # (A1L487))) ) );


--A1L573 is LessThan1~32
A1L573 = ( A1L571 & ( A1L572 & ( (A1L570 & ((!A1L566) # ((!A1L557 & A1L561)))) ) ) ) # ( !A1L571 & ( A1L572 ) );


--A1L813 is Selector1~0
A1L813 = ( A1L606 & ( A1L573 & ( current_state.SW_RIGHT ) ) ) # ( !A1L606 & ( A1L573 & ( (current_state.SW_RIGHT & ((next_state.INT_RIGHT) # (angleCount[31]))) ) ) ) # ( A1L606 & ( !A1L573 & ( ((!current_state.SW_LEFT & next_state.INT_RIGHT)) # (current_state.SW_RIGHT) ) ) ) # ( !A1L606 & ( !A1L573 & ( (!current_state.SW_RIGHT & (((!current_state.SW_LEFT & next_state.INT_RIGHT)))) # (current_state.SW_RIGHT & (((next_state.INT_RIGHT)) # (angleCount[31]))) ) ) );


--A1L815 is Selector3~0
A1L815 = ( A1L606 & ( A1L573 & ( !current_state.SW_LEFT ) ) ) # ( !A1L606 & ( A1L573 & ( (!current_state.SW_LEFT) # ((!angleCount[31] & (current_state.SW_RIGHT & next_state.INT_LEFT))) ) ) ) # ( A1L606 & ( !A1L573 & ( (!current_state.SW_LEFT & next_state.INT_LEFT) ) ) ) # ( !A1L606 & ( !A1L573 & ( (next_state.INT_LEFT & ((!current_state.SW_LEFT) # ((!angleCount[31] & current_state.SW_RIGHT)))) ) ) );


--A1L402 is angleCount[9]~155
A1L402 = !current_state.INT_LEFT $ (!current_state.SW_RIGHT);


--A1L403 is angleCount[9]~156
A1L403 = !current_state.INT_RIGHT $ (!current_state.SW_RIGHT);


--A1L822 is Selector11~0
A1L822 = ( A1L402 & ( A1L403 & ( A1L250 ) ) ) # ( !A1L402 & ( A1L403 & ( minAngleCount[25] ) ) ) # ( A1L402 & ( !A1L403 & ( maxAngleCount[25] ) ) ) # ( !A1L402 & ( !A1L403 & ( A1L134 ) ) );


--A1L468 is angleCount[25]~23
A1L468 = !A1L822 $ (!A1L466);


--A1L404 is angleCount[9]~157
A1L404 = ( A1L536 & ( A1L539 & ( (!currCount[31] & ((!A1L535) # ((current_state.SW_LEFT & !current_state.SW_RIGHT)))) # (currCount[31] & (current_state.SW_LEFT & (!current_state.SW_RIGHT))) ) ) ) # ( !A1L536 & ( A1L539 & ( (current_state.SW_LEFT & !current_state.SW_RIGHT) ) ) ) # ( A1L536 & ( !A1L539 & ( (!currCount[31]) # ((current_state.SW_LEFT & !current_state.SW_RIGHT)) ) ) ) # ( !A1L536 & ( !A1L539 & ( (!currCount[31]) # ((current_state.SW_LEFT & !current_state.SW_RIGHT)) ) ) );


--reg[0][25] is reg[0][25]
--register power-up is low

reg[0][25] = DFFEAS(writedata[25], clk, reset_n,  , A1L762,  ,  ,  ,  );


--write is write
write = INPUT();


--A1L652 is maxAngleCount[0]~0
A1L652 = (reset_n & !write);


--A1L819 is Selector8~0
A1L819 = ( A1L402 & ( A1L403 & ( A1L254 ) ) ) # ( !A1L402 & ( A1L403 & ( minAngleCount[28] ) ) ) # ( A1L402 & ( !A1L403 & ( maxAngleCount[28] ) ) ) # ( !A1L402 & ( !A1L403 & ( A1L138 ) ) );


--A1L480 is angleCount[28]~11
A1L480 = !A1L819 $ (!A1L478);


--reg[0][28] is reg[0][28]
--register power-up is low

reg[0][28] = DFFEAS(writedata[28], clk, reset_n,  , A1L762,  ,  ,  ,  );


--A1L820 is Selector9~0
A1L820 = ( A1L402 & ( A1L403 & ( A1L258 ) ) ) # ( !A1L402 & ( A1L403 & ( minAngleCount[27] ) ) ) # ( A1L402 & ( !A1L403 & ( maxAngleCount[27] ) ) ) # ( !A1L402 & ( !A1L403 & ( A1L142 ) ) );


--A1L476 is angleCount[27]~15
A1L476 = !A1L820 $ (!A1L474);


--reg[0][27] is reg[0][27]
--register power-up is low

reg[0][27] = DFFEAS(writedata[27], clk, reset_n,  , A1L762,  ,  ,  ,  );


--A1L821 is Selector10~0
A1L821 = ( A1L402 & ( A1L403 & ( A1L262 ) ) ) # ( !A1L402 & ( A1L403 & ( minAngleCount[26] ) ) ) # ( A1L402 & ( !A1L403 & ( maxAngleCount[26] ) ) ) # ( !A1L402 & ( !A1L403 & ( A1L146 ) ) );


--A1L472 is angleCount[26]~19
A1L472 = !A1L821 $ (!A1L470);


--reg[0][26] is reg[0][26]
--register power-up is low

reg[0][26] = DFFEAS(writedata[26], clk, reset_n,  , A1L762,  ,  ,  ,  );


--A1L824 is Selector13~0
A1L824 = ( A1L402 & ( A1L403 & ( A1L266 ) ) ) # ( !A1L402 & ( A1L403 & ( minAngleCount[23] ) ) ) # ( A1L402 & ( !A1L403 & ( maxAngleCount[23] ) ) ) # ( !A1L402 & ( !A1L403 & ( A1L150 ) ) );


--A1L460 is angleCount[23]~31
A1L460 = !A1L824 $ (!A1L458);


--reg[0][23] is reg[0][23]
--register power-up is low

reg[0][23] = DFFEAS(writedata[23], clk, reset_n,  , A1L762,  ,  ,  ,  );


--A1L823 is Selector12~0
A1L823 = ( A1L402 & ( A1L403 & ( A1L270 ) ) ) # ( !A1L402 & ( A1L403 & ( minAngleCount[24] ) ) ) # ( A1L402 & ( !A1L403 & ( maxAngleCount[24] ) ) ) # ( !A1L402 & ( !A1L403 & ( A1L154 ) ) );


--A1L464 is angleCount[24]~27
A1L464 = !A1L823 $ (!A1L462);


--reg[0][24] is reg[0][24]
--register power-up is low

reg[0][24] = DFFEAS(writedata[24], clk, reset_n,  , A1L762,  ,  ,  ,  );


--A1L825 is Selector14~0
A1L825 = ( A1L402 & ( A1L403 & ( A1L274 ) ) ) # ( !A1L402 & ( A1L403 & ( minAngleCount[22] ) ) ) # ( A1L402 & ( !A1L403 & ( maxAngleCount[22] ) ) ) # ( !A1L402 & ( !A1L403 & ( A1L158 ) ) );


--A1L456 is angleCount[22]~35
A1L456 = !A1L825 $ (!A1L454);


--reg[0][22] is reg[0][22]
--register power-up is low

reg[0][22] = DFFEAS(writedata[22], clk, reset_n,  , A1L762,  ,  ,  ,  );


--A1L836 is Selector25~0
A1L836 = ( A1L402 & ( A1L403 & ( A1L278 ) ) ) # ( !A1L402 & ( A1L403 & ( minAngleCount[11] ) ) ) # ( A1L402 & ( !A1L403 & ( maxAngleCount[11] ) ) ) # ( !A1L402 & ( !A1L403 & ( A1L162 ) ) );


--A1L412 is angleCount[11]~79
A1L412 = !A1L836 $ (!A1L410);


--reg[0][11] is reg[0][11]
--register power-up is low

reg[0][11] = DFFEAS(writedata[11], clk, reset_n,  , A1L762,  ,  ,  ,  );


--A1L833 is Selector22~0
A1L833 = ( A1L402 & ( A1L403 & ( A1L282 ) ) ) # ( !A1L402 & ( A1L403 & ( !minAngleCount[14] ) ) ) # ( A1L402 & ( !A1L403 & ( maxAngleCount[14] ) ) ) # ( !A1L402 & ( !A1L403 & ( A1L166 ) ) );


--A1L424 is angleCount[14]~67
A1L424 = !A1L833 $ (!A1L422);


--reg[0][14] is reg[0][14]
--register power-up is low

reg[0][14] = DFFEAS(writedata[14], clk, reset_n,  , A1L762,  ,  ,  ,  );


--A1L834 is Selector23~0
A1L834 = ( A1L402 & ( A1L403 & ( A1L286 ) ) ) # ( !A1L402 & ( A1L403 & ( minAngleCount[13] ) ) ) # ( A1L402 & ( !A1L403 & ( maxAngleCount[13] ) ) ) # ( !A1L402 & ( !A1L403 & ( A1L170 ) ) );


--A1L420 is angleCount[13]~71
A1L420 = !A1L834 $ (!A1L418);


--reg[0][13] is reg[0][13]
--register power-up is low

reg[0][13] = DFFEAS(writedata[13], clk, reset_n,  , A1L762,  ,  ,  ,  );


--A1L835 is Selector24~0
A1L835 = ( A1L402 & ( A1L403 & ( A1L290 ) ) ) # ( !A1L402 & ( A1L403 & ( minAngleCount[12] ) ) ) # ( A1L402 & ( !A1L403 & ( maxAngleCount[12] ) ) ) # ( !A1L402 & ( !A1L403 & ( A1L174 ) ) );


--A1L416 is angleCount[12]~75
A1L416 = !A1L835 $ (!A1L414);


--reg[0][12] is reg[0][12]
--register power-up is low

reg[0][12] = DFFEAS(writedata[12], clk, reset_n,  , A1L762,  ,  ,  ,  );


--A1L837 is Selector26~0
A1L837 = ( A1L402 & ( A1L403 & ( A1L294 ) ) ) # ( !A1L402 & ( A1L403 & ( minAngleCount[10] ) ) ) # ( A1L402 & ( !A1L403 & ( !maxAngleCount[10] ) ) ) # ( !A1L402 & ( !A1L403 & ( A1L178 ) ) );


--A1L408 is angleCount[10]~83
A1L408 = !A1L837 $ (!A1L406);


--reg[0][10] is reg[0][10]
--register power-up is low

reg[0][10] = DFFEAS(writedata[10], clk, reset_n,  , A1L762,  ,  ,  ,  );


--A1L838 is Selector27~0
A1L838 = ( A1L402 & ( A1L403 & ( A1L298 ) ) ) # ( !A1L402 & ( A1L403 & ( !minAngleCount[9] ) ) ) # ( A1L402 & ( !A1L403 & ( !maxAngleCount[9] ) ) ) # ( !A1L402 & ( !A1L403 & ( A1L182 ) ) );


--A1L401 is angleCount[9]~87
A1L401 = !A1L838 $ (!A1L399);


--reg[0][9] is reg[0][9]
--register power-up is low

reg[0][9] = DFFEAS(writedata[9], clk, reset_n,  , A1L762,  ,  ,  ,  );


--A1L839 is Selector28~0
A1L839 = ( A1L402 & ( A1L403 & ( A1L302 ) ) ) # ( !A1L402 & ( A1L403 & ( !minAngleCount[8] ) ) ) # ( A1L402 & ( !A1L403 & ( maxAngleCount[8] ) ) ) # ( !A1L402 & ( !A1L403 & ( A1L186 ) ) );


--A1L397 is angleCount[8]~91
A1L397 = !A1L839 $ (!A1L395);


--reg[0][8] is reg[0][8]
--register power-up is low

reg[0][8] = DFFEAS(writedata[8], clk, reset_n,  , A1L762,  ,  ,  ,  );


--A1L844 is Selector33~0
A1L844 = ( A1L402 & ( A1L403 & ( A1L306 ) ) ) # ( !A1L402 & ( A1L403 & ( !minAngleCount[3] ) ) ) # ( A1L402 & ( !A1L403 & ( !maxAngleCount[3] ) ) ) # ( !A1L402 & ( !A1L403 & ( A1L190 ) ) );


--A1L377 is angleCount[3]~111
A1L377 = !A1L844 $ (!A1L375);


--reg[0][3] is reg[0][3]
--register power-up is low

reg[0][3] = DFFEAS(writedata[3], clk, reset_n,  , A1L762,  ,  ,  ,  );


--A1L373 is angleCount[2]~115
A1L373 = !A1L371 $ (((!current_state.INT_RIGHT & (maxAngleCount[2])) # (current_state.INT_RIGHT & ((minAngleCount[2])))));


--reg[0][2] is reg[0][2]
--register power-up is low

reg[0][2] = DFFEAS(writedata[2], clk, reset_n,  , A1L762,  ,  ,  ,  );


--A1L369 is angleCount[1]~119
A1L369 = !A1L367 $ (((!current_state.INT_RIGHT & (maxAngleCount[1])) # (current_state.INT_RIGHT & ((minAngleCount[1])))));


--reg[0][1] is reg[0][1]
--register power-up is low

reg[0][1] = DFFEAS(writedata[1], clk, reset_n,  , A1L762,  ,  ,  ,  );


--A1L365 is angleCount[0]~123
A1L365 = !A1L363 $ (((!current_state.INT_RIGHT & (maxAngleCount[0])) # (current_state.INT_RIGHT & ((minAngleCount[0])))));


--reg[0][0] is reg[0][0]
--register power-up is low

reg[0][0] = DFFEAS(writedata[0], clk, reset_n,  , A1L762,  ,  ,  ,  );


--A1L842 is Selector31~0
A1L842 = ( A1L402 & ( A1L403 & ( A1L310 ) ) ) # ( !A1L402 & ( A1L403 & ( minAngleCount[5] ) ) ) # ( A1L402 & ( !A1L403 & ( maxAngleCount[5] ) ) ) # ( !A1L402 & ( !A1L403 & ( A1L194 ) ) );


--A1L385 is angleCount[5]~103
A1L385 = !A1L842 $ (!A1L383);


--reg[0][5] is reg[0][5]
--register power-up is low

reg[0][5] = DFFEAS(writedata[5], clk, reset_n,  , A1L762,  ,  ,  ,  );


--A1L840 is Selector29~0
A1L840 = ( A1L402 & ( A1L403 & ( A1L314 ) ) ) # ( !A1L402 & ( A1L403 & ( minAngleCount[7] ) ) ) # ( A1L402 & ( !A1L403 & ( !maxAngleCount[7] ) ) ) # ( !A1L402 & ( !A1L403 & ( A1L198 ) ) );


--A1L393 is angleCount[7]~95
A1L393 = !A1L840 $ (!A1L391);


--reg[0][7] is reg[0][7]
--register power-up is low

reg[0][7] = DFFEAS(writedata[7], clk, reset_n,  , A1L762,  ,  ,  ,  );


--A1L841 is Selector30~0
A1L841 = ( A1L402 & ( A1L403 & ( A1L318 ) ) ) # ( !A1L402 & ( A1L403 & ( !minAngleCount[6] ) ) ) # ( A1L402 & ( !A1L403 & ( maxAngleCount[6] ) ) ) # ( !A1L402 & ( !A1L403 & ( A1L202 ) ) );


--A1L389 is angleCount[6]~99
A1L389 = !A1L841 $ (!A1L387);


--reg[0][6] is reg[0][6]
--register power-up is low

reg[0][6] = DFFEAS(writedata[6], clk, reset_n,  , A1L762,  ,  ,  ,  );


--A1L843 is Selector32~0
A1L843 = ( A1L402 & ( A1L403 & ( A1L322 ) ) ) # ( !A1L402 & ( A1L403 & ( minAngleCount[4] ) ) ) # ( A1L402 & ( !A1L403 & ( !maxAngleCount[4] ) ) ) # ( !A1L402 & ( !A1L403 & ( A1L206 ) ) );


--A1L381 is angleCount[4]~107
A1L381 = !A1L843 $ (!A1L379);


--reg[0][4] is reg[0][4]
--register power-up is low

reg[0][4] = DFFEAS(writedata[4], clk, reset_n,  , A1L762,  ,  ,  ,  );


--A1L826 is Selector15~0
A1L826 = ( A1L402 & ( A1L403 & ( A1L326 ) ) ) # ( !A1L402 & ( A1L403 & ( minAngleCount[21] ) ) ) # ( A1L402 & ( !A1L403 & ( maxAngleCount[21] ) ) ) # ( !A1L402 & ( !A1L403 & ( A1L210 ) ) );


--A1L452 is angleCount[21]~39
A1L452 = !A1L826 $ (!A1L450);


--reg[0][21] is reg[0][21]
--register power-up is low

reg[0][21] = DFFEAS(writedata[21], clk, reset_n,  , A1L762,  ,  ,  ,  );


--A1L827 is Selector16~0
A1L827 = ( A1L402 & ( A1L403 & ( A1L330 ) ) ) # ( !A1L402 & ( A1L403 & ( minAngleCount[20] ) ) ) # ( A1L402 & ( !A1L403 & ( maxAngleCount[20] ) ) ) # ( !A1L402 & ( !A1L403 & ( A1L214 ) ) );


--A1L448 is angleCount[20]~43
A1L448 = !A1L827 $ (!A1L446);


--reg[0][20] is reg[0][20]
--register power-up is low

reg[0][20] = DFFEAS(writedata[20], clk, reset_n,  , A1L762,  ,  ,  ,  );


--A1L828 is Selector17~0
A1L828 = ( A1L402 & ( A1L403 & ( A1L334 ) ) ) # ( !A1L402 & ( A1L403 & ( minAngleCount[19] ) ) ) # ( A1L402 & ( !A1L403 & ( maxAngleCount[19] ) ) ) # ( !A1L402 & ( !A1L403 & ( A1L218 ) ) );


--A1L444 is angleCount[19]~47
A1L444 = !A1L828 $ (!A1L442);


--reg[0][19] is reg[0][19]
--register power-up is low

reg[0][19] = DFFEAS(writedata[19], clk, reset_n,  , A1L762,  ,  ,  ,  );


--A1L829 is Selector18~0
A1L829 = ( A1L402 & ( A1L403 & ( A1L338 ) ) ) # ( !A1L402 & ( A1L403 & ( minAngleCount[18] ) ) ) # ( A1L402 & ( !A1L403 & ( maxAngleCount[18] ) ) ) # ( !A1L402 & ( !A1L403 & ( A1L222 ) ) );


--A1L440 is angleCount[18]~51
A1L440 = !A1L829 $ (!A1L438);


--reg[0][18] is reg[0][18]
--register power-up is low

reg[0][18] = DFFEAS(writedata[18], clk, reset_n,  , A1L762,  ,  ,  ,  );


--A1L831 is Selector20~0
A1L831 = ( A1L402 & ( A1L403 & ( A1L342 ) ) ) # ( !A1L402 & ( A1L403 & ( minAngleCount[16] ) ) ) # ( A1L402 & ( !A1L403 & ( !maxAngleCount[16] ) ) ) # ( !A1L402 & ( !A1L403 & ( A1L226 ) ) );


--A1L432 is angleCount[16]~59
A1L432 = !A1L831 $ (!A1L430);


--reg[0][16] is reg[0][16]
--register power-up is low

reg[0][16] = DFFEAS(writedata[16], clk, reset_n,  , A1L762,  ,  ,  ,  );


--A1L830 is Selector19~0
A1L830 = ( A1L402 & ( A1L403 & ( A1L346 ) ) ) # ( !A1L402 & ( A1L403 & ( minAngleCount[17] ) ) ) # ( A1L402 & ( !A1L403 & ( maxAngleCount[17] ) ) ) # ( !A1L402 & ( !A1L403 & ( A1L230 ) ) );


--A1L436 is angleCount[17]~55
A1L436 = !A1L830 $ (!A1L434);


--reg[0][17] is reg[0][17]
--register power-up is low

reg[0][17] = DFFEAS(writedata[17], clk, reset_n,  , A1L762,  ,  ,  ,  );


--A1L832 is Selector21~0
A1L832 = ( A1L402 & ( A1L403 & ( A1L350 ) ) ) # ( !A1L402 & ( A1L403 & ( !minAngleCount[15] ) ) ) # ( A1L402 & ( !A1L403 & ( !maxAngleCount[15] ) ) ) # ( !A1L402 & ( !A1L403 & ( A1L234 ) ) );


--A1L428 is angleCount[15]~63
A1L428 = !A1L832 $ (!A1L426);


--reg[0][15] is reg[0][15]
--register power-up is low

reg[0][15] = DFFEAS(writedata[15], clk, reset_n,  , A1L762,  ,  ,  ,  );


--A1L817 is Selector6~0
A1L817 = ( A1L402 & ( A1L403 & ( A1L354 ) ) ) # ( !A1L402 & ( A1L403 & ( minAngleCount[30] ) ) ) # ( A1L402 & ( !A1L403 & ( maxAngleCount[30] ) ) ) # ( !A1L402 & ( !A1L403 & ( A1L238 ) ) );


--A1L488 is angleCount[30]~3
A1L488 = !A1L817 $ (!A1L486);


--reg[0][30] is reg[0][30]
--register power-up is low

reg[0][30] = DFFEAS(writedata[30], clk, reset_n,  , A1L762,  ,  ,  ,  );


--A1L818 is Selector7~0
A1L818 = ( A1L402 & ( A1L403 & ( A1L358 ) ) ) # ( !A1L402 & ( A1L403 & ( minAngleCount[29] ) ) ) # ( A1L402 & ( !A1L403 & ( maxAngleCount[29] ) ) ) # ( !A1L402 & ( !A1L403 & ( A1L242 ) ) );


--A1L484 is angleCount[29]~7
A1L484 = !A1L818 $ (!A1L482);


--reg[0][29] is reg[0][29]
--register power-up is low

reg[0][29] = DFFEAS(writedata[29], clk, reset_n,  , A1L762,  ,  ,  ,  );


--A1L814 is Selector2~0
A1L814 = ( A1L573 & ( (!A1L741) # (((!current_state.SW_RIGHT) # (A1L606)) # (angleCount[31])) ) ) # ( !A1L573 & ( (!A1L741) # ((current_state.SW_RIGHT & ((A1L606) # (angleCount[31])))) ) );


--A1L812 is Selector0~0
A1L812 = (!current_state.INT_RIGHT & current_state.INT_LEFT);


--reg[1][7] is reg[1][7]
--register power-up is low

reg[1][7] = DFFEAS(writedata[7], clk, reset_n,  , A1L810,  ,  ,  ,  );


--reg[1][6] is reg[1][6]
--register power-up is low

reg[1][6] = DFFEAS(writedata[6], clk, reset_n,  , A1L810,  ,  ,  ,  );


--reg[1][5] is reg[1][5]
--register power-up is low

reg[1][5] = DFFEAS(writedata[5], clk, reset_n,  , A1L810,  ,  ,  ,  );


--reg[1][4] is reg[1][4]
--register power-up is low

reg[1][4] = DFFEAS(writedata[4], clk, reset_n,  , A1L810,  ,  ,  ,  );


--reg[1][1] is reg[1][1]
--register power-up is low

reg[1][1] = DFFEAS(writedata[1], clk, reset_n,  , A1L810,  ,  ,  ,  );


--reg[1][0] is reg[1][0]
--register power-up is low

reg[1][0] = DFFEAS(writedata[0], clk, reset_n,  , A1L810,  ,  ,  ,  );


--reg[1][3] is reg[1][3]
--register power-up is low

reg[1][3] = DFFEAS(writedata[3], clk, reset_n,  , A1L810,  ,  ,  ,  );


--reg[1][2] is reg[1][2]
--register power-up is low

reg[1][2] = DFFEAS(writedata[2], clk, reset_n,  , A1L810,  ,  ,  ,  );


--reg[1][14] is reg[1][14]
--register power-up is low

reg[1][14] = DFFEAS(writedata[14], clk, reset_n,  , A1L810,  ,  ,  ,  );


--reg[1][13] is reg[1][13]
--register power-up is low

reg[1][13] = DFFEAS(writedata[13], clk, reset_n,  , A1L810,  ,  ,  ,  );


--reg[1][12] is reg[1][12]
--register power-up is low

reg[1][12] = DFFEAS(writedata[12], clk, reset_n,  , A1L810,  ,  ,  ,  );


--reg[1][11] is reg[1][11]
--register power-up is low

reg[1][11] = DFFEAS(writedata[11], clk, reset_n,  , A1L810,  ,  ,  ,  );


--reg[1][9] is reg[1][9]
--register power-up is low

reg[1][9] = DFFEAS(writedata[9], clk, reset_n,  , A1L810,  ,  ,  ,  );


--reg[1][10] is reg[1][10]
--register power-up is low

reg[1][10] = DFFEAS(writedata[10], clk, reset_n,  , A1L810,  ,  ,  ,  );


--reg[1][8] is reg[1][8]
--register power-up is low

reg[1][8] = DFFEAS(writedata[8], clk, reset_n,  , A1L810,  ,  ,  ,  );


--reg[1][21] is reg[1][21]
--register power-up is low

reg[1][21] = DFFEAS(writedata[21], clk, reset_n,  , A1L810,  ,  ,  ,  );


--reg[1][20] is reg[1][20]
--register power-up is low

reg[1][20] = DFFEAS(writedata[20], clk, reset_n,  , A1L810,  ,  ,  ,  );


--reg[1][19] is reg[1][19]
--register power-up is low

reg[1][19] = DFFEAS(writedata[19], clk, reset_n,  , A1L810,  ,  ,  ,  );


--reg[1][18] is reg[1][18]
--register power-up is low

reg[1][18] = DFFEAS(writedata[18], clk, reset_n,  , A1L810,  ,  ,  ,  );


--reg[1][16] is reg[1][16]
--register power-up is low

reg[1][16] = DFFEAS(writedata[16], clk, reset_n,  , A1L810,  ,  ,  ,  );


--reg[1][17] is reg[1][17]
--register power-up is low

reg[1][17] = DFFEAS(writedata[17], clk, reset_n,  , A1L810,  ,  ,  ,  );


--reg[1][15] is reg[1][15]
--register power-up is low

reg[1][15] = DFFEAS(writedata[15], clk, reset_n,  , A1L810,  ,  ,  ,  );


--reg[1][28] is reg[1][28]
--register power-up is low

reg[1][28] = DFFEAS(writedata[28], clk, reset_n,  , A1L810,  ,  ,  ,  );


--reg[1][27] is reg[1][27]
--register power-up is low

reg[1][27] = DFFEAS(writedata[27], clk, reset_n,  , A1L810,  ,  ,  ,  );


--reg[1][26] is reg[1][26]
--register power-up is low

reg[1][26] = DFFEAS(writedata[26], clk, reset_n,  , A1L810,  ,  ,  ,  );


--reg[1][25] is reg[1][25]
--register power-up is low

reg[1][25] = DFFEAS(writedata[25], clk, reset_n,  , A1L810,  ,  ,  ,  );


--reg[1][23] is reg[1][23]
--register power-up is low

reg[1][23] = DFFEAS(writedata[23], clk, reset_n,  , A1L810,  ,  ,  ,  );


--reg[1][24] is reg[1][24]
--register power-up is low

reg[1][24] = DFFEAS(writedata[24], clk, reset_n,  , A1L810,  ,  ,  ,  );


--reg[1][22] is reg[1][22]
--register power-up is low

reg[1][22] = DFFEAS(writedata[22], clk, reset_n,  , A1L810,  ,  ,  ,  );


--reg[1][30] is reg[1][30]
--register power-up is low

reg[1][30] = DFFEAS(writedata[30], clk, reset_n,  , A1L810,  ,  ,  ,  );


--reg[1][29] is reg[1][29]
--register power-up is low

reg[1][29] = DFFEAS(writedata[29], clk, reset_n,  , A1L810,  ,  ,  ,  );


--writedata[25] is writedata[25]
writedata[25] = INPUT();


--address is address
address = INPUT();


--A1L762 is reg[0][15]~0
A1L762 = (write & !address);


--writedata[28] is writedata[28]
writedata[28] = INPUT();


--writedata[27] is writedata[27]
writedata[27] = INPUT();


--writedata[26] is writedata[26]
writedata[26] = INPUT();


--writedata[23] is writedata[23]
writedata[23] = INPUT();


--writedata[24] is writedata[24]
writedata[24] = INPUT();


--writedata[22] is writedata[22]
writedata[22] = INPUT();


--writedata[11] is writedata[11]
writedata[11] = INPUT();


--writedata[14] is writedata[14]
writedata[14] = INPUT();


--writedata[13] is writedata[13]
writedata[13] = INPUT();


--writedata[12] is writedata[12]
writedata[12] = INPUT();


--writedata[10] is writedata[10]
writedata[10] = INPUT();


--writedata[9] is writedata[9]
writedata[9] = INPUT();


--writedata[8] is writedata[8]
writedata[8] = INPUT();


--writedata[3] is writedata[3]
writedata[3] = INPUT();


--writedata[2] is writedata[2]
writedata[2] = INPUT();


--writedata[1] is writedata[1]
writedata[1] = INPUT();


--writedata[0] is writedata[0]
writedata[0] = INPUT();


--writedata[5] is writedata[5]
writedata[5] = INPUT();


--writedata[7] is writedata[7]
writedata[7] = INPUT();


--writedata[6] is writedata[6]
writedata[6] = INPUT();


--writedata[4] is writedata[4]
writedata[4] = INPUT();


--writedata[21] is writedata[21]
writedata[21] = INPUT();


--writedata[20] is writedata[20]
writedata[20] = INPUT();


--writedata[19] is writedata[19]
writedata[19] = INPUT();


--writedata[18] is writedata[18]
writedata[18] = INPUT();


--writedata[16] is writedata[16]
writedata[16] = INPUT();


--writedata[17] is writedata[17]
writedata[17] = INPUT();


--writedata[15] is writedata[15]
writedata[15] = INPUT();


--writedata[30] is writedata[30]
writedata[30] = INPUT();


--writedata[29] is writedata[29]
writedata[29] = INPUT();


--A1L810 is reg[1][30]~1
A1L810 = (write & address);


--A1L574 is LessThan1~33
A1L574 = ( !A1L380 & ( maxAngleCount[4] & ( (!A1L388 & (!maxAngleCount[6] & (!A1L384 $ (maxAngleCount[5])))) # (A1L388 & (maxAngleCount[6] & (!A1L384 $ (maxAngleCount[5])))) ) ) ) # ( A1L380 & ( !maxAngleCount[4] & ( (!A1L388 & (!maxAngleCount[6] & (!A1L384 $ (maxAngleCount[5])))) # (A1L388 & (maxAngleCount[6] & (!A1L384 $ (maxAngleCount[5])))) ) ) );


--A1L575 is LessThan1~34
A1L575 = (!A1L368 & ((!maxAngleCount[1]) # ((!A1L364 & !maxAngleCount[0])))) # (A1L368 & (!A1L364 & (!maxAngleCount[1] & !maxAngleCount[0])));


--A1L607 is LessThan2~28
A1L607 = ( minAngleCount[4] & ( A1L380 & ( (!minAngleCount[6] & (A1L388 & (!minAngleCount[5] $ (A1L384)))) # (minAngleCount[6] & (!A1L388 & (!minAngleCount[5] $ (A1L384)))) ) ) ) # ( !minAngleCount[4] & ( !A1L380 & ( (!minAngleCount[6] & (A1L388 & (!minAngleCount[5] $ (A1L384)))) # (minAngleCount[6] & (!A1L388 & (!minAngleCount[5] $ (A1L384)))) ) ) );


--A1L608 is LessThan2~29
A1L608 = (!minAngleCount[1] & (A1L368 & (minAngleCount[0] & A1L364))) # (minAngleCount[1] & (((minAngleCount[0] & A1L364)) # (A1L368)));


--A1L609 is LessThan2~30
A1L609 = (!minAngleCount[16] & (((minAngleCount[15] & A1L427)) # (A1L431))) # (minAngleCount[16] & (A1L431 & (minAngleCount[15] & A1L427)));


--A1L610 is LessThan2~31
A1L610 = (!minAngleCount[18] & (((!minAngleCount[17] & A1L435)) # (A1L439))) # (minAngleCount[18] & (A1L439 & (!minAngleCount[17] & A1L435)));


--A1L611 is LessThan2~32
A1L611 = (!minAngleCount[23] & (((!minAngleCount[22] & A1L455)) # (A1L459))) # (minAngleCount[23] & (A1L459 & (!minAngleCount[22] & A1L455)));


--A1L612 is LessThan2~33
A1L612 = (!minAngleCount[25] & (((!minAngleCount[24] & A1L463)) # (A1L467))) # (minAngleCount[25] & (A1L467 & (!minAngleCount[24] & A1L463)));


--A1L576 is LessThan1~35
A1L576 = ( A1L396 & ( maxAngleCount[8] & ( (!A1L411 & (!maxAngleCount[11] & (!A1L407 $ (!maxAngleCount[10])))) # (A1L411 & (maxAngleCount[11] & (!A1L407 $ (!maxAngleCount[10])))) ) ) ) # ( !A1L396 & ( !maxAngleCount[8] & ( (!A1L411 & (!maxAngleCount[11] & (!A1L407 $ (!maxAngleCount[10])))) # (A1L411 & (maxAngleCount[11] & (!A1L407 $ (!maxAngleCount[10])))) ) ) );


--A1L577 is LessThan1~36
A1L577 = (!A1L419 & (!maxAngleCount[13] & (!A1L415 $ (maxAngleCount[12])))) # (A1L419 & (maxAngleCount[13] & (!A1L415 $ (maxAngleCount[12]))));


--A1L578 is LessThan1~37
A1L578 = ( maxAngleCount[10] & ( maxAngleCount[8] & ( (!A1L407 & (!A1L411 $ (maxAngleCount[11]))) ) ) ) # ( !maxAngleCount[10] & ( maxAngleCount[8] & ( (A1L407 & (!A1L411 $ (maxAngleCount[11]))) ) ) ) # ( maxAngleCount[10] & ( !maxAngleCount[8] & ( (!maxAngleCount[9] & (!A1L407 & (!A1L411 $ (maxAngleCount[11])))) ) ) ) # ( !maxAngleCount[10] & ( !maxAngleCount[8] & ( (!maxAngleCount[9] & (A1L407 & (!A1L411 $ (maxAngleCount[11])))) ) ) );


--A1L613 is LessThan2~34
A1L613 = ( !minAngleCount[8] & ( A1L396 & ( (!minAngleCount[11] & (!A1L411 & (!minAngleCount[10] $ (A1L407)))) # (minAngleCount[11] & (A1L411 & (!minAngleCount[10] $ (A1L407)))) ) ) ) # ( minAngleCount[8] & ( !A1L396 & ( (!minAngleCount[11] & (!A1L411 & (!minAngleCount[10] $ (A1L407)))) # (minAngleCount[11] & (A1L411 & (!minAngleCount[10] $ (A1L407)))) ) ) );


--A1L614 is LessThan2~35
A1L614 = (!minAngleCount[13] & (!A1L419 & (!minAngleCount[12] $ (A1L415)))) # (minAngleCount[13] & (A1L419 & (!minAngleCount[12] $ (A1L415))));


--A1L615 is LessThan2~36
A1L615 = ( A1L407 & ( minAngleCount[8] & ( (minAngleCount[10] & (!minAngleCount[11] $ (A1L411))) ) ) ) # ( !A1L407 & ( minAngleCount[8] & ( (!minAngleCount[10] & (!minAngleCount[11] $ (A1L411))) ) ) ) # ( A1L407 & ( !minAngleCount[8] & ( (minAngleCount[9] & (minAngleCount[10] & (!minAngleCount[11] $ (A1L411)))) ) ) ) # ( !A1L407 & ( !minAngleCount[8] & ( (minAngleCount[9] & (!minAngleCount[10] & (!minAngleCount[11] $ (A1L411)))) ) ) );


--A1L616 is LessThan2~37
A1L616 = ( !minAngleCount[15] & ( A1L427 & ( (!minAngleCount[18] & (!A1L439 & (!minAngleCount[17] $ (A1L435)))) # (minAngleCount[18] & (A1L439 & (!minAngleCount[17] $ (A1L435)))) ) ) ) # ( minAngleCount[15] & ( !A1L427 & ( (!minAngleCount[18] & (!A1L439 & (!minAngleCount[17] $ (A1L435)))) # (minAngleCount[18] & (A1L439 & (!minAngleCount[17] $ (A1L435)))) ) ) );


--A1L617 is LessThan2~38
A1L617 = (!minAngleCount[20] & (!A1L447 & (!minAngleCount[19] $ (A1L443)))) # (minAngleCount[20] & (A1L447 & (!minAngleCount[19] $ (A1L443))));


--A1L716 is minAngleCount[14]~0
A1L716 = !reg[0][14];


--A1L710 is minAngleCount[9]~1
A1L710 = !reg[0][9];


--A1L708 is minAngleCount[8]~2
A1L708 = !reg[0][8];


--A1L701 is minAngleCount[3]~3
A1L701 = !reg[0][3];


--A1L699 is minAngleCount[2]~4
A1L699 = !reg[0][2];


--A1L697 is minAngleCount[1]~5
A1L697 = !reg[0][1];


--A1L695 is minAngleCount[0]~6
A1L695 = !reg[0][0];


--A1L705 is minAngleCount[6]~7
A1L705 = !reg[0][6];


--A1L718 is minAngleCount[15]~8
A1L718 = !reg[0][15];


--A1L737 is next_state.SW_LEFT~0
A1L737 = !current_state.INT_RIGHT;


--A1L665 is maxAngleCount[7]~1
A1L665 = !reg[1][7];


--A1L661 is maxAngleCount[4]~2
A1L661 = !reg[1][4];


--A1L655 is maxAngleCount[1]~3
A1L655 = !reg[1][1];


--A1L653 is maxAngleCount[0]~4
A1L653 = !reg[1][0];


--A1L659 is maxAngleCount[3]~5
A1L659 = !reg[1][3];


--A1L657 is maxAngleCount[2]~6
A1L657 = !reg[1][2];


--A1L668 is maxAngleCount[9]~7
A1L668 = !reg[1][9];


--A1L670 is maxAngleCount[10]~8
A1L670 = !reg[1][10];


--A1L678 is maxAngleCount[16]~9
A1L678 = !reg[1][16];


--A1L676 is maxAngleCount[15]~10
A1L676 = !reg[1][15];


--A1L466 is angleCount[25]~21
A1L466 = ( A1L466 & ( reset_n ) ) # ( A1L466 & ( !reset_n & ( minAngleCount[25] ) ) ) # ( !A1L466 & ( !reset_n & ( minAngleCount[25] ) ) );


--A1L478 is angleCount[28]~9
A1L478 = ( A1L478 & ( reset_n ) ) # ( A1L478 & ( !reset_n & ( minAngleCount[28] ) ) ) # ( !A1L478 & ( !reset_n & ( minAngleCount[28] ) ) );


--A1L474 is angleCount[27]~13
A1L474 = ( A1L474 & ( reset_n ) ) # ( A1L474 & ( !reset_n & ( minAngleCount[27] ) ) ) # ( !A1L474 & ( !reset_n & ( minAngleCount[27] ) ) );


--A1L470 is angleCount[26]~17
A1L470 = ( A1L470 & ( reset_n ) ) # ( A1L470 & ( !reset_n & ( minAngleCount[26] ) ) ) # ( !A1L470 & ( !reset_n & ( minAngleCount[26] ) ) );


--A1L458 is angleCount[23]~29
A1L458 = ( A1L458 & ( reset_n ) ) # ( A1L458 & ( !reset_n & ( minAngleCount[23] ) ) ) # ( !A1L458 & ( !reset_n & ( minAngleCount[23] ) ) );


--A1L462 is angleCount[24]~25
A1L462 = ( A1L462 & ( reset_n ) ) # ( A1L462 & ( !reset_n & ( minAngleCount[24] ) ) ) # ( !A1L462 & ( !reset_n & ( minAngleCount[24] ) ) );


--A1L454 is angleCount[22]~33
A1L454 = ( A1L454 & ( reset_n ) ) # ( A1L454 & ( !reset_n & ( minAngleCount[22] ) ) ) # ( !A1L454 & ( !reset_n & ( minAngleCount[22] ) ) );


--A1L410 is angleCount[11]~77
A1L410 = ( A1L410 & ( reset_n ) ) # ( A1L410 & ( !reset_n & ( minAngleCount[11] ) ) ) # ( !A1L410 & ( !reset_n & ( minAngleCount[11] ) ) );


--A1L422 is angleCount[14]~65
A1L422 = ( A1L422 & ( reset_n ) ) # ( A1L422 & ( !reset_n & ( !minAngleCount[14] ) ) ) # ( !A1L422 & ( !reset_n & ( !minAngleCount[14] ) ) );


--A1L418 is angleCount[13]~69
A1L418 = ( A1L418 & ( reset_n ) ) # ( A1L418 & ( !reset_n & ( minAngleCount[13] ) ) ) # ( !A1L418 & ( !reset_n & ( minAngleCount[13] ) ) );


--A1L414 is angleCount[12]~73
A1L414 = ( A1L414 & ( reset_n ) ) # ( A1L414 & ( !reset_n & ( minAngleCount[12] ) ) ) # ( !A1L414 & ( !reset_n & ( minAngleCount[12] ) ) );


--A1L406 is angleCount[10]~81
A1L406 = ( A1L406 & ( reset_n ) ) # ( A1L406 & ( !reset_n & ( minAngleCount[10] ) ) ) # ( !A1L406 & ( !reset_n & ( minAngleCount[10] ) ) );


--A1L399 is angleCount[9]~85
A1L399 = ( A1L399 & ( reset_n ) ) # ( A1L399 & ( !reset_n & ( !minAngleCount[9] ) ) ) # ( !A1L399 & ( !reset_n & ( !minAngleCount[9] ) ) );


--A1L395 is angleCount[8]~89
A1L395 = ( A1L395 & ( reset_n ) ) # ( A1L395 & ( !reset_n & ( !minAngleCount[8] ) ) ) # ( !A1L395 & ( !reset_n & ( !minAngleCount[8] ) ) );


--A1L375 is angleCount[3]~109
A1L375 = ( A1L375 & ( reset_n ) ) # ( A1L375 & ( !reset_n & ( !minAngleCount[3] ) ) ) # ( !A1L375 & ( !reset_n & ( !minAngleCount[3] ) ) );


--A1L371 is angleCount[2]~113
A1L371 = ( A1L371 & ( reset_n ) ) # ( A1L371 & ( !reset_n & ( !minAngleCount[2] ) ) ) # ( !A1L371 & ( !reset_n & ( !minAngleCount[2] ) ) );


--A1L367 is angleCount[1]~117
A1L367 = ( A1L367 & ( reset_n ) ) # ( A1L367 & ( !reset_n & ( !minAngleCount[1] ) ) ) # ( !A1L367 & ( !reset_n & ( !minAngleCount[1] ) ) );


--A1L363 is angleCount[0]~121
A1L363 = ( A1L363 & ( reset_n ) ) # ( A1L363 & ( !reset_n & ( !minAngleCount[0] ) ) ) # ( !A1L363 & ( !reset_n & ( !minAngleCount[0] ) ) );


--A1L383 is angleCount[5]~101
A1L383 = ( A1L383 & ( reset_n ) ) # ( A1L383 & ( !reset_n & ( minAngleCount[5] ) ) ) # ( !A1L383 & ( !reset_n & ( minAngleCount[5] ) ) );


--A1L391 is angleCount[7]~93
A1L391 = ( A1L391 & ( reset_n ) ) # ( A1L391 & ( !reset_n & ( minAngleCount[7] ) ) ) # ( !A1L391 & ( !reset_n & ( minAngleCount[7] ) ) );


--A1L387 is angleCount[6]~97
A1L387 = ( A1L387 & ( reset_n ) ) # ( A1L387 & ( !reset_n & ( !minAngleCount[6] ) ) ) # ( !A1L387 & ( !reset_n & ( !minAngleCount[6] ) ) );


--A1L379 is angleCount[4]~105
A1L379 = ( A1L379 & ( reset_n ) ) # ( A1L379 & ( !reset_n & ( minAngleCount[4] ) ) ) # ( !A1L379 & ( !reset_n & ( minAngleCount[4] ) ) );


--A1L450 is angleCount[21]~37
A1L450 = ( A1L450 & ( reset_n ) ) # ( A1L450 & ( !reset_n & ( minAngleCount[21] ) ) ) # ( !A1L450 & ( !reset_n & ( minAngleCount[21] ) ) );


--A1L446 is angleCount[20]~41
A1L446 = ( A1L446 & ( reset_n ) ) # ( A1L446 & ( !reset_n & ( minAngleCount[20] ) ) ) # ( !A1L446 & ( !reset_n & ( minAngleCount[20] ) ) );


--A1L442 is angleCount[19]~45
A1L442 = ( A1L442 & ( reset_n ) ) # ( A1L442 & ( !reset_n & ( minAngleCount[19] ) ) ) # ( !A1L442 & ( !reset_n & ( minAngleCount[19] ) ) );


--A1L438 is angleCount[18]~49
A1L438 = ( A1L438 & ( reset_n ) ) # ( A1L438 & ( !reset_n & ( minAngleCount[18] ) ) ) # ( !A1L438 & ( !reset_n & ( minAngleCount[18] ) ) );


--A1L430 is angleCount[16]~57
A1L430 = ( A1L430 & ( reset_n ) ) # ( A1L430 & ( !reset_n & ( minAngleCount[16] ) ) ) # ( !A1L430 & ( !reset_n & ( minAngleCount[16] ) ) );


--A1L434 is angleCount[17]~53
A1L434 = ( A1L434 & ( reset_n ) ) # ( A1L434 & ( !reset_n & ( minAngleCount[17] ) ) ) # ( !A1L434 & ( !reset_n & ( minAngleCount[17] ) ) );


--A1L426 is angleCount[15]~61
A1L426 = ( A1L426 & ( reset_n ) ) # ( A1L426 & ( !reset_n & ( !minAngleCount[15] ) ) ) # ( !A1L426 & ( !reset_n & ( !minAngleCount[15] ) ) );


--A1L486 is angleCount[30]~1
A1L486 = ( A1L486 & ( reset_n ) ) # ( A1L486 & ( !reset_n & ( minAngleCount[30] ) ) ) # ( !A1L486 & ( !reset_n & ( minAngleCount[30] ) ) );


--A1L482 is angleCount[29]~5
A1L482 = ( A1L482 & ( reset_n ) ) # ( A1L482 & ( !reset_n & ( minAngleCount[29] ) ) ) # ( !A1L482 & ( !reset_n & ( minAngleCount[29] ) ) );


